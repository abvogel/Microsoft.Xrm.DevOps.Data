//         Project / File: Microsoft.Xrm.Data.PowerShell.Tests / CrmSchema.cs
// File generated by: CRM Code Generator - Eric Labashosky, Ahmed el-Sawalhy

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Text;
using System.Runtime.Serialization;
using System.Reflection;
using System.ServiceModel;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Client;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Query;

[assembly: ProxyTypesAssemblyAttribute()]
namespace Microsoft.Xrm.Data.PowerShell.Tests
{
	#region XrmServiceContext

	/// <summary>
	/// Represents a source of entities bound to a CRM service. It tracks and manages changes made to the retrieved entities.
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode()]
	public partial class CrmServiceContext : OrganizationServiceContext
	{
		/// <summary>
		/// Constructor.
		/// </summary>
		public CrmServiceContext(IOrganizationService service) : 
				base(service)
		{
		}

		/// <summary>
		/// Gets a binding to the set of all <see cref="ActivityParty"/> entities.
		/// </summary>
		public System.Linq.IQueryable<ActivityParty> ActivityPartySet
		{
			get
			{
				return this.CreateQuery<ActivityParty>();
			}
		}
		/// <summary>
		/// Gets a binding to the set of all <see cref="Incident"/> entities.
		/// </summary>
		public System.Linq.IQueryable<Incident> IncidentSet
		{
			get
			{
				return this.CreateQuery<Incident>();
			}
		}
		/// <summary>
		/// Gets a binding to the set of all <see cref="Invoice"/> entities.
		/// </summary>
		public System.Linq.IQueryable<Invoice> InvoiceSet
		{
			get
			{
				return this.CreateQuery<Invoice>();
			}
		}
		/// <summary>
		/// Gets a binding to the set of all <see cref="KnowledgeArticle"/> entities.
		/// </summary>
		public System.Linq.IQueryable<KnowledgeArticle> KnowledgeArticleSet
		{
			get
			{
				return this.CreateQuery<KnowledgeArticle>();
			}
		}
		/// <summary>
		/// Gets a binding to the set of all <see cref="msdyn_purchaseorderproduct"/> entities.
		/// </summary>
		public System.Linq.IQueryable<msdyn_purchaseorderproduct> msdyn_purchaseorderproductSet
		{
			get
			{
				return this.CreateQuery<msdyn_purchaseorderproduct>();
			}
		}
		/// <summary>
		/// Gets a binding to the set of all <see cref="msdyn_resourcerequirementdetail"/> entities.
		/// </summary>
		public System.Linq.IQueryable<msdyn_resourcerequirementdetail> msdyn_resourcerequirementdetailSet
		{
			get
			{
				return this.CreateQuery<msdyn_resourcerequirementdetail>();
			}
		}
		/// <summary>
		/// Gets a binding to the set of all <see cref="Theme"/> entities.
		/// </summary>
		public System.Linq.IQueryable<Theme> ThemeSet
		{
			get
			{
				return this.CreateQuery<Theme>();
			}
		}
	}

	#endregion

	#region Extensions

    public class ValidationError
    {
        public Guid? RecordId;
        public string AttributeName;

        public ValidationType ErrorType;
        public IDictionary<int, string> ErrorMessage;

        public string StringValue;
        public int? StringMaxLength;

        public decimal? NumericValue;
        public decimal? NumericRangeMin;
        public decimal? NumericRangeMax;
    }

	public class ValidationLocalisation
	{
		public ValidationType ErrorType;
		/// <summary>
		/// A dictionary of language code as key and message format as value
		/// </summary>
		public IDictionary<int, string> Localisation;
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public static class CrmGeneratorExtensions
	{
		/// <summary>
		/// Retrieves the label of the 'OptionSetValue' using the corresponding enum member constant
		/// and the language code given.
		/// </summary>
		/// <param name="enumMember">The early-bound enum member constant; e.g.: 'Account.Enums.IndustryCode.Accounting'</param>
		/// <param name="languageCode">The language code from CRM</param>
		/// <returns>The label corresponding to the enum constant and the language code.</returns>
		public static string GetLabel(this Enum enumMember, int languageCode = 1033)
		{
			var enumType = enumMember.GetType();
			var enumParentType = enumType.DeclaringType;

			if (enumParentType == null)
			{
				return "NO_LABEL";
			}

			var enumsType = enumParentType.GetNestedType("Enums");

			if (enumsType == null)
			{
				return "NO_LABEL";
			}

			var labelsType = enumsType.GetNestedType("Labels");

			if (labelsType == null)
			{
				return "NO_LABEL";
			}

			var labelType = labelsType.GetNestedType(enumType.Name.Substring(0, enumType.Name.LastIndexOf("Enum")));

			if (labelType == null)
			{
				return "NO_LABEL";
			}

			var field = labelType.GetField(enumMember + "_" + languageCode);

			return field == null ? "NO_LABEL" : field.GetValue(labelType).ToString();
		}

		/// <summary>
		/// Converts an enum constant to an OptionSetValue object..
		/// </summary>
		/// <param name="enumMember">The early-bound enum member constant; e.g.: 'Account.IndustryCode.Accounting'</param>
		/// <returns>The OptionSetValue object.</returns>
		public static OptionSetValue ToOptionSetValue(this Enum enumMember)
		{
			return new OptionSetValue(int.Parse(enumMember.ToString("d")));
		}

		/// <summary>
		///     Validates that all field values in this record adhere to their contraints specified in CRM.<br />
		///     Validation checks: required, numeric value range, and string length.<br />
		/// </summary>
		/// <param name="validationTypes">An array of validations to run. Default is all.</param>
		/// <returns>A single message containing all validation errors.</returns>
		public static string GetValidationErrorsMessage(this Entity entityRecord, ValidationType[] validationTypes)
		{
			return GetValidationErrorsMessage(entityRecord,
				validationLocationsDefaults.Where(local => validationTypes.Contains(local.ErrorType)).ToArray());
		}

		/// <summary>
		///     Validates that all field values in this record adhere to their contraints specified in CRM.<br />
		///     Validation checks: required, numeric value range, and string length.<br />
		/// </summary>
		/// <param name="validationLocalisation">
		///     [OPTIONAL] An array containing validation types with the message format to use for the validation error.<br />
		///     For validation type "InRange", the message format takes three params for min, max, and actual value respectively;
		///         e.g.: "Value must be between {0} and {1}. Actual value was {2}.".<br />
		///     For validation type "MaxLength", the message format takes two params;
		///		    e.g.: "Value length must be less than {0}. Actual value was {1}."<br />
		///     Only include ONE localisation language.<br />
		///     Default is a check on all validation types.
		/// </param>
		/// <returns>A single message containing all validation errors.</returns>
		public static string GetValidationErrorsMessage(this Entity entityRecord, ValidationLocalisation[] validationLocalisation = null)
		{
			if (validationLocalisation != null
				&& validationLocalisation.Any(local => local.Localisation.Count > 1))
			{
				throw new ArgumentOutOfRangeException("validationLocalisation",
					"There should only be one validation localisation language for this method.");
			}

			var validationErrorMessages = GetValidationErrorMessages(entityRecord, validationLocalisation);

			if (validationErrorMessages.Any())
			{
				return validationErrorMessages.Aggregate(
					(message1, message2) => message1 + "\r\n-----------------------\r\n" + message2);
			}

			return null;
		}

		private static readonly ValidationLocalisation[] validationLocationsDefaults =
		{
			new ValidationLocalisation
			{
				ErrorType = ValidationType.Required,
				Localisation = new Dictionary<int, string>
				               {
					               {1033, "Value cannot be null."}
				               }
			},
			new ValidationLocalisation
			{
				ErrorType = ValidationType.InRange,
				Localisation = new Dictionary<int, string>
				               {
					               {1033, @"Attribute value must be between ""{0}"" and ""{1}"", inclusive. Actual value was ""{2}""."}
				               }
			},
			new ValidationLocalisation
			{
				ErrorType = ValidationType.MaxLength,
				Localisation = new Dictionary<int, string>
				               {
					               {1033, @"Attribute length must be less than ""{0}"". Actual attribute value was ""{1}""."}
				               }
			}
		};

		/// <summary>
		///     Validates that all field values in this record adhere to their contraints specified in CRM.<br />
		///     Validation checks: required, numeric value range, and string length.<br />
		/// </summary>
		/// <param name="validationTypes">An array of validations to run.</param>
		/// <returns>A list of messages indicating validation errors.</returns>
		public static List<string> GetValidationErrorMessages(this Entity entityRecord, ValidationType[] validationTypes)
		{
			return GetValidationErrorMessages(entityRecord,
				validationLocationsDefaults.Where(local => validationTypes.Contains(local.ErrorType)).ToArray());
		}

		/// <summary>
		///     Validates that all field values in this record adhere to their contraints specified in CRM.<br />
		///     Validation checks: required, numeric value range, and string length.<br />
		/// </summary>
		/// <param name="validationLocalisation">
		///     [OPTIONAL] An array containing validation types with the message format to use for the validation error.<br />
		///     For validation type "InRange", the message format takes three params for min, max, and actual value respectively;
		///         e.g.: "Value must be between {0} and {1}. Actual value was {2}.".<br />
		///     For validation type "MaxLength", the message format takes two params;
		///		    e.g.: "Value length must be less than {0}. Actual value was {1}."<br />
		///     Only include ONE localisation language.<br />
		///     Default is a check on all validation types.
		/// </param>
		/// <returns>A list of messages indicating validation errors.</returns>
		public static List<string> GetValidationErrorMessages(this Entity entityRecord, ValidationLocalisation[] validationLocalisation = null)
		{
			if (validationLocalisation != null
			    && validationLocalisation.Any(local => local.Localisation.Count > 1))
			{
				throw new ArgumentOutOfRangeException("validationLocalisation",
					"There should only be one validation localisation language for this method.");
			}

			var validationErrors = GetValidationErrors(entityRecord, validationLocalisation);

			if (validationErrors.Any())
			{
				var messages = validationErrors.Select(error => error.ErrorMessage.Values.First()).ToList();
				var id = ((dynamic)entityRecord).Id;
				messages.Insert(0, string.Format("Record of type \"{0}\"" + (id != null ? " and ID \"{1}\"" : "")
													+ " has invalid values.", entityRecord.GetType().Name, id));
				return messages;
			}

			return null;
		}

		/// <summary>
		///     Validates that all field values in this record adhere to their contraints specified in CRM.<br />
		///     Validation checks: required, numeric value range, and string length.<br />
		/// </summary>
		/// <param name="validationTypes">An array of validations to run.</param>
		/// <returns>A list of validation errors in the form of <see cref="ValidationError"/>.</returns>
		public static List<ValidationError> GetValidationErrors(this Entity entityRecord, ValidationType[] validationTypes)
		{
			return GetValidationErrors(entityRecord,
				validationLocationsDefaults.Where(local => validationTypes.Contains(local.ErrorType)).ToArray());
		}

		///  <summary>
		///      Validates that all field values in this record adhere to their contraints specified in CRM.<br />
		///      Validation checks: required, numeric value range, and string length.<br />
		///  </summary>
		///  <param name="validationLocalisation">
		///      [OPTIONAL] An array containing validation types with the message format to use for the validation error.<br />
		///      For validation type "InRange", the message format takes three params for min, max, and actual value respectively;
		///          e.g.: "Value must be between {0} and {1}. Actual value was {2}.".<br />
		///      For validation type "MaxLength", the message format takes two params;
		/// 		    e.g.: "Value length must be less than {0}. Actual value was {1}."<br />
		///      Default is a check on all validation types.
		///  </param>
		/// <returns>A list of validation errors in the form of <see cref="ValidationError"/>.</returns>
		public static List<ValidationError> GetValidationErrors(this Entity entityRecord, ValidationLocalisation[] validationLocalisation = null)
		{
			var id = ((dynamic) entityRecord).Id;
			var fields = entityRecord.GetType().GetProperties();
			var exceptions = new List<ValidationError>();

			validationLocalisation = validationLocalisation ?? validationLocationsDefaults;

			var localisation = validationLocalisation.FirstOrDefault(local => local.ErrorType == ValidationType.Required);

			if (localisation != null)
			{
				exceptions.AddRange(from fieldQ in fields
				                    where Attribute.IsDefined(fieldQ, typeof (RequiredAttribute))
				                          && fieldQ.GetValue(entityRecord) == null
				                    select new ValidationError
				                           {
					                           RecordId = id,
					                           AttributeName = fieldQ.Name,
					                           ErrorMessage =
						                           localisation.Localisation.ToDictionary(local => local.Key, local => local.Value),
					                           ErrorType = ValidationType.Required
				                           });
			}

			localisation = validationLocalisation.FirstOrDefault(local => local.ErrorType == ValidationType.InRange);

			if (localisation != null)
			{
				foreach (var field in fields.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof (InRangeAttribute)) && fieldQ.GetValue(entityRecord) != null))
				{
					var fieldValue = field.GetValue(entityRecord);
					Type type = field.GetCustomAttribute<InRangeAttribute>().Type;

					var method = type.GetMethods().FirstOrDefault(methodQ => methodQ.GetParameters().Length == 1 && methodQ.Name == "Parse");

					var min = (IComparable) method.Invoke(null, new object[] {field.GetCustomAttribute<InRangeAttribute>().Min});
					var max = (IComparable) method.Invoke(null, new object[] {field.GetCustomAttribute<InRangeAttribute>().Max});

					if (fieldValue != null && (min.CompareTo(fieldValue) == 1 || max.CompareTo(fieldValue) == -1))
					{
						exceptions.Add(new ValidationError
						               {
							               RecordId = id,
							               AttributeName = field.Name,
							               ErrorMessage = localisation.Localisation.ToDictionary(local => local.Key,
									               local => string.Format(local.Value, min, max, fieldValue)),
							               ErrorType = ValidationType.InRange,
							               NumericValue = decimal.Parse(fieldValue.ToString()),
							               NumericRangeMin = decimal.Parse(min.ToString()),
							               NumericRangeMax = decimal.Parse(max.ToString())
						               });
					}
				}
			}


			localisation = validationLocalisation.FirstOrDefault(local => local.ErrorType == ValidationType.MaxLength);

			if (localisation != null)
			{
				exceptions.AddRange(from fieldQ in fields.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof (MaxLengthAttribute)))
				                    let fieldValue = fieldQ.GetValue(entityRecord) as string
				                    let maxLength = fieldQ.GetCustomAttribute<MaxLengthAttribute>().Max
				                    where fieldValue != null && fieldValue.Length > maxLength
				                    select new ValidationError
				                           {
					                           RecordId = id,
					                           AttributeName = fieldQ.Name,
					                           ErrorMessage = localisation.Localisation.ToDictionary(local => local.Key,
							                           local => string.Format(local.Value, maxLength, fieldValue)),
					                           ErrorType = ValidationType.MaxLength,
					                           StringValue = fieldValue,
					                           StringMaxLength = maxLength
				                           });
			}

			return exceptions;
		}

		public static TEntity ConvertTo<TEntity>(this Entity crmRecord) where TEntity : EntityContract
		{
			// create entity object
			var record = Activator.CreateInstance<TEntity>();

			var entityType = typeof(TEntity);
			var entityLogicalName = entityType.GetCustomAttribute<CrmEntityMappingAttribute>().LogicalName;


			// if logical names don't match
			if (entityLogicalName != crmRecord.LogicalName)
			{
				throw new Exception(string.Format("CRM entity '{0}' doesn't map to entity '{1}'.",
					crmRecord.GetType().Name, entityType.Name));
			}

			// go over all fields in the contract entity that has the mapping attribute
			foreach (var field in entityType.GetFields()
				.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof(CrmFieldMappingAttribute))
								 && !Attribute.IsDefined(fieldQ, typeof(CrmRelationMappingAttribute))))
			{
				// get the value of the mapping attribute
				var mapping = field.GetCustomAttribute<CrmFieldMappingAttribute>();
				SetValueInRecord(record, field, crmRecord, mapping);
			}

			// go over all relations in the contract entity that has the mapping attribute
			foreach (var relation in typeof(TEntity).GetFields()
				.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof(CrmRelationMappingAttribute))
						&& !Attribute.IsDefined(fieldQ, typeof(CrmFieldMappingAttribute))))
			{
				// get the value of the mapping attribute
				var mapping = relation.GetCustomAttribute<CrmRelationMappingAttribute>();
				SetRelationInRecord(record, relation, crmRecord, mapping);
			}

			return record;
		}

		private static void SetValueInRecord<TEntity>(TEntity entity, FieldInfo field, Entity crmRecord,
			CrmFieldMappingAttribute mapping)
			where TEntity : EntityContract
		{
			// if key not found, then the CRM record doesn't have that value set
			if (!crmRecord.Attributes.Contains(mapping.LogicalName))
			{
				return;
			}

			var value = crmRecord[mapping.LogicalName];

			// convert types
			if (value is OptionSetValue)
			{
				// can't set enum value with int using reflection!
				field.SetValue(entity, Enum.ToObject(Nullable.GetUnderlyingType(field.FieldType),
					((OptionSetValue)value).Value));

				var labelsProperty = typeof(TEntity).GetProperties().FirstOrDefault(propQ => propQ.Name == field.Name + "Labels");

                if (labelsProperty != null)
                {
                    // get the label value from the CRM record
                    var matchingProperty = crmRecord.GetType().GetProperties().FirstOrDefault(propQ => propQ.Name == field.Name + "Labels");

                    // if it has a value, set it in contract
                    if (matchingProperty != null)
                    {
                        labelsProperty.SetValue(entity, matchingProperty.GetValue(crmRecord));
                    }
                }
			}
			else if (value is Money)
			{
				field.SetValue(entity, ((Money)value).Value);
			}
			else if (value is EntityReference && field.FieldType != typeof(EntityReference))
			{
				var entityRef = (EntityReference) value;

				field.SetValue(entity, entityRef.Id);

				var nameField = typeof(TEntity).GetFields().FirstOrDefault(fieldQ => fieldQ.Name == field.Name + "Name");

				if (nameField != null && entityRef.Name != null)
				{
					nameField.SetValue(entity, entityRef.Name);
				}

				var labelsProperty = typeof(TEntity).GetProperties().FirstOrDefault(propQ => propQ.Name == field.Name + "Labels");

                if (labelsProperty != null)
                {
                    // get the label value from the CRM record
                    var matchingProperty = crmRecord.GetType().GetProperties().FirstOrDefault(propQ => Attribute.IsDefined(propQ, typeof(LabelAttribute))
                        && propQ.GetCustomAttribute<LabelAttribute>().FieldLogicalName == labelsProperty.GetCustomAttribute<LabelAttribute>().FieldLogicalName);

                    // if it has a value, set it in contract
                    if (matchingProperty != null)
                    {
                        labelsProperty.SetValue(entity, matchingProperty.GetValue(crmRecord));
                    }
                }
			}
			else
			{
				field.SetValue(entity, value);
			}
		}

		private static void SetRelationInRecord<TEntity>(TEntity record, FieldInfo field, Entity crmRecord,
			CrmRelationMappingAttribute mapping)
			where TEntity : EntityContract
		{
			var crmRelations = crmRecord.RelatedEntities
				.Where(relationQ => relationQ.Key.SchemaName == mapping.SchemaName
									&& relationQ.Key.PrimaryEntityRole == mapping.Role);

			// if relation not found in CRM record, exit
			if (!crmRelations.Any())
			{
				return;
			}

			var crmRelatedRecords = crmRelations.First().Value.Entities;

			// if there are not related entities in the CRM relation, exit
			if (!crmRelatedRecords.Any())
			{
				return;
			}

			var fieldType = field.FieldType;

			object convertedValue = null;

			// x-N relation
			if (typeof(Array).IsAssignableFrom(fieldType))
			{
				// get the contract type for the relation
				var elementType = fieldType.GetElementType();

				// create an array for the related entities of the appropriate type
				var relatedRecords = Array.CreateInstance(elementType, crmRelatedRecords.Count);

				// create the method reference that will be used to convert the related entities to the CRM entities
				var method = MethodBase.GetCurrentMethod().DeclaringType
					.GetMethod("ConvertTo").MakeGenericMethod(elementType);

				// convert all entities to contract entities
				var objectRelatedRecords = (from object relatedRecord in crmRelatedRecords
											select method.Invoke(relatedRecord, new[] { relatedRecord })).ToArray();

				// copy the object entities to the array of the specific type
				Array.Copy(objectRelatedRecords, relatedRecords, relatedRecords.Length);
				convertedValue = relatedRecords;
			}
			else if (typeof(EntityContract).IsAssignableFrom(fieldType))
			{
				// N-1 relation
				var relatedRecord = crmRelatedRecords.FirstOrDefault();

				if (relatedRecord != null)
				{
					// go over all fields in the contract entity that has the mapping attribute
					foreach (var fieldT in typeof(TEntity).GetFields()
						.Where(fieldQ => fieldQ.Name.Contains(field.Name)
						&& Attribute.IsDefined(fieldQ, typeof(CrmFieldMappingAttribute))))
					{
						// get the value of the mapping attribute
						var mappingT = fieldT.GetCustomAttribute<CrmFieldMappingAttribute>();
						SetValueInRecord(record, fieldT, relatedRecord, mappingT);
					}
					// create the method reference that will be used to convert the related entities to the CRM entities
					var method = MethodBase.GetCurrentMethod().DeclaringType
						.GetMethod("ConvertTo").MakeGenericMethod(fieldType);

					convertedValue = method.Invoke(relatedRecord, new object[] { relatedRecord });
				}
			}

			// set the related entities value in the entity
			field.SetValue(record, convertedValue);
		}

		/// <summary>
		/// Returns an array of logical names whose property is marked for WCF contract.
		/// </summary>
		/// <param name="entity"></param>
		/// <returns>An array of logical names.</returns>
		public static string[] GetDataMemberAttributes(this Entity entity)
		{
			return entity.GetType().GetProperties()
				.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof(DataMemberAttribute)) && Attribute.IsDefined(fieldQ, typeof(AttributeLogicalNameAttribute)))
				.Select(field => field.GetCustomAttribute<AttributeLogicalNameAttribute>().LogicalName).ToArray();
		}

		/// <summary>
		/// Returns an array of logical names of the properties.
		/// </summary>
		/// <param name="entity"></param>
		/// <returns>An array of logical names.</returns>
		public static string[] GetAttributeNames(this Entity entity)
		{
			return entity.GetType().GetProperties()
				.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof(AttributeLogicalNameAttribute)) && !Attribute.IsDefined(fieldQ, typeof(RelationshipSchemaNameAttribute)))
				.Select(field => field.GetCustomAttribute<AttributeLogicalNameAttribute>().LogicalName).ToArray();
		}

		/// <summary>
		/// Loads the values of data member properties from CRM.
		/// </summary>
		/// <param name="entity"></param>
		/// <param name="service">CRM organisation service.</param>
		public static void LoadDataMemberAttributes(this Entity entity, IOrganizationService service)
		{
			LoadAttributeValues(entity, service, entity.GetDataMemberAttributes());
		}

		/// <summary>
		/// Loads the values of all properties from CRM.
		/// </summary>
		/// <param name="entity"></param>
		/// <param name="service">CRM organisation service.</param>
		/// <param name="attributes"></param>
		public static void LoadAttributeValues(this Entity entity, IOrganizationService service, params string[] attributes)
		{
			try
			{
				entity.Id = entity.Id;
			}
			catch
			{
				throw new Exception("Entity is ready only. Set 'MergeOption' to 'NoTracking' in the context used for fetching this entity.");
			}

			var isLoadAll = attributes == null || attributes.Length <= 0;

			if (isLoadAll)
			{
				entity.Attributes.Clear();
			}

			foreach (var attribute in service.Retrieve(entity.LogicalName, entity.Id, new ColumnSet(isLoadAll ? entity.GetAttributeNames() : attributes)).Attributes)
			{
				entity[attribute.Key] = attribute.Value;
			}
		}
	}

	#endregion

	#region Helpers

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public abstract class GeneratedEntityBase : Entity, INotifyPropertyChanging, INotifyPropertyChanged
	{
		public GeneratedEntityBase()
		{}

		public GeneratedEntityBase(string logicalName) : base(logicalName)
		{}

		[DataMember]
		private List<string> NullValuedAttributes { get; set; }
		protected Microsoft.Xrm.Sdk.AttributeCollection backupAttributeCollection;
		protected FormattedValueCollection backupFormattedCollection;
		protected RelatedEntityCollection backupRelatedEntityCollection;
		internal IList<QueryAction> DeferredQueriesList = new List<QueryAction>();
		protected IDictionary<string, object[]> relationProperties;
		protected virtual IDictionary<string, object[]> RelationProperties { get { return new Dictionary<string, object[]>(); } }

		#region Serialisation events

		[OnSerializing]
		private void SerializingInitializer(StreamingContext ctx)
		{
			backupAttributeCollection = new Microsoft.Xrm.Sdk.AttributeCollection();
			backupAttributeCollection.AddRange(Attributes);
			Attributes.Clear();

			backupFormattedCollection = new FormattedValueCollection();
			backupFormattedCollection.AddRange(FormattedValues);
			FormattedValues.Clear();

			backupRelatedEntityCollection = new RelatedEntityCollection();
			backupRelatedEntityCollection.AddRange(RelatedEntities);
			RelatedEntities.Clear();
		}

		[OnSerialized]
		private void SerializedInitializer(StreamingContext ctx)
		{
			Attributes.Clear();
			Attributes.AddRange(backupAttributeCollection);
			backupAttributeCollection = null;

			FormattedValues.Clear();
			FormattedValues.AddRange(backupFormattedCollection);
			backupFormattedCollection = null;

			RelatedEntities.Clear();
			RelatedEntities.AddRange(backupRelatedEntityCollection);
			backupRelatedEntityCollection = null;
		}

		[OnDeserialized]
		private void DeserializedInitializer(StreamingContext ctx)
		{
			LogicalName = (string)GetType().GetField("EntityLogicalName").GetRawConstantValue();
			Attributes.Where(attribute => attribute.Value == null).ToList().ForEach(attribute => Attributes.Remove(attribute.Key));
			if (NullValuedAttributes != null && NullValuedAttributes.Count > 0)
			{
				NullValuedAttributes.ForEach(attribute =>
				{
					var property = GetType().GetProperty(attribute);
					if (property == null)
					{
						throw new Exception("Couldn't find the property '" + attribute + "' in entity.");
					}
					property.SetValue(this, null);
				});
			}
		}

		#endregion

		public CrmServiceContext ServiceContext { get; set; }

		public event PropertyChangedEventHandler PropertyChanged;
		public event PropertyChangingEventHandler PropertyChanging;

		protected void OnPropertyChanged(string propertyName)
		{
			if (PropertyChanged != null)
			{
				PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		protected void OnPropertyChanging(string propertyName)
		{
			if (PropertyChanging != null)
			{
				PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
			}
		}

		public void LoadLookupLabels(IOrganizationService service, bool isDeferred = false)
		{
			var properties = from propQ in this.GetType().GetProperties()
			                 let propIdQ = this.GetType().GetProperty(propQ.Name.Replace("Labels", ""))
			                 where Attribute.IsDefined(propQ, typeof(LabelAttribute))
			                       && (Guid?) propIdQ.GetValue(this) != null
			                 select new
			                        {
				                        property = propQ,
				                        id = propIdQ.GetValue(this),
				                        attribute = propQ.GetCustomAttribute<LabelAttribute>()
			                        };

			foreach (var property in properties)
			{
				var fields = property.attribute.LabelFieldNames.Split(',');

				var query = new QueryExpression(property.attribute.LogicalName);
				query.Criteria.AddCondition(property.attribute.IdFieldName, ConditionOperator.Equal, property.id);
				query.ColumnSet = new ColumnSet(fields.Select(field => field.Substring(5)).ToArray());

				var queryAction =
					new QueryAction(query)
					{
						Action =
							result =>
							{
								var response = result as RetrieveMultipleResponse;
								if (response == null) return;

								var entityQ = response.EntityCollection.Entities.FirstOrDefault();
								if (entityQ == null) return;

								var englishLabel = (string) entityQ.Attributes.FirstOrDefault(
									attribute => ("1033_" + attribute.Key) == fields.FirstOrDefault(field => field.Contains("1033_"))).Value;
								var dictionary = new Dictionary<int, string>();
								dictionary[1033] = englishLabel;
								property.property.SetValue(this, dictionary);
							}
					};

				if (isDeferred)
				{
					this.DeferredQueriesList.Add(queryAction);
				}
				else
				{
					queryAction.Action.Invoke(service.Execute(new RetrieveMultipleRequest{Query = query}));
				}
			}
		}

		#region Relationship methods

		protected override IEnumerable<TEntity> GetRelatedEntities<TEntity>(string relationshipSchemaName, EntityRole? primaryEntityRole)
		{
		    var key = new Relationship(relationshipSchemaName) { PrimaryEntityRole = primaryEntityRole };

			var enumerable = base.GetRelatedEntities<TEntity>(relationshipSchemaName, primaryEntityRole);

			if (ServiceContext != null && enumerable == null)
			{
				if (!ServiceContext.IsAttached(this))
				{
					throw new Exception("The context that loaded this entity must be used to load relationships, " +
										"or set 'MergeOption' to anything other than 'NoTracking' in the context before fetching this entity using LINQ.");
				}

				ServiceContext.LoadProperty(this, key);
			}

			enumerable = base.GetRelatedEntities<TEntity>(relationshipSchemaName, primaryEntityRole);
			
			if (enumerable == null)
			{
				if (backupRelatedEntityCollection != null && backupRelatedEntityCollection.Contains(key))
					enumerable = backupRelatedEntityCollection[key].Entities.Cast<TEntity>();
			}

			return enumerable;
		}

		protected override TEntity GetRelatedEntity<TEntity>(string relationshipSchemaName, EntityRole? primaryEntityRole)
		{
			var key = new Relationship(relationshipSchemaName) { PrimaryEntityRole = primaryEntityRole };

			var result = base.GetRelatedEntity<TEntity>(relationshipSchemaName, primaryEntityRole);

			if (ServiceContext != null && result == null)
			{
				if (!ServiceContext.IsAttached(this))
				{
					throw new Exception("The context that loaded this entity must be used to load relationships, " +
										"or set 'MergeOption' to anything other than 'NoTracking' in the context before fetching this entity using LINQ.");
				}

				ServiceContext.LoadProperty(this, key);
			}

			result = base.GetRelatedEntity<TEntity>(relationshipSchemaName, primaryEntityRole);

			if (result == null)
			{
				if (backupRelatedEntityCollection != null && backupRelatedEntityCollection.Contains(key))
					result = (TEntity)backupRelatedEntityCollection[key].Entities.FirstOrDefault();
			}
			
			return result;
		}

		#endregion
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public abstract class GeneratedEntity<TRelationName> : GeneratedEntityBase where TRelationName : RelationNameBase
	{
		public GeneratedEntity()
		{}

		public GeneratedEntity(string logicalName) : base(logicalName)
		{}

		#region Relationship methods

		/// <summary>
		/// Fetch the records related to this entity on this relationship. 
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch.
		/// </summary>
		public RelationPagingInfo LoadRelation(TRelationName relationName, IOrganizationService service, params string[] attributes)
		{
			return LoadRelation(relationName, service, false, -1, -1, null, null, attributes);
		}

		/// <summary>
		/// Fetch the records related to this entity on this relationship. 
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch. If 'deferred', then loading will be added to the queue to be executed later upon request.
		/// </summary>
		public RelationPagingInfo LoadRelation(TRelationName relationName, IOrganizationService service, bool isDeferred, params string[] attributes)
		{
			return LoadRelation(relationName, service, isDeferred, -1, -1, null, null, attributes);
		}

		/// <summary>
		/// Fetch the records related to this entity on this relationship.
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch. If 'deferred', then loading will be added to the queue to be executed later upon request.
		/// </summary>
		public RelationPagingInfo LoadRelation(TRelationName relationName, IOrganizationService service, bool isDeferred, FilterExpression filter, params string[] attributes)
		{
			return LoadRelation(relationName, service, isDeferred, -1, -1, null, filter, attributes);
		}

		/// <summary>
		/// Fetch the records related to this entity on this relationship. The record limit accepts '-1', which means 'unlimited'.
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch. If 'deferred', then loading will be added to the queue to be executed later upon request.
		/// </summary>
		public RelationPagingInfo LoadRelation(TRelationName relationName, IOrganizationService service, bool isDeferred, int recordCountLimit, params string[] attributes)
		{
			return LoadRelation(relationName, service, isDeferred, recordCountLimit, -1, null, null, attributes);
		}

		/// <summary>
		/// Fetch the records related to this entity on this relationship. The record limit accepts '-1', which means 'unlimited'.
		/// The page param accepts '-1', which means 'all pages'. If a page is specified, the record limit won't exceed '5000' internally.
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch. If 'deferred', then loading will be added to the queue to be executed later upon request.
		/// </summary>
		public RelationPagingInfo LoadRelation(TRelationName relationName, IOrganizationService service, bool isDeferred, int recordCountLimit, int page, string cookie, params string[] attributes)
		{
			return LoadRelation(relationName, service, isDeferred, recordCountLimit, page, cookie, null, attributes);
		}

		/// <summary>
		/// Fetch the next page of records related to this entity on this relationship using the previous paging info object returned.
		/// </summary>
		public RelationPagingInfo LoadRelation(TRelationName relationName, IOrganizationService service, bool isDeferred, RelationPagingInfo pagingInfo, params string[] attributes)
		{
			return LoadRelation(relationName, service, isDeferred, pagingInfo.RecordCountLimit, pagingInfo.NextPage, pagingInfo.Cookie, pagingInfo.Filter, pagingInfo, attributes);
		}

		/// <summary>
		/// Fetch the records related to this entity on this relationship. The record limit accepts '-1', which means 'unlimited'.
		/// The page param accepts '-1', which means 'all pages'. If a page is specified, the record limit won't exceed '5000' internally.
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch. If 'deferred', then loading will be added to the queue to be executed later upon request.
		/// </summary>
		public RelationPagingInfo LoadRelation(TRelationName relationName, IOrganizationService service, bool isDeferred, int recordCountLimit, int page, string cookie, FilterExpression filter, params string[] attributes)
		{
			return LoadRelation(relationName, service, isDeferred, recordCountLimit, page, cookie, filter, null, attributes);
		}

		/// <summary>
		/// Fetch the records related to this entity on this relationship. The record limit accepts '-1', which means 'unlimited'.
		/// The page param accepts '-1', which means 'all pages'. If a page is specified, the record limit won't exceed '5000' internally.
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch. If 'deferred', then loading will be added to the queue to be executed later upon request.
		/// </summary>
		public RelationPagingInfo LoadRelation(TRelationName relationName, IOrganizationService service, bool isDeferred, int recordCountLimit, int page, string cookie, FilterExpression filter, RelationPagingInfo pagingInfo, params string[] attributes)
		{
			if (RelatedEntities.IsReadOnly) {
				throw new Exception("Relationship collection is ready only. The context that loaded this entity from CRM must be passed as a parameter, " +
									"or set 'MergeOption' to 'NoTracking' in the context before fetching this entity using LINQ.");
			}
			if (!RelationProperties.ContainsKey(relationName.Name)) {
				throw new Exception("Relation does not exist in entity, or is not generated.");
			}
			var relationPagingInfo = pagingInfo ?? new RelationPagingInfo
				{
					RecordCountLimit = recordCountLimit,
					Filter = filter,
					Cookie = cookie,
					NextPage = page
				};
			var relationParams = RelationProperties[relationName.Name];
			var queryActionObject = new QueryAction(GeneratorHelpers.GetLoadRelationQuery(this, service, (string) relationParams[1], (string) relationParams[2], (string) relationParams[3], (string) relationParams[4], (string) relationParams[5], (string) relationParams[6],
					recordCountLimit, page, cookie, filter, attributes));
			var queryAction = queryActionObject.Action =
							  resultQ => {
								  var response = resultQ as RetrieveMultipleResponse;
								  var entityType = ((Type) relationParams[8]).GetElementType() ?? (Type) relationParams[8];
					              var resultArray = response == null ? ((List<Entity>) resultQ).Select(entityQ => entityQ.GetType().GetMethod("ToEntity").MakeGenericMethod(entityType).Invoke(entityQ, null)).ToArray()
	    				              : response.EntityCollection.Entities.Select(entityQ => entityQ.GetType().GetMethod("ToEntity").MakeGenericMethod(entityType).Invoke(entityQ, null)).ToArray();
					              var relatedRecords = Array.CreateInstance(entityType, resultArray.Length);
					              Array.Copy(resultArray, relatedRecords, resultArray.Length);
								  DeferredQueriesList.Remove(queryActionObject);
								  var newValue = relatedRecords.Length <= 0 ? null : (((Type) relationParams[8]).GetElementType() == null ? relatedRecords.GetValue(0) : relatedRecords);
								  GetType().GetProperty((string) relationParams[0]).SetValue(this, newValue);
							  };
			if (isDeferred) DeferredQueriesList.Add(queryActionObject);
			else queryAction.Invoke(GeneratorHelpers.LoadRelation(service, queryActionObject.Query, recordCountLimit, page, cookie, relationPagingInfo));
			return relationPagingInfo;
		}

		#endregion
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public class RelationPagingInfo
	{
		public string Cookie;
		public int NextPage = 1;
		public int RecordCountLimit = -1;
		public FilterExpression Filter;
		public bool IsMoreRecords = true;
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public abstract class RelationNameBase
	{
		public string Name;

		public RelationNameBase(string name)
		{
			Name = name;
		}
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	internal class QueryAction
	{
		public QueryExpression Query { get; set; }
		public Action<object> Action { get; set; }

		public QueryAction(QueryExpression query, Action<object> action = null)
		{
			Query = query;
			Action = action;
		}
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[AttributeUsage(AttributeTargets.Class)]
	public class CrmEntityMappingAttribute : Attribute
	{
		public string LogicalName { get; private set; }
		public string SchemaName { get; private set; }
		public string DisplayName { get; private set; }

		public CrmEntityMappingAttribute(string logicalName, string schemaName, string displayName = null)
		{
			if (string.IsNullOrWhiteSpace(logicalName))
			{
				throw new ArgumentNullException("logicalName");
			}

			if (string.IsNullOrWhiteSpace(schemaName))
			{
				throw new ArgumentNullException("schemaName");
			}

			LogicalName = logicalName;
			SchemaName = schemaName;
			DisplayName = displayName;
		}
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[AttributeUsage(AttributeTargets.Field)]
	public class ReadOnlyFieldAttribute : Attribute
	{}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[AttributeUsage(AttributeTargets.Field)]
	public class CrmFieldMappingAttribute : Attribute
	{
		public string LogicalName { get; private set; }
		public string RelatedEntity { get; private set; }

		public CrmFieldMappingAttribute(string logicalName, string relatedEntity = null)
		{
			if (string.IsNullOrWhiteSpace(logicalName))
			{
				throw new ArgumentNullException("logicalName");
			}

			LogicalName = logicalName;
			RelatedEntity = relatedEntity;
		}
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[AttributeUsage(AttributeTargets.Field)]
	public class CrmRelationMappingAttribute : Attribute
	{
		public string SchemaName { get; private set; }
		public Type RelatedEntityType { get; private set; }
		public EntityRole? Role { get; private set; }

		public CrmRelationMappingAttribute(string schemaName, Type relatedEntityType)
		{
			if (string.IsNullOrWhiteSpace(schemaName))
			{
				throw new ArgumentNullException("schemaName");
			}

			if (relatedEntityType == null)
			{
				throw new ArgumentNullException("relatedEntityType");
			}

			SchemaName = schemaName;
			RelatedEntityType = relatedEntityType;
		}

		public CrmRelationMappingAttribute(string schemaName, Type relatedEntityType, EntityRole role)
		{
			if (string.IsNullOrWhiteSpace(schemaName))
			{
				throw new ArgumentNullException("schemaName");
			}

			if (relatedEntityType == null)
			{
				throw new ArgumentNullException("relatedEntityType");
			}

			SchemaName = schemaName;
			RelatedEntityType = relatedEntityType;
			Role = role;
		}
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[AttributeUsage(AttributeTargets.Field | AttributeTargets.Property)]
	public class InRangeAttribute : Attribute
	{
		public string Min { get; set; }
		public string Max { get; set; }
		public Type Type { get; set; }

		public InRangeAttribute(string min, string max, Type type)
		{
			Min = min;
			Max = max;
			Type = type;
		}
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[AttributeUsage(AttributeTargets.Field | AttributeTargets.Property)]
	public class MaxLengthAttribute : Attribute
	{
		public int Max { get; set; }

		public MaxLengthAttribute(int max)
		{
			Max = max;
		}
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[AttributeUsage(AttributeTargets.Field | AttributeTargets.Property)]
	public class RequiredAttribute : Attribute
	{
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[AttributeUsage(AttributeTargets.Property)]
	public class LabelAttribute : Attribute
	{
		public string LabelFieldNames { get; set; }
		public string LogicalName { get; set; }
		public string IdFieldName { get; set; }
		public string FieldLogicalName { get; set; }

		public LabelAttribute(string labelFieldNames, string logicalName, string idFieldName, string fieldLogicalName)
		{
			LabelFieldNames = labelFieldNames;
			LogicalName = logicalName;
			IdFieldName = idFieldName;
			FieldLogicalName = fieldLogicalName;
		}
	}

	public enum ValidationType
	{
		Required,
		InRange,
		MaxLength
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public class OptionsetLanguageLabel
	{
		public int LanguageCode { get; set; }
		public string OptionsetLabel {get; set;}
	}

	public enum ClearMode
	{
		[EnumMember] Disabled,
		[EnumMember] Empty,
		[EnumMember] Convention,
		[EnumMember] Flag
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract]
	public partial class EntityContract
	{
		[DataMember] public virtual ClearMode? ValueClearMode { get { return ClearMode.Disabled; } set{} }

		public TCrmEntity ConvertTo<TCrmEntity>(ClearMode? clearMode = null) where TCrmEntity : Entity
		{
			// create CRM entity object
			var crmRecord = Activator.CreateInstance<TCrmEntity>();

			var entityType = GetType();
			var entityLogicalName = entityType.GetCustomAttribute<CrmEntityMappingAttribute>().LogicalName;

			// if logical names don't match
			if (entityLogicalName != crmRecord.LogicalName)
			{
				throw new Exception(string.Format("Entity '{0}' doesn't map to CRM entity '{1}'.",
					entityType.Name, typeof(TCrmEntity).Name));
			}
            
            clearMode = clearMode ?? (ClearMode?) entityType.GetProperty("ValueClearMode").GetValue(this) ?? ClearMode.Disabled;

			// go over all fields in the contract entity that has the mapping attribute
			foreach (var field in entityType.GetFields()
				.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof(CrmFieldMappingAttribute))
								 && !Attribute.IsDefined(fieldQ, typeof(CrmRelationMappingAttribute))))
			{
				// get the value of the mapping attribute
				var mapping = field.GetCustomAttribute<CrmFieldMappingAttribute>();
				// get the value of the field
				var value = field.GetValue(this);
				// is the field value read only
				var isReadOnly = field.GetCustomAttribute<ReadOnlyFieldAttribute>() != null;
                // get the clear flag mode value if it exists
                var isClearFlag = value == null && clearMode == ClearMode.Flag
                    && (bool?)entityType.GetFields().Where(fieldQ => fieldQ.Name == "Clear_" + field.Name)
                    .Select(fieldQ => fieldQ.GetValue(this)).FirstOrDefault() == true;
                // check 'empty' mode
                var isClearEmpty = value == null && clearMode == ClearMode.Empty;

                var isSetValue = (value != null && !isReadOnly) || isClearFlag || isClearEmpty;

                // skip if no value and clear mode does not match and pass check
                if (isReadOnly || !isSetValue)
				{
					continue;
				}

				SetValueInCrmRecord(value, crmRecord, field.Name, mapping, clearMode);
			}

			// go over flattened relations in the contract entity that has the mapping attribute
			foreach (var field in GetType().GetFields()
				.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof(CrmRelationMappingAttribute))
					&& Attribute.IsDefined(fieldQ, typeof(CrmFieldMappingAttribute))))
			{
				// get the value of the field
				var value = field.GetValue(this);
				// is the field value read only
				var isReadOnly = field.GetCustomAttribute<ReadOnlyFieldAttribute>();

				// skip if no value
				if (isReadOnly != null || (value == null && clearMode != ClearMode.Empty) || value is Array)
				{
					continue;
				}

				SetRelationInRecord(value, field);
			}
			// go over all relations in the contract entity that has the mapping attribute
			foreach (var relation in GetType().GetFields()
				.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof(CrmRelationMappingAttribute))
					&& !Attribute.IsDefined(fieldQ, typeof(CrmFieldMappingAttribute))))
			{
				// get the value of the mapping attribute
				var mapping = relation.GetCustomAttribute<CrmRelationMappingAttribute>();
				// get the value of the field
				var value = relation.GetValue(this);
				// is the relation read only
				var isReadOnly = relation.GetCustomAttribute<ReadOnlyFieldAttribute>();

				// skip if no value
				if (isReadOnly != null || value == null || (value is Array && ((Array)value).Length <= 0))
				{
					continue;
				}

				SetRelationInCrmRecord(value, crmRecord, mapping, clearMode);
			}

			return crmRecord;
		}

		private void SetRelationInRecord(object value, FieldInfo fieldInfo)
		{
			var fields = GetType().GetFields()
				.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof (CrmRelationMappingAttribute))
				                 && !Attribute.IsDefined(fieldQ, typeof (CrmFieldMappingAttribute)));
			// get the field representing the relationship
			var relation = fields.First(fieldQ => fieldQ.Name == fieldInfo.Name.Split('_')[0]);
			// get the related entity type
			var fieldType = relation.FieldType;
			// get the target field in the related entity to set the value
			var field = fieldType.GetFields().First(fieldQ => fieldQ.Name == fieldInfo.Name.Substring(relation.Name.Length + 1));

			// get the relation value
			var record = relation.GetValue(this);

			if (record == null)
			{
				// create a new instance of the related entity if it's null
				record = Activator.CreateInstance(fieldType);
				// save the relation object in this entity
				relation.SetValue(this, record);
			}

			// set the field value in the related record
			field.SetValue(record, value);
		}

		private static void SetValueInCrmRecord<TCrmEntity>(object value, TCrmEntity crmRecord,
			string fieldName, CrmFieldMappingAttribute mapping, ClearMode? clearMode = null)
			where TCrmEntity : Entity
		{
			var crmProperty = GetCrmProperty<TCrmEntity>(mapping);

			// if property not found, then the entities don't map correctly
			if (crmProperty == null)
			{
				throw new Exception(string.Format("Entity doesn't map to CRM entity '{0}'.",
					typeof(TCrmEntity).Name));
			}
            
			// if no value, and clear mode is global, then clear
			if (value == null && clearMode == ClearMode.Empty)
			{
				crmRecord[mapping.LogicalName] = null;
			}
            
			// convert types
			if (value is Enum)
			{
			    // if clear mode is convention, and value fits convention, then clear
				crmRecord[mapping.LogicalName] = (((int) value) == -1 && clearMode == ClearMode.Convention) ? null : new OptionSetValue((int) value);
			}
			else if (value is decimal? && crmProperty.PropertyType == typeof(Money))
			{
				crmRecord[mapping.LogicalName] = (value.Equals(decimal.MinValue) && clearMode == ClearMode.Convention) ? null : new Money(((decimal?) value).Value);
			}
			else if (value is Guid? && fieldName != "Id"
					 && crmProperty.PropertyType != typeof(EntityReference))
			{
				crmProperty.SetValue(crmRecord, (value.Equals(Guid.Empty) && clearMode == ClearMode.Convention) ? null : (Guid?) value);
			}
			else
			{
			    // if clear mode is convention, and value fits convention, then clear
			    if (clearMode == ClearMode.Convention
                    && ((value is DateTime? && value.Equals(new DateTime(1970, 1, 1)))
                        || (value is int? && value.Equals(int.MinValue))
                        || (value is long? && value.Equals(long.MinValue))
                        || (value is decimal? && value.Equals(decimal.MinValue))
                        || (value is double? && value.Equals(double.MinValue))
                        || (value is string && value.Equals(""))))
			    {
				    crmProperty.SetValue(crmRecord, null);
			    }
                else
				{
                    crmProperty.SetValue(crmRecord, value);
                }
			}
		}

		/// <summary>
		///     Gets the property from the CRM entity that corresponds to this field -- same mapping
		/// </summary>
		/// <typeparam name="TCrmEntity">The type of the entity.</typeparam>
		/// <param name="mapping">The mapping.</param>
		/// <returns></returns>
		private static PropertyInfo GetCrmProperty<TCrmEntity>(CrmFieldMappingAttribute mapping)
			where TCrmEntity : Entity
		{
			var crmProperty = typeof(TCrmEntity).GetProperties()
				.FirstOrDefault(propertyQ =>
								{
									var fieldAttribute = propertyQ
										.GetCustomAttributes<AttributeLogicalNameAttribute>(true)
										.FirstOrDefault();

									return fieldAttribute != null
										   && fieldAttribute.LogicalName == mapping.LogicalName;
								});

			return crmProperty;
		}

		private static void SetRelationInCrmRecord<TCrmEntity>(object value, TCrmEntity crmRecord,
			CrmRelationMappingAttribute mapping, ClearMode? clearMode = null)
			where TCrmEntity : Entity
		{
			var crmRelation = GetCrmRelation<TCrmEntity>(mapping);

			// if relation not found, then the entities don't map correctly
			if (crmRelation == null)
			{
				throw new Exception(string.Format("Entity doesn't map to CRM entity '{0}'.",
					typeof(TCrmEntity).Name));
			}

			object convertedValue = null;

			// x-N relation
			if (value is Array)
			{
				var relatedRecords = (Array)value;
				// create an array for the related entities of the appropriate type
				var crmRelatedRecords = Array.CreateInstance(mapping.RelatedEntityType, relatedRecords.Length);

				// create the method reference that will be used to convert the related entities to the CRM entities
				var method = GetConversionMethod(relatedRecords.GetValue(0), mapping.RelatedEntityType);

				// convert all entities to CRM entities
				var objectCrmRelatedRecords = (from object relatedRecord in relatedRecords
											   select method.Invoke(relatedRecord, new object[] { clearMode })).ToArray();

				// copy the object entities to the array of the specific type
				Array.Copy(objectCrmRelatedRecords, crmRelatedRecords, crmRelatedRecords.Length);
				convertedValue = crmRelatedRecords;
			}
			else if (value is EntityContract)
			{
				// N-1 relation
				var method = GetConversionMethod(value, mapping.RelatedEntityType);
				convertedValue = method.Invoke(value, new object[] { clearMode });
			}

			// set the related entities value in the CRM entity
			crmRelation.SetValue(crmRecord, convertedValue);
		}

		private static MethodInfo GetConversionMethod(object entity, Type relatedType)
		{
			return entity.GetType().GetMethod("ConvertTo")
				.MakeGenericMethod(relatedType);
		}

		/// <summary>
		///     Gets the relation from the CRM entity that corresponds to this relation -- same mapping
		/// </summary>
		/// <typeparam name="TCrmEntity">The type of the entity.</typeparam>
		/// <param name="mapping">The mapping.</param>
		/// <returns></returns>
		private static PropertyInfo GetCrmRelation<TCrmEntity>(CrmRelationMappingAttribute mapping)
			where TCrmEntity : Entity
		{
			var crmRelation = typeof(TCrmEntity).GetProperties()
				.FirstOrDefault(propertyQ =>
								{
									var relationAttribute = propertyQ
										.GetCustomAttributes<RelationshipSchemaNameAttribute>(true)
										.FirstOrDefault();

									return relationAttribute != null
										   && relationAttribute.SchemaName == mapping.SchemaName
										   && relationAttribute.PrimaryEntityRole == mapping.Role;
								});

			return crmRelation;
		}
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public static partial class GeneratorHelpers
	{
		#region Enums

		/// <summary>
		/// Get the value that corresponds to the label from the option-set,
		/// using the type of the class enclosing both, label type, and the language code given.
		/// </summary>
		/// <param name="labelType">The type of the class containing the labels; e.g.: 'typeof(Account.Enums.Labels.IndustryCode)'</param>
		/// <param name="label">The label to search for, corresponding to the value</param>
		/// <param name="languageCode">The language code from CRM</param>
		/// <returns>The value corresponding to the label</returns>
		public static int GetValue(Type labelType, string label, int languageCode = 1033)
		{
			var labelsType = labelType.DeclaringType;

			if (labelsType == null)
			{
				return -1;
			}

			var enumsType = labelsType.DeclaringType;

			if (enumsType == null)
			{
				return -1;
			}

			// get the fields with the same label from the label class
			var fields = labelType.GetFields()
				.Where(fieldQ => fieldQ.Name.Contains(languageCode.ToString())
					&& (string)fieldQ.GetValue(labelType) == label);

			if (!fields.Any())
			{
				return -1;
			}

			var field = fields.First();

			var entityType = enumsType.DeclaringType;

			if (entityType == null)
			{
				return -1;
			}

			var enumType = entityType.GetNestedType(labelType.Name + "Enum");

			if (enumType == null)
			{
				return -1;
			}

			// get the enum constant corresponding to the field name
			var enumConstant = Enum.Parse(enumType, field.Name.Replace("_" + languageCode, ""));

			return (int)enumConstant;
		}

		/// <summary>
		/// Gets the value corresponding to the option-set's label using its logical name,
		/// the value within, and the language code.
		/// </summary>
		/// <param name="logicalName">The logical name of the option-set in CRM</param>
		/// <param name="label">The label from the option-set</param>
		/// <param name="enumsType">The 'Enums' type; e.g.: 'typeof(Account.Enums)'</param>
		/// <param name="languageCode">The language code from CRM</param>
		/// <returns>The value corresponding to the label</returns>
		public static int GetValue(string logicalName, string label, Type enumsType, int languageCode = 1033)
		{
			var labelType = GetLabelType(enumsType, logicalName);

			return GetValue(labelType, label, languageCode);
		}

		private static Type GetEnumType(Type enumsType, string logicalName)
		{
			var field = GetLogicalNameField(enumsType, logicalName);

			var entityType = enumsType.DeclaringType;

			if (entityType == null)
			{
				throw new Exception("Can't find the entity type from the enum type.");
			}

			return field == null ? null : entityType.GetNestedType(field.Name + "Enum");
		}

		#endregion

		#region Labels

		/// <summary>
		/// Gets the label corresponding to the option-set's value using its logical name,
		/// the value within, and the language code.
		/// </summary>
		/// <param name="logicalName">The logical name of the option-set in CRM</param>
		/// <param name="constant">The value from the option-set</param>
		/// <param name="enumsType">The 'Enums' type; e.g.: 'typeof(Account.Enums)'</param>
		/// <param name="languageCode">The language code from CRM</param>
		/// <returns></returns>
		public static string GetLabel(string logicalName, int constant, Type enumsType, int languageCode = 1033)
		{
			var enumType = GetEnumType(enumsType, logicalName);

			if (enumType == null)
			{
				return "NO_LABEL";
			}

			var enumName = enumType.Name;
			var constantName = enumType.GetEnumName(constant);
			var labelsType = enumsType.GetNestedType("Labels");

			if (labelsType == null)
			{
				return "NO_LABEL";
			}

			var labelType = labelsType.GetNestedType(enumName.Substring(0, enumType.Name.LastIndexOf("Enum")));

			if (labelType == null)
			{
				return "NO_LABEL";
			}

			var field = labelType.GetField(constantName + "_" + languageCode);

			return field == null ? "NO_LABEL" : field.GetValue(labelType).ToString();
		}

		private static Type GetLabelType(Type enumsType, string logicalName)
		{
			var field = GetLogicalNameField(enumsType, logicalName);
			return enumsType.GetNestedType("Labels").GetNestedType(field.Name);
		}

		#endregion

		private static FieldInfo GetLogicalNameField(Type enumsType, string logicalName)
		{
			var namesType = enumsType.GetNestedType("Names");
			return namesType.GetFields().FirstOrDefault(fieldQ => (string)fieldQ.GetValue(namesType) == logicalName);
		}

		internal static QueryExpression GetLoadRelationQuery(Entity entity, IOrganizationService service,
			string fromEntityName, string toEntityName, string fromFieldName, string toFieldName,
			string idFieldName, string intersectIdFieldName, int limit = -1, int page = -1, string cookie = null,
			FilterExpression filter = null, params string[] attributes)
		{
			limit = limit <= 0 ? int.MaxValue : limit;

			// create the query taking into account paging
			var query = new QueryExpression(fromEntityName);
			query.LinkEntities.Add(new LinkEntity(fromEntityName, toEntityName, fromFieldName, toFieldName, JoinOperator.Inner));
			query.LinkEntities[0].EntityAlias = "linkedEntityAlias";
			query.Criteria.AddCondition("linkedEntityAlias", intersectIdFieldName, ConditionOperator.Equal, entity[idFieldName]);

			if (filter != null)
			{
				query.Criteria.AddFilter(filter);
			}

			if (attributes.Length == 1 && attributes[0] == "*")
			{
				query.ColumnSet = new ColumnSet(true);
			}
			else if (attributes.Length > 0)
			{
				query.ColumnSet = new ColumnSet(attributes);
			}
			else
			{
				query.ColumnSet = new ColumnSet(false);
			}

			query.PageInfo = new PagingInfo
			{
				PageNumber = page <= 0 ? 1 : page,
				Count = limit,
				PagingCookie = cookie
			};

			return query;
		}

		internal static List<Entity> LoadRelation(Entity entity, IOrganizationService service,
			string fromEntityName, string toEntityName, string fromFieldName, string toFieldName,
			string idFieldName, string intersectIdFieldName, int limit = -1, int page = -1,
			FilterExpression filter = null, string cookie = null, RelationPagingInfo relationPagingInfo = null, params string[] attributes)
		{
			return LoadRelation(service, GetLoadRelationQuery(entity, service, fromEntityName, toEntityName,
				fromFieldName, toFieldName, idFieldName, intersectIdFieldName, limit, page, cookie,
				filter, attributes), limit, page, cookie, relationPagingInfo);
		}

		public static List<Entity> LoadRelation(IOrganizationService service, QueryExpression query,
			int limit = -1, int page = -1, string cookie = null, RelationPagingInfo relationPagingInfo = null)
		{
			limit = limit <= 0 ? int.MaxValue : limit;
			query.PageInfo = query.PageInfo ??
				new PagingInfo
				{
					PageNumber = page <= 0 ? 1 : page,
					Count = limit
				};
			query.PageInfo.PagingCookie = cookie ?? relationPagingInfo.Cookie ?? query.PageInfo.PagingCookie;

			EntityCollection records;
			var entities = new List<Entity>();

			// get all records
			do
			{
				// fetch the records
				records = service.RetrieveMultiple(query);

				// next time get the next bundle of records
				query.PageInfo.PagingCookie = records.PagingCookie;
				query.PageInfo.PageNumber++;

				// add to existing list
				entities.AddRange(records.Entities);
			} while (records.MoreRecords && entities.Count < limit && page <= 0);

			if (relationPagingInfo != null)
			{
				relationPagingInfo.Cookie = query.PageInfo.PagingCookie;
				relationPagingInfo.NextPage = query.PageInfo.PageNumber;
				relationPagingInfo.IsMoreRecords = records.MoreRecords;
			}

			return entities.ToList();
		}

		/// <summary>
		/// Executes the queries in the query queue in each entity passed, and executes the action related to the query after.<br />
		/// Returns a list of errors per entity processed.
		/// </summary>
		/// <param name="service">CRM service to use to execute query.</param>
		/// <param name="entities">List of entities containing the queues.</param>
		public static IDictionary<GeneratedEntityBase, IList<string>> ProcessDeferredQueries(IOrganizationService service,
			params GeneratedEntityBase[] entities)
		{
            return ProcessDeferredQueries(service, 100, entities);
        }

		/// <summary>
		/// Executes the queries in the query queue in each entity passed, and executes the action related to the query after.<br />
		/// Returns a list of errors per entity processed.
		/// </summary>
		/// <param name="service">CRM service to use to execute query.</param>
		/// <param name="bulkSize">The number of requests from the queue to execute in each iteration.</param>
		/// <param name="entities">List of entities containing the queues.</param>
		internal static IDictionary<GeneratedEntityBase, IList<string>> ProcessDeferredQueries(IOrganizationService service,
			int bulkSize, params GeneratedEntityBase[] entities)
		{
			var errorList = new Dictionary<GeneratedEntityBase, IList<string>>();

			// exit if no entities to process
			if (!entities.Any()) return errorList;
            
            bulkSize = Math.Min(1000, bulkSize);

			// filter entities to only the ones with a queue
			entities = entities.Where(entity => entity.DeferredQueriesList.Any()).ToArray();

			// queue to assign errors to proper entity and to find the original query and invoke the action
			var queryActionQueue = new Queue<KeyValuePair<GeneratedEntityBase, QueryAction>>();

			// create a queue to support paging in bulk execution
			var requestsQueue = new Queue<OrganizationRequest>();

			// go over the entities and fill the queues
			foreach (var entity in entities)
			{
				foreach (var queryAction in entity.DeferredQueriesList)
				{
					queryActionQueue.Enqueue(new KeyValuePair<GeneratedEntityBase, QueryAction>(entity, queryAction));
					requestsQueue.Enqueue(new RetrieveMultipleRequest {Query = queryAction.Query});
				}
			}

			var bulkQuery = new ExecuteMultipleRequest
			{
				Settings = new ExecuteMultipleSettings
				{
					ContinueOnError = true,
					ReturnResponses = true
				},
				Requests = new OrganizationRequestCollection()
			};

			while (requestsQueue.Any())
			{
				bulkQuery.Requests.Clear();

				// page execution
				do
				{
					bulkQuery.Requests.Add(requestsQueue.Dequeue());
				} while (bulkQuery.Requests.Count % bulkSize != 0 && requestsQueue.Any());

				var result = (ExecuteMultipleResponse) service.Execute(bulkQuery);

				foreach (var response in result.Responses)
				{
					var queryAction = queryActionQueue.Dequeue();
					var entity = queryAction.Key;

					// parse fault
					if (response.Fault != null)
					{
						if (!errorList.ContainsKey(entity))
						{
							errorList.Add(entity, new List<string>());
						}

						errorList[entity].Add(string.Format("Error code: {0}.\nError message: {1}.",
							response.Fault.ErrorCode, response.Fault.Message)
													 + (!string.IsNullOrEmpty(response.Fault.TraceText)
															? "\nError trace: " + response.Fault.TraceText
															: ""));

						continue;
					}

					queryAction.Value.Action.Invoke(response.Response);
				}
			}

			return errorList;
		}
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
    public class EntityComparer : IEqualityComparer<Entity>
    {
        public bool Equals(Entity x, Entity y)
        {
            return x.Id == y.Id;
        }

        public int GetHashCode(Entity obj)
        {
            return obj.Id.GetHashCode();
        }
    }

	#endregion

	#region Actions

	#endregion

	#region Known Types

	#endregion

	#region Entities

	#region ActivityParty

	/// <summary>
	/// 'ActivityParty'.<br />
	/// Person or group associated with an activity. An activity can have multiple activity parties.
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract, EntityLogicalName("activityparty")]
	public partial class ActivityParty : GeneratedEntity<ActivityParty.RelationName>
	{
		
		public ActivityParty() : 
				base(EntityLogicalName)
		{
		}
		
		public const string DisplayName = "Activity Party";
		public const string SchemaName = "ActivityParty";
		public const string EntityLogicalName = "activityparty";
		public const int EntityTypeCode = 135;
		
		public class RelationName : RelationNameBase
		{
			public RelationName(string name) : base(name)
			{}
		}


		#region Metadata


		#endregion
	}

	#endregion

	#region Incident

	/// <summary>
	/// 'Incident'.<br />
	/// Service request case associated with a contract.
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract, EntityLogicalName("incident")]
	public partial class Incident : GeneratedEntity<Incident.RelationName>
	{
		
		public Incident() : 
				base(EntityLogicalName)
		{
		}
		
		public const string DisplayName = "Case";
		public const string SchemaName = "Incident";
		public const string EntityLogicalName = "incident";
		public const int EntityTypeCode = 112;
		
		public class RelationName : RelationNameBase
		{
			public RelationName(string name) : base(name)
			{}
		}


		#region Attributes

		[AttributeLogicalName("incidentid"), DataMember]
		public override System.Guid Id
		{
			get
			{
				return (IncidentId == null || IncidentId == Guid.Empty) ? base.Id : IncidentId.GetValueOrDefault();
			}
			
			set
			{
                if (value == Guid.Empty) {
                    Attributes.Remove("incidentid");
                    base.Id = value;
                } else {
				    IncidentId = value;
                }
			}
		}

        /// <summary>
        ///  
		/// 'AccountId'.<br />
        /// Unique identifier of the account with which the case is associated.
        /// </summary>
		[AttributeLogicalName("accountid")]
		public Guid? AccountId
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("accountid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("accountid"))
				    value = (EntityReference) backupAttributeCollection["accountid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("AccountId");
                if (value != null)
				    SetAttributeValue("accountid", new EntityReference("account", value.Value));
                else
					SetAttributeValue("accountid", value);
				OnPropertyChanged("AccountId");
			}
		}

        public string AccountIdName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("accountid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("accountid"))
				    value = (EntityReference) backupAttributeCollection["accountid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_name", "account", "accountid", "accountid")]
        public IDictionary<int, string> AccountIdLabels { get; set; }

        /// <summary>
        ///  
		/// 'ActivitiesComplete'.<br />
        /// This attribute is used for Sample Service Business Processes.
        /// </summary>
		[AttributeLogicalName("activitiescomplete")]
		public bool? ActivitiesComplete
		{
			get
			{
				var value = GetAttributeValue<bool?>("activitiescomplete");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("activitiescomplete"))
				    value = (bool?) backupAttributeCollection["activitiescomplete"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ActivitiesComplete");
					SetAttributeValue("activitiescomplete", value);
				OnPropertyChanged("ActivitiesComplete");
			}
		}

        public IDictionary<int, string> ActivitiesCompleteLabels
        {
		    get
		    {
                var value = GetAttributeValue<bool?>("activitiescomplete");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("activitiescomplete"))
				    value = (bool?) backupAttributeCollection["activitiescomplete"];
                if (value == null)
                    return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("activitiescomplete", (bool) value ? 1 : 0, 1033) },
                        };
            }
            set
            {}
        }

        /// <summary>
        /// [Range(0, 1000000000)] 
		/// 'ActualServiceUnits'.<br />
        /// Type the number of service units that were actually required to resolve the case.
        /// </summary>
		[AttributeLogicalName("actualserviceunits"), InRange("0", "1000000000", typeof(int))]
		public int? ActualServiceUnits
		{
			get
			{
				var value = GetAttributeValue<int?>("actualserviceunits");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("actualserviceunits"))
				    value = (int?) backupAttributeCollection["actualserviceunits"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ActualServiceUnits");
					SetAttributeValue("actualserviceunits", value);
				OnPropertyChanged("ActualServiceUnits");
			}
		}

		[AttributeLogicalName("adx_createdbyipaddress"), MaxLength(100)]
		public string Adx_CreatedByIPAddress
		{
			get
			{
				var value = GetAttributeValue<string>("adx_createdbyipaddress");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("adx_createdbyipaddress"))
				    value = (string) backupAttributeCollection["adx_createdbyipaddress"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Adx_CreatedByIPAddress");
					SetAttributeValue("adx_createdbyipaddress", value);
				OnPropertyChanged("Adx_CreatedByIPAddress");
			}
		}

		[AttributeLogicalName("adx_createdbyusername"), MaxLength(100)]
		public string Adx_CreatedByUsername
		{
			get
			{
				var value = GetAttributeValue<string>("adx_createdbyusername");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("adx_createdbyusername"))
				    value = (string) backupAttributeCollection["adx_createdbyusername"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Adx_CreatedByUsername");
					SetAttributeValue("adx_createdbyusername", value);
				OnPropertyChanged("Adx_CreatedByUsername");
			}
		}

		[AttributeLogicalName("adx_modifiedbyipaddress"), MaxLength(100)]
		public string Adx_ModifiedByIPAddress
		{
			get
			{
				var value = GetAttributeValue<string>("adx_modifiedbyipaddress");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("adx_modifiedbyipaddress"))
				    value = (string) backupAttributeCollection["adx_modifiedbyipaddress"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Adx_ModifiedByIPAddress");
					SetAttributeValue("adx_modifiedbyipaddress", value);
				OnPropertyChanged("Adx_ModifiedByIPAddress");
			}
		}

		[AttributeLogicalName("adx_modifiedbyusername"), MaxLength(100)]
		public string Adx_ModifiedByUsername
		{
			get
			{
				var value = GetAttributeValue<string>("adx_modifiedbyusername");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("adx_modifiedbyusername"))
				    value = (string) backupAttributeCollection["adx_modifiedbyusername"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Adx_ModifiedByUsername");
					SetAttributeValue("adx_modifiedbyusername", value);
				OnPropertyChanged("Adx_ModifiedByUsername");
			}
		}

        /// <summary>
        ///  
		/// 'adx_publishtoweb'.<br />
        /// If set to Yes, the case will be visible and searchable on portals connected to this organization.
        /// </summary>
		[AttributeLogicalName("adx_publishtoweb")]
		public bool? adx_publishtoweb
		{
			get
			{
				var value = GetAttributeValue<bool?>("adx_publishtoweb");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("adx_publishtoweb"))
				    value = (bool?) backupAttributeCollection["adx_publishtoweb"];
			    return value;
			}
			set
			{
				OnPropertyChanging("adx_publishtoweb");
					SetAttributeValue("adx_publishtoweb", value);
				OnPropertyChanged("adx_publishtoweb");
			}
		}

        public IDictionary<int, string> adx_publishtowebLabels
        {
		    get
		    {
                var value = GetAttributeValue<bool?>("adx_publishtoweb");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("adx_publishtoweb"))
				    value = (bool?) backupAttributeCollection["adx_publishtoweb"];
                if (value == null)
                    return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("adx_publishtoweb", (bool) value ? 1 : 0, 1033) },
                        };
            }
            set
            {}
        }

		[AttributeLogicalName("adx_resolution"), MaxLength(10000)]
		public string adx_resolution
		{
			get
			{
				var value = GetAttributeValue<string>("adx_resolution");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("adx_resolution"))
				    value = (string) backupAttributeCollection["adx_resolution"];
			    return value;
			}
			set
			{
				OnPropertyChanging("adx_resolution");
					SetAttributeValue("adx_resolution", value);
				OnPropertyChanged("adx_resolution");
			}
		}

		[AttributeLogicalName("adx_resolutiondate")]
		public DateTime? adx_resolutiondate
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("adx_resolutiondate");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("adx_resolutiondate"))
				    value = (DateTime?) backupAttributeCollection["adx_resolutiondate"];
			    return value;
			}
			set
			{
				OnPropertyChanging("adx_resolutiondate");
					SetAttributeValue("adx_resolutiondate", value);
				OnPropertyChanged("adx_resolutiondate");
			}
		}

		[AttributeLogicalName("adx_stepstoreproduce"), MaxLength(10000)]
		public string adx_stepstoreproduce
		{
			get
			{
				var value = GetAttributeValue<string>("adx_stepstoreproduce");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("adx_stepstoreproduce"))
				    value = (string) backupAttributeCollection["adx_stepstoreproduce"];
			    return value;
			}
			set
			{
				OnPropertyChanging("adx_stepstoreproduce");
					SetAttributeValue("adx_stepstoreproduce", value);
				OnPropertyChanged("adx_stepstoreproduce");
			}
		}

        /// <summary>
        /// [Range(0, 1000000000)] 
		/// 'BilledServiceUnits'.<br />
        /// Type the number of service units that were billed to the customer for the case.
        /// </summary>
		[AttributeLogicalName("billedserviceunits"), InRange("0", "1000000000", typeof(int))]
		public int? BilledServiceUnits
		{
			get
			{
				var value = GetAttributeValue<int?>("billedserviceunits");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("billedserviceunits"))
				    value = (int?) backupAttributeCollection["billedserviceunits"];
			    return value;
			}
			set
			{
				OnPropertyChanging("BilledServiceUnits");
					SetAttributeValue("billedserviceunits", value);
				OnPropertyChanged("BilledServiceUnits");
			}
		}

        /// <summary>
        ///  
		/// 'BlockedProfile'.<br />
        /// Details whether the profile is blocked or not.
        /// </summary>
		[AttributeLogicalName("blockedprofile")]
		public bool? BlockedProfile
		{
			get
			{
				var value = GetAttributeValue<bool?>("blockedprofile");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("blockedprofile"))
				    value = (bool?) backupAttributeCollection["blockedprofile"];
			    return value;
			}
			set
			{
				OnPropertyChanging("BlockedProfile");
					SetAttributeValue("blockedprofile", value);
				OnPropertyChanged("BlockedProfile");
			}
		}

        public IDictionary<int, string> BlockedProfileLabels
        {
		    get
		    {
                var value = GetAttributeValue<bool?>("blockedprofile");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("blockedprofile"))
				    value = (bool?) backupAttributeCollection["blockedprofile"];
                if (value == null)
                    return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("blockedprofile", (bool) value ? 1 : 0, 1033) },
                        };
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'CaseOriginCode'.<br />
        /// Select how contact about the case was originated, such as email, phone, or web, for use in reporting and analysis.
        /// </summary>
		[AttributeLogicalName("caseorigincode")]
		public CaseOriginCodeEnum? CaseOriginCode
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("caseorigincode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("caseorigincode"))
				    value = (OptionSetValue) backupAttributeCollection["caseorigincode"];
                return value == null ? (CaseOriginCodeEnum?) null : (CaseOriginCodeEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("CaseOriginCode");
                if (value != null)
				    SetAttributeValue("caseorigincode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("caseorigincode", value);
				OnPropertyChanged("CaseOriginCode");
			}
		}

        public IDictionary<int, string> CaseOriginCodeLabels
        {
		    get
		    {
                var value = GetAttributeValue<OptionSetValue>("caseorigincode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("caseorigincode"))
				    value = (OptionSetValue) backupAttributeCollection["caseorigincode"];
                if (value == null)
                    return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("caseorigincode", value.Value, 1033) },
                        };
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'CaseTypeCode'.<br />
        /// Select the type of case to identify the incident for use in case routing and analysis.
        /// </summary>
		[AttributeLogicalName("casetypecode")]
		public CaseTypeCodeEnum? CaseTypeCode
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("casetypecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("casetypecode"))
				    value = (OptionSetValue) backupAttributeCollection["casetypecode"];
                return value == null ? (CaseTypeCodeEnum?) null : (CaseTypeCodeEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("CaseTypeCode");
                if (value != null)
				    SetAttributeValue("casetypecode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("casetypecode", value);
				OnPropertyChanged("CaseTypeCode");
			}
		}

        public IDictionary<int, string> CaseTypeCodeLabels
        {
		    get
		    {
                var value = GetAttributeValue<OptionSetValue>("casetypecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("casetypecode"))
				    value = (OptionSetValue) backupAttributeCollection["casetypecode"];
                if (value == null)
                    return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("casetypecode", value.Value, 1033) },
                        };
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'CheckEmail'.<br />
        /// This attribute is used for Sample Service Business Processes.
        /// </summary>
		[AttributeLogicalName("checkemail")]
		public bool? CheckEmail
		{
			get
			{
				var value = GetAttributeValue<bool?>("checkemail");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("checkemail"))
				    value = (bool?) backupAttributeCollection["checkemail"];
			    return value;
			}
			set
			{
				OnPropertyChanging("CheckEmail");
					SetAttributeValue("checkemail", value);
				OnPropertyChanged("CheckEmail");
			}
		}

        public IDictionary<int, string> CheckEmailLabels
        {
		    get
		    {
                var value = GetAttributeValue<bool?>("checkemail");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("checkemail"))
				    value = (bool?) backupAttributeCollection["checkemail"];
                if (value == null)
                    return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("checkemail", (bool) value ? 1 : 0, 1033) },
                        };
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'ContactId'.<br />
        /// Unique identifier of the contact associated with the case.
        /// </summary>
		[AttributeLogicalName("contactid")]
		public Guid? ContactId
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("contactid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("contactid"))
				    value = (EntityReference) backupAttributeCollection["contactid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ContactId");
                if (value != null)
				    SetAttributeValue("contactid", new EntityReference("contact", value.Value));
                else
					SetAttributeValue("contactid", value);
				OnPropertyChanged("ContactId");
			}
		}

        public string ContactIdName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("contactid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("contactid"))
				    value = (EntityReference) backupAttributeCollection["contactid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_fullname", "contact", "contactid", "contactid")]
        public IDictionary<int, string> ContactIdLabels { get; set; }

        /// <summary>
        ///  
		/// 'ContractDetailId'.<br />
        /// Choose the contract line that the case should be logged under to make sure the customer is charged correctly.
        /// </summary>
		[AttributeLogicalName("contractdetailid")]
		public Guid? ContractDetailId
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("contractdetailid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("contractdetailid"))
				    value = (EntityReference) backupAttributeCollection["contractdetailid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ContractDetailId");
                if (value != null)
				    SetAttributeValue("contractdetailid", new EntityReference("contractdetail", value.Value));
                else
					SetAttributeValue("contractdetailid", value);
				OnPropertyChanged("ContractDetailId");
			}
		}

        public string ContractDetailIdName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("contractdetailid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("contractdetailid"))
				    value = (EntityReference) backupAttributeCollection["contractdetailid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_title", "contractdetail", "contractdetailid", "contractdetailid")]
        public IDictionary<int, string> ContractDetailIdLabels { get; set; }

        /// <summary>
        ///  
		/// 'ContractId'.<br />
        /// Choose the service contract that the case should be logged under to make sure the customer is eligible for support services.
        /// </summary>
		[AttributeLogicalName("contractid")]
		public Guid? ContractId
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("contractid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("contractid"))
				    value = (EntityReference) backupAttributeCollection["contractid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ContractId");
                if (value != null)
				    SetAttributeValue("contractid", new EntityReference("contract", value.Value));
                else
					SetAttributeValue("contractid", value);
				OnPropertyChanged("ContractId");
			}
		}

        public string ContractIdName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("contractid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("contractid"))
				    value = (EntityReference) backupAttributeCollection["contractid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_title", "contract", "contractid", "contractid")]
        public IDictionary<int, string> ContractIdLabels { get; set; }

        /// <summary>
        ///  
		/// 'ContractServiceLevelCode'.<br />
        /// Select the service level for the case to make sure the case is handled correctly.
        /// </summary>
		[AttributeLogicalName("contractservicelevelcode")]
		public ContractServiceLevelCodeEnum? ContractServiceLevelCode
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("contractservicelevelcode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("contractservicelevelcode"))
				    value = (OptionSetValue) backupAttributeCollection["contractservicelevelcode"];
                return value == null ? (ContractServiceLevelCodeEnum?) null : (ContractServiceLevelCodeEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("ContractServiceLevelCode");
                if (value != null)
				    SetAttributeValue("contractservicelevelcode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("contractservicelevelcode", value);
				OnPropertyChanged("ContractServiceLevelCode");
			}
		}

        public IDictionary<int, string> ContractServiceLevelCodeLabels
        {
		    get
		    {
                var value = GetAttributeValue<OptionSetValue>("contractservicelevelcode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("contractservicelevelcode"))
				    value = (OptionSetValue) backupAttributeCollection["contractservicelevelcode"];
                if (value == null)
                    return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("contractservicelevelcode", value.Value, 1033) },
                        };
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'CreatedBy'.<br />
        /// Shows who created the record.
        /// </summary>
		[AttributeLogicalName("createdby")]
		public Guid? CreatedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdby"))
				    value = (EntityReference) backupAttributeCollection["createdby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("CreatedBy");
                if (value != null)
				    SetAttributeValue("createdby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("createdby", value);
				OnPropertyChanged("CreatedBy");
			}
		}

        public string CreatedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdby"))
				    value = (EntityReference) backupAttributeCollection["createdby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_fullname", "systemuser", "systemuserid", "createdby")]
        public IDictionary<int, string> CreatedByLabels { get; set; }

        /// <summary>
        ///  
		/// 'CreatedByExternalParty'.<br />
        /// Shows the external party who created the record.
        /// </summary>
		[AttributeLogicalName("createdbyexternalparty")]
		public Guid? CreatedByExternalParty
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdbyexternalparty");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdbyexternalparty"))
				    value = (EntityReference) backupAttributeCollection["createdbyexternalparty"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("CreatedByExternalParty");
                if (value != null)
				    SetAttributeValue("createdbyexternalparty", new EntityReference("externalparty", value.Value));
                else
					SetAttributeValue("createdbyexternalparty", value);
				OnPropertyChanged("CreatedByExternalParty");
			}
		}

        public string CreatedByExternalPartyName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdbyexternalparty");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdbyexternalparty"))
				    value = (EntityReference) backupAttributeCollection["createdbyexternalparty"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_fullname", "externalparty", "externalpartyid", "createdbyexternalparty")]
        public IDictionary<int, string> CreatedByExternalPartyLabels { get; set; }

        /// <summary>
        ///  
		/// 'CreatedOn'.<br />
        /// Date and time when the record was created.
        /// </summary>
		[AttributeLogicalName("createdon")]
		public DateTime? CreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("createdon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdon"))
				    value = (DateTime?) backupAttributeCollection["createdon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("CreatedOn");
					SetAttributeValue("createdon", value);
				OnPropertyChanged("CreatedOn");
			}
		}

        /// <summary>
        ///  
		/// 'CreatedOnBehalfBy'.<br />
        /// Shows who created the record on behalf of another user.
        /// </summary>
		[AttributeLogicalName("createdonbehalfby")]
		public Guid? CreatedOnBehalfBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["createdonbehalfby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("CreatedOnBehalfBy");
                if (value != null)
				    SetAttributeValue("createdonbehalfby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("createdonbehalfby", value);
				OnPropertyChanged("CreatedOnBehalfBy");
			}
		}

        public string CreatedOnBehalfByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["createdonbehalfby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_fullname", "systemuser", "systemuserid", "createdonbehalfby")]
        public IDictionary<int, string> CreatedOnBehalfByLabels { get; set; }

        /// <summary>
        ///  
		/// 'CustomerContacted'.<br />
        /// Tells whether customer service representative has contacted the customer or not.
        /// </summary>
		[AttributeLogicalName("customercontacted")]
		public bool? CustomerContacted
		{
			get
			{
				var value = GetAttributeValue<bool?>("customercontacted");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("customercontacted"))
				    value = (bool?) backupAttributeCollection["customercontacted"];
			    return value;
			}
			set
			{
				OnPropertyChanging("CustomerContacted");
					SetAttributeValue("customercontacted", value);
				OnPropertyChanged("CustomerContacted");
			}
		}

        public IDictionary<int, string> CustomerContactedLabels
        {
		    get
		    {
                var value = GetAttributeValue<bool?>("customercontacted");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("customercontacted"))
				    value = (bool?) backupAttributeCollection["customercontacted"];
                if (value == null)
                    return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("customercontacted", (bool) value ? 1 : 0, 1033) },
                        };
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'CustomerId'.<br />
        /// Select the customer account or contact to provide a quick link to additional customer details, such as account information, activities, and opportunities.
        /// </summary>
		[AttributeLogicalName("customerid")]
		public EntityReference CustomerId
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("customerid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("customerid"))
				    value = (EntityReference) backupAttributeCollection["customerid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("CustomerId");
					SetAttributeValue("customerid", value);
				OnPropertyChanged("CustomerId");
			}
		}

        public string CustomerIdName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("customerid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("customerid"))
				    value = (EntityReference) backupAttributeCollection["customerid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        public IDictionary<int, string> CustomerIdLabels { get; set; }

        /// <summary>
        ///  
		/// 'CustomerSatisfactionCode'.<br />
        /// Select the customer's level of satisfaction with the handling and resolution of the case.
        /// </summary>
		[AttributeLogicalName("customersatisfactioncode")]
		public CustomerSatisfactionCodeEnum? CustomerSatisfactionCode
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("customersatisfactioncode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("customersatisfactioncode"))
				    value = (OptionSetValue) backupAttributeCollection["customersatisfactioncode"];
                return value == null ? (CustomerSatisfactionCodeEnum?) null : (CustomerSatisfactionCodeEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("CustomerSatisfactionCode");
                if (value != null)
				    SetAttributeValue("customersatisfactioncode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("customersatisfactioncode", value);
				OnPropertyChanged("CustomerSatisfactionCode");
			}
		}

        public IDictionary<int, string> CustomerSatisfactionCodeLabels
        {
		    get
		    {
                var value = GetAttributeValue<OptionSetValue>("customersatisfactioncode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("customersatisfactioncode"))
				    value = (OptionSetValue) backupAttributeCollection["customersatisfactioncode"];
                if (value == null)
                    return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("customersatisfactioncode", value.Value, 1033) },
                        };
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'DecrementEntitlementTerm'.<br />
        /// Shows whether terms of the associated entitlement should be decremented or not.
        /// </summary>
		[AttributeLogicalName("decremententitlementterm")]
		public bool? DecrementEntitlementTerm
		{
			get
			{
				var value = GetAttributeValue<bool?>("decremententitlementterm");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("decremententitlementterm"))
				    value = (bool?) backupAttributeCollection["decremententitlementterm"];
			    return value;
			}
			set
			{
				OnPropertyChanging("DecrementEntitlementTerm");
					SetAttributeValue("decremententitlementterm", value);
				OnPropertyChanged("DecrementEntitlementTerm");
			}
		}

        public IDictionary<int, string> DecrementEntitlementTermLabels
        {
		    get
		    {
                var value = GetAttributeValue<bool?>("decremententitlementterm");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("decremententitlementterm"))
				    value = (bool?) backupAttributeCollection["decremententitlementterm"];
                if (value == null)
                    return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("decremententitlementterm", (bool) value ? 1 : 0, 1033) },
                        };
            }
            set
            {}
        }

        /// <summary>
        /// [MaximumLength=2000] 
		/// 'Description'.<br />
        /// Type additional information to describe the case to assist the service team in reaching a resolution.
        /// </summary>
		[AttributeLogicalName("description"), MaxLength(2000)]
		public string Description
		{
			get
			{
				var value = GetAttributeValue<string>("description");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("description"))
				    value = (string) backupAttributeCollection["description"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Description");
					SetAttributeValue("description", value);
				OnPropertyChanged("Description");
			}
		}

        /// <summary>
        /// [MaximumLength=100] 
		/// 'EmailAddress'.<br />
        /// The primary email address for the entity.
        /// </summary>
		[AttributeLogicalName("emailaddress"), MaxLength(100)]
		public string EmailAddress
		{
			get
			{
				var value = GetAttributeValue<string>("emailaddress");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("emailaddress"))
				    value = (string) backupAttributeCollection["emailaddress"];
			    return value;
			}
			set
			{
				OnPropertyChanging("EmailAddress");
					SetAttributeValue("emailaddress", value);
				OnPropertyChanged("EmailAddress");
			}
		}

        /// <summary>
        ///  
		/// 'EntitlementId'.<br />
        /// Choose the entitlement that is applicable for the case.
        /// </summary>
		[AttributeLogicalName("entitlementid")]
		public Guid? EntitlementId
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("entitlementid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("entitlementid"))
				    value = (EntityReference) backupAttributeCollection["entitlementid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("EntitlementId");
                if (value != null)
				    SetAttributeValue("entitlementid", new EntityReference("entitlement", value.Value));
                else
					SetAttributeValue("entitlementid", value);
				OnPropertyChanged("EntitlementId");
			}
		}

        public string EntitlementIdName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("entitlementid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("entitlementid"))
				    value = (EntityReference) backupAttributeCollection["entitlementid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_name", "entitlement", "entitlementid", "entitlementid")]
        public IDictionary<int, string> EntitlementIdLabels { get; set; }

		[AttributeLogicalName("entityimageid")]
		public Guid? EntityImageId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("entityimageid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("entityimageid"))
				    value = (Guid?) backupAttributeCollection["entityimageid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("EntityImageId");
					SetAttributeValue("entityimageid", value);
				OnPropertyChanged("EntityImageId");
			}
		}

        /// <summary>
        ///  
		/// 'EscalatedOn'.<br />
        /// Indicates the date and time when the case was escalated.
        /// </summary>
		[AttributeLogicalName("escalatedon")]
		public DateTime? EscalatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("escalatedon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("escalatedon"))
				    value = (DateTime?) backupAttributeCollection["escalatedon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("EscalatedOn");
					SetAttributeValue("escalatedon", value);
				OnPropertyChanged("EscalatedOn");
			}
		}

        /// <summary>
        /// [Range(0.0000000001, 100000000000)] 
		/// 'ExchangeRate'.<br />
        /// Shows the conversion rate of the record's currency. The exchange rate is used to convert all money fields in the record from the local currency to the system's default currency.
        /// </summary>
		[AttributeLogicalName("exchangerate"), InRange("0.0000000001", "100000000000", typeof(decimal))]
		public decimal? ExchangeRate
		{
			get
			{
				var value = GetAttributeValue<decimal?>("exchangerate");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("exchangerate"))
				    value = (decimal?) backupAttributeCollection["exchangerate"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ExchangeRate");
					SetAttributeValue("exchangerate", value);
				OnPropertyChanged("ExchangeRate");
			}
		}

        /// <summary>
        ///  
		/// 'ExistingCase'.<br />
        /// Select an existing case for the customer that has been populated. For internal use only.
        /// </summary>
		[AttributeLogicalName("existingcase")]
		public Guid? ExistingCase
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("existingcase");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("existingcase"))
				    value = (EntityReference) backupAttributeCollection["existingcase"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ExistingCase");
                if (value != null)
				    SetAttributeValue("existingcase", new EntityReference("incident", value.Value));
                else
					SetAttributeValue("existingcase", value);
				OnPropertyChanged("ExistingCase");
			}
		}

        public string ExistingCaseName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("existingcase");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("existingcase"))
				    value = (EntityReference) backupAttributeCollection["existingcase"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_title", "incident", "incidentid", "existingcase")]
        public IDictionary<int, string> ExistingCaseLabels { get; set; }

        /// <summary>
        ///  
		/// 'FirstResponseByKPIId'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("firstresponsebykpiid")]
		public Guid? FirstResponseByKPIId
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("firstresponsebykpiid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("firstresponsebykpiid"))
				    value = (EntityReference) backupAttributeCollection["firstresponsebykpiid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("FirstResponseByKPIId");
                if (value != null)
				    SetAttributeValue("firstresponsebykpiid", new EntityReference("slakpiinstance", value.Value));
                else
					SetAttributeValue("firstresponsebykpiid", value);
				OnPropertyChanged("FirstResponseByKPIId");
			}
		}

        public string FirstResponseByKPIIdName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("firstresponsebykpiid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("firstresponsebykpiid"))
				    value = (EntityReference) backupAttributeCollection["firstresponsebykpiid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_name", "slakpiinstance", "slakpiinstanceid", "firstresponsebykpiid")]
        public IDictionary<int, string> FirstResponseByKPIIdLabels { get; set; }

        /// <summary>
        ///  
		/// 'FirstResponseSent'.<br />
        /// Indicates if the first response has been sent.
        /// </summary>
		[AttributeLogicalName("firstresponsesent")]
		public bool? FirstResponseSent
		{
			get
			{
				var value = GetAttributeValue<bool?>("firstresponsesent");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("firstresponsesent"))
				    value = (bool?) backupAttributeCollection["firstresponsesent"];
			    return value;
			}
			set
			{
				OnPropertyChanging("FirstResponseSent");
					SetAttributeValue("firstresponsesent", value);
				OnPropertyChanged("FirstResponseSent");
			}
		}

        public IDictionary<int, string> FirstResponseSentLabels
        {
		    get
		    {
                var value = GetAttributeValue<bool?>("firstresponsesent");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("firstresponsesent"))
				    value = (bool?) backupAttributeCollection["firstresponsesent"];
                if (value == null)
                    return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("firstresponsesent", (bool) value ? 1 : 0, 1033) },
                        };
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'FirstResponseSLAStatus'.<br />
        /// Shows the status of the initial response time for the case according to the terms of the SLA.
        /// </summary>
		[AttributeLogicalName("firstresponseslastatus")]
		public FirstResponseSLAStatusEnum? FirstResponseSLAStatus
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("firstresponseslastatus");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("firstresponseslastatus"))
				    value = (OptionSetValue) backupAttributeCollection["firstresponseslastatus"];
                return value == null ? (FirstResponseSLAStatusEnum?) null : (FirstResponseSLAStatusEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("FirstResponseSLAStatus");
                if (value != null)
				    SetAttributeValue("firstresponseslastatus", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("firstresponseslastatus", value);
				OnPropertyChanged("FirstResponseSLAStatus");
			}
		}

        public IDictionary<int, string> FirstResponseSLAStatusLabels
        {
		    get
		    {
                var value = GetAttributeValue<OptionSetValue>("firstresponseslastatus");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("firstresponseslastatus"))
				    value = (OptionSetValue) backupAttributeCollection["firstresponseslastatus"];
                if (value == null)
                    return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("firstresponseslastatus", value.Value, 1033) },
                        };
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'FollowupBy'.<br />
        /// Enter the date by which a customer service representative has to follow up with the customer on this case.
        /// </summary>
		[AttributeLogicalName("followupby")]
		public DateTime? FollowupBy
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("followupby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("followupby"))
				    value = (DateTime?) backupAttributeCollection["followupby"];
			    return value;
			}
			set
			{
				OnPropertyChanging("FollowupBy");
					SetAttributeValue("followupby", value);
				OnPropertyChanged("FollowupBy");
			}
		}

        /// <summary>
        ///  
		/// 'FollowUpTaskCreated'.<br />
        /// This attribute is used for Sample Service Business Processes.
        /// </summary>
		[AttributeLogicalName("followuptaskcreated")]
		public bool? FollowUpTaskCreated
		{
			get
			{
				var value = GetAttributeValue<bool?>("followuptaskcreated");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("followuptaskcreated"))
				    value = (bool?) backupAttributeCollection["followuptaskcreated"];
			    return value;
			}
			set
			{
				OnPropertyChanging("FollowUpTaskCreated");
					SetAttributeValue("followuptaskcreated", value);
				OnPropertyChanged("FollowUpTaskCreated");
			}
		}

        public IDictionary<int, string> FollowUpTaskCreatedLabels
        {
		    get
		    {
                var value = GetAttributeValue<bool?>("followuptaskcreated");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("followuptaskcreated"))
				    value = (bool?) backupAttributeCollection["followuptaskcreated"];
                if (value == null)
                    return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("followuptaskcreated", (bool) value ? 1 : 0, 1033) },
                        };
            }
            set
            {}
        }

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'ImportSequenceNumber'.<br />
        /// Sequence number of the import that created this record.
        /// </summary>
		[AttributeLogicalName("importsequencenumber"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? ImportSequenceNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("importsequencenumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("importsequencenumber"))
				    value = (int?) backupAttributeCollection["importsequencenumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ImportSequenceNumber");
					SetAttributeValue("importsequencenumber", value);
				OnPropertyChanged("ImportSequenceNumber");
			}
		}

        /// <summary>
        ///  
		/// 'IncidentId'.<br />
        /// Unique identifier of the case.
        /// </summary>
		[AttributeLogicalName("incidentid")]
		public Guid? IncidentId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("incidentid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("incidentid"))
				    value = (Guid?) backupAttributeCollection["incidentid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("IncidentId");
                if (value != null)
					SetAttributeValue("incidentid", value);
				if (value != null)
					base.Id = value.Value;
				else
					Id = System.Guid.Empty;
				OnPropertyChanged("IncidentId");
			}
		}

        /// <summary>
        ///  
		/// 'IncidentStageCode'.<br />
        /// Select the current stage of the service process for the case to assist service team members when they review or transfer a case.
        /// </summary>
		[AttributeLogicalName("incidentstagecode")]
		public IncidentStageCodeEnum? IncidentStageCode
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("incidentstagecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("incidentstagecode"))
				    value = (OptionSetValue) backupAttributeCollection["incidentstagecode"];
                return value == null ? (IncidentStageCodeEnum?) null : (IncidentStageCodeEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("IncidentStageCode");
                if (value != null)
				    SetAttributeValue("incidentstagecode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("incidentstagecode", value);
				OnPropertyChanged("IncidentStageCode");
			}
		}

        public IDictionary<int, string> IncidentStageCodeLabels
        {
		    get
		    {
                var value = GetAttributeValue<OptionSetValue>("incidentstagecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("incidentstagecode"))
				    value = (OptionSetValue) backupAttributeCollection["incidentstagecode"];
                if (value == null)
                    return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("incidentstagecode", value.Value, 1033) },
                        };
            }
            set
            {}
        }

        /// <summary>
        /// [Range(0, 1000000000)] 
		/// 'InfluenceScore'.<br />
        /// Will contain the Influencer score coming from NetBreeze.
        /// </summary>
		[AttributeLogicalName("influencescore"), InRange("0", "1000000000", typeof(double))]
		public double? InfluenceScore
		{
			get
			{
				var value = GetAttributeValue<double?>("influencescore");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("influencescore"))
				    value = (double?) backupAttributeCollection["influencescore"];
			    return value;
			}
			set
			{
				OnPropertyChanging("InfluenceScore");
					SetAttributeValue("influencescore", value);
				OnPropertyChanged("InfluenceScore");
			}
		}

        /// <summary>
        ///  
		/// 'IsDecrementing'.<br />
        /// For system use only.
        /// </summary>
		[AttributeLogicalName("isdecrementing")]
		public bool? IsDecrementing
		{
			get
			{
				var value = GetAttributeValue<bool?>("isdecrementing");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("isdecrementing"))
				    value = (bool?) backupAttributeCollection["isdecrementing"];
			    return value;
			}
			set
			{
				OnPropertyChanging("IsDecrementing");
					SetAttributeValue("isdecrementing", value);
				OnPropertyChanged("IsDecrementing");
			}
		}

        public IDictionary<int, string> IsDecrementingLabels
        {
		    get
		    {
                var value = GetAttributeValue<bool?>("isdecrementing");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("isdecrementing"))
				    value = (bool?) backupAttributeCollection["isdecrementing"];
                if (value == null)
                    return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("isdecrementing", (bool) value ? 1 : 0, 1033) },
                        };
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'IsEscalated'.<br />
        /// Indicates if the case has been escalated.
        /// </summary>
		[AttributeLogicalName("isescalated")]
		public bool? IsEscalated
		{
			get
			{
				var value = GetAttributeValue<bool?>("isescalated");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("isescalated"))
				    value = (bool?) backupAttributeCollection["isescalated"];
			    return value;
			}
			set
			{
				OnPropertyChanging("IsEscalated");
					SetAttributeValue("isescalated", value);
				OnPropertyChanged("IsEscalated");
			}
		}

        public IDictionary<int, string> IsEscalatedLabels
        {
		    get
		    {
                var value = GetAttributeValue<bool?>("isescalated");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("isescalated"))
				    value = (bool?) backupAttributeCollection["isescalated"];
                if (value == null)
                    return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("isescalated", (bool) value ? 1 : 0, 1033) },
                        };
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'KbArticleId'.<br />
        /// Choose the article that contains additional information or a resolution for the case, for reference during research or follow up with the customer.
        /// </summary>
		[AttributeLogicalName("kbarticleid")]
		public Guid? KbArticleId
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("kbarticleid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("kbarticleid"))
				    value = (EntityReference) backupAttributeCollection["kbarticleid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("KbArticleId");
                if (value != null)
				    SetAttributeValue("kbarticleid", new EntityReference("kbarticle", value.Value));
                else
					SetAttributeValue("kbarticleid", value);
				OnPropertyChanged("KbArticleId");
			}
		}

        public string KbArticleIdName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("kbarticleid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("kbarticleid"))
				    value = (EntityReference) backupAttributeCollection["kbarticleid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_title", "kbarticle", "kbarticleid", "kbarticleid")]
        public IDictionary<int, string> KbArticleIdLabels { get; set; }

        /// <summary>
        ///  
		/// 'LastOnHoldTime'.<br />
        /// Contains the date time stamp of the last on hold time.
        /// </summary>
		[AttributeLogicalName("lastonholdtime")]
		public DateTime? LastOnHoldTime
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("lastonholdtime");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("lastonholdtime"))
				    value = (DateTime?) backupAttributeCollection["lastonholdtime"];
			    return value;
			}
			set
			{
				OnPropertyChanging("LastOnHoldTime");
					SetAttributeValue("lastonholdtime", value);
				OnPropertyChanged("LastOnHoldTime");
			}
		}

        /// <summary>
        ///  
		/// 'MasterId'.<br />
        /// Choose the primary case the current case was merged into.
        /// </summary>
		[AttributeLogicalName("masterid")]
		public Guid? MasterId
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("masterid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("masterid"))
				    value = (EntityReference) backupAttributeCollection["masterid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("MasterId");
                if (value != null)
				    SetAttributeValue("masterid", new EntityReference("incident", value.Value));
                else
					SetAttributeValue("masterid", value);
				OnPropertyChanged("MasterId");
			}
		}

        public string MasterIdName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("masterid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("masterid"))
				    value = (EntityReference) backupAttributeCollection["masterid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_title", "incident", "incidentid", "masterid")]
        public IDictionary<int, string> MasterIdLabels { get; set; }

        /// <summary>
        ///  
		/// 'Merged'.<br />
        /// Tells whether the incident has been merged with another incident.
        /// </summary>
		[AttributeLogicalName("merged")]
		public bool? Merged
		{
			get
			{
				var value = GetAttributeValue<bool?>("merged");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("merged"))
				    value = (bool?) backupAttributeCollection["merged"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Merged");
					SetAttributeValue("merged", value);
				OnPropertyChanged("Merged");
			}
		}

        public IDictionary<int, string> MergedLabels
        {
		    get
		    {
                var value = GetAttributeValue<bool?>("merged");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("merged"))
				    value = (bool?) backupAttributeCollection["merged"];
                if (value == null)
                    return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("merged", (bool) value ? 1 : 0, 1033) },
                        };
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'MessageTypeCode'.<br />
        /// Shows whether the post originated as a public or private message.
        /// </summary>
		[AttributeLogicalName("messagetypecode")]
		public MessageTypeCodeEnum? MessageTypeCode
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("messagetypecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("messagetypecode"))
				    value = (OptionSetValue) backupAttributeCollection["messagetypecode"];
                return value == null ? (MessageTypeCodeEnum?) null : (MessageTypeCodeEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("MessageTypeCode");
                if (value != null)
				    SetAttributeValue("messagetypecode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("messagetypecode", value);
				OnPropertyChanged("MessageTypeCode");
			}
		}

        public IDictionary<int, string> MessageTypeCodeLabels
        {
		    get
		    {
                var value = GetAttributeValue<OptionSetValue>("messagetypecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("messagetypecode"))
				    value = (OptionSetValue) backupAttributeCollection["messagetypecode"];
                if (value == null)
                    return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("messagetypecode", value.Value, 1033) },
                        };
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'ModifiedBy'.<br />
        /// Shows who last updated the record.
        /// </summary>
		[AttributeLogicalName("modifiedby")]
		public Guid? ModifiedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedby"))
				    value = (EntityReference) backupAttributeCollection["modifiedby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ModifiedBy");
                if (value != null)
				    SetAttributeValue("modifiedby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("modifiedby", value);
				OnPropertyChanged("ModifiedBy");
			}
		}

        public string ModifiedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedby"))
				    value = (EntityReference) backupAttributeCollection["modifiedby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_fullname", "systemuser", "systemuserid", "modifiedby")]
        public IDictionary<int, string> ModifiedByLabels { get; set; }

        /// <summary>
        ///  
		/// 'ModifiedByExternalParty'.<br />
        /// Shows the external party who modified the record.
        /// </summary>
		[AttributeLogicalName("modifiedbyexternalparty")]
		public Guid? ModifiedByExternalParty
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedbyexternalparty");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedbyexternalparty"))
				    value = (EntityReference) backupAttributeCollection["modifiedbyexternalparty"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ModifiedByExternalParty");
                if (value != null)
				    SetAttributeValue("modifiedbyexternalparty", new EntityReference("externalparty", value.Value));
                else
					SetAttributeValue("modifiedbyexternalparty", value);
				OnPropertyChanged("ModifiedByExternalParty");
			}
		}

        public string ModifiedByExternalPartyName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedbyexternalparty");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedbyexternalparty"))
				    value = (EntityReference) backupAttributeCollection["modifiedbyexternalparty"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_fullname", "externalparty", "externalpartyid", "modifiedbyexternalparty")]
        public IDictionary<int, string> ModifiedByExternalPartyLabels { get; set; }

        /// <summary>
        ///  
		/// 'ModifiedOn'.<br />
        /// Date and time when the record was modified.
        /// </summary>
		[AttributeLogicalName("modifiedon")]
		public DateTime? ModifiedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("modifiedon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedon"))
				    value = (DateTime?) backupAttributeCollection["modifiedon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ModifiedOn");
					SetAttributeValue("modifiedon", value);
				OnPropertyChanged("ModifiedOn");
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedOnBehalfBy'.<br />
        /// Shows who last updated the record on behalf of another user.
        /// </summary>
		[AttributeLogicalName("modifiedonbehalfby")]
		public Guid? ModifiedOnBehalfBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["modifiedonbehalfby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ModifiedOnBehalfBy");
                if (value != null)
				    SetAttributeValue("modifiedonbehalfby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("modifiedonbehalfby", value);
				OnPropertyChanged("ModifiedOnBehalfBy");
			}
		}

        public string ModifiedOnBehalfByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["modifiedonbehalfby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_fullname", "systemuser", "systemuserid", "modifiedonbehalfby")]
        public IDictionary<int, string> ModifiedOnBehalfByLabels { get; set; }

        /// <summary>
        ///  
		/// 'msa_partnercontactid'.<br />
        /// Allows a partner contact to be assigned to a specific case.
        /// </summary>
		[AttributeLogicalName("msa_partnercontactid")]
		public Guid? msa_partnercontactid
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("msa_partnercontactid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("msa_partnercontactid"))
				    value = (EntityReference) backupAttributeCollection["msa_partnercontactid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("msa_partnercontactid");
                if (value != null)
				    SetAttributeValue("msa_partnercontactid", new EntityReference("contact", value.Value));
                else
					SetAttributeValue("msa_partnercontactid", value);
				OnPropertyChanged("msa_partnercontactid");
			}
		}

        public string msa_partnercontactidName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("msa_partnercontactid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("msa_partnercontactid"))
				    value = (EntityReference) backupAttributeCollection["msa_partnercontactid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_fullname", "contact", "contactid", "msa_partnercontactid")]
        public IDictionary<int, string> msa_partnercontactidLabels { get; set; }

        /// <summary>
        ///  
		/// 'msa_partnerid'.<br />
        /// Creates a Relationship between a Partner (account) and a case for indirect service arrangements.
        /// </summary>
		[AttributeLogicalName("msa_partnerid")]
		public Guid? msa_partnerid
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("msa_partnerid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("msa_partnerid"))
				    value = (EntityReference) backupAttributeCollection["msa_partnerid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("msa_partnerid");
                if (value != null)
				    SetAttributeValue("msa_partnerid", new EntityReference("account", value.Value));
                else
					SetAttributeValue("msa_partnerid", value);
				OnPropertyChanged("msa_partnerid");
			}
		}

        public string msa_partneridName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("msa_partnerid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("msa_partnerid"))
				    value = (EntityReference) backupAttributeCollection["msa_partnerid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_name", "account", "accountid", "msa_partnerid")]
        public IDictionary<int, string> msa_partneridLabels { get; set; }

        /// <summary>
        ///  
		/// 'msdyn_IncidentType'.<br />
        /// Unique identifier for Incident Type associated with Case.
        /// </summary>
		[AttributeLogicalName("msdyn_incidenttype")]
		public Guid? msdyn_IncidentType
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("msdyn_incidenttype");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("msdyn_incidenttype"))
				    value = (EntityReference) backupAttributeCollection["msdyn_incidenttype"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("msdyn_IncidentType");
                if (value != null)
				    SetAttributeValue("msdyn_incidenttype", new EntityReference("msdyn_incidenttype", value.Value));
                else
					SetAttributeValue("msdyn_incidenttype", value);
				OnPropertyChanged("msdyn_IncidentType");
			}
		}

        public string msdyn_IncidentTypeName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("msdyn_incidenttype");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("msdyn_incidenttype"))
				    value = (EntityReference) backupAttributeCollection["msdyn_incidenttype"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_msdyn_name", "msdyn_incidenttype", "msdyn_incidenttypeid", "msdyn_incidenttype")]
        public IDictionary<int, string> msdyn_IncidentTypeLabels { get; set; }

        /// <summary>
        /// [Range(0, 2147483647)] 
		/// 'NumberOfChildIncidents'.<br />
        /// Number of child incidents associated with the incident.
        /// </summary>
		[AttributeLogicalName("numberofchildincidents"), InRange("0", "2147483647", typeof(int))]
		public int? NumberOfChildIncidents
		{
			get
			{
				var value = GetAttributeValue<int?>("numberofchildincidents");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("numberofchildincidents"))
				    value = (int?) backupAttributeCollection["numberofchildincidents"];
			    return value;
			}
			set
			{
				OnPropertyChanging("NumberOfChildIncidents");
					SetAttributeValue("numberofchildincidents", value);
				OnPropertyChanged("NumberOfChildIncidents");
			}
		}

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'OnHoldTime'.<br />
        /// Shows the duration in minutes for which the case was on hold.
        /// </summary>
		[AttributeLogicalName("onholdtime"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? OnHoldTime
		{
			get
			{
				var value = GetAttributeValue<int?>("onholdtime");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("onholdtime"))
				    value = (int?) backupAttributeCollection["onholdtime"];
			    return value;
			}
			set
			{
				OnPropertyChanging("OnHoldTime");
					SetAttributeValue("onholdtime", value);
				OnPropertyChanged("OnHoldTime");
			}
		}

        /// <summary>
        ///  
		/// 'OverriddenCreatedOn'.<br />
        /// Date and time that the record was migrated.
        /// </summary>
		[AttributeLogicalName("overriddencreatedon")]
		public DateTime? OverriddenCreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("overriddencreatedon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("overriddencreatedon"))
				    value = (DateTime?) backupAttributeCollection["overriddencreatedon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("OverriddenCreatedOn");
					SetAttributeValue("overriddencreatedon", value);
				OnPropertyChanged("OverriddenCreatedOn");
			}
		}

        /// <summary>
        ///  
		/// 'OwnerId'.<br />
        /// Owner Id
        /// </summary>
		[AttributeLogicalName("ownerid")]
		public EntityReference OwnerId
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ownerid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ownerid"))
				    value = (EntityReference) backupAttributeCollection["ownerid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("OwnerId");
					SetAttributeValue("ownerid", value);
				OnPropertyChanged("OwnerId");
			}
		}

        public string OwnerIdName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ownerid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ownerid"))
				    value = (EntityReference) backupAttributeCollection["ownerid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        public IDictionary<int, string> OwnerIdLabels { get; set; }

        /// <summary>
        ///  
		/// 'OwningBusinessUnit'.<br />
        /// Unique identifier for the business unit that owns the record
        /// </summary>
		[AttributeLogicalName("owningbusinessunit")]
		public Guid? OwningBusinessUnit
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owningbusinessunit");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningbusinessunit"))
				    value = (EntityReference) backupAttributeCollection["owningbusinessunit"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningBusinessUnit");
                if (value != null)
				    SetAttributeValue("owningbusinessunit", new EntityReference("businessunit", value.Value));
                else
					SetAttributeValue("owningbusinessunit", value);
				OnPropertyChanged("OwningBusinessUnit");
			}
		}

        public string OwningBusinessUnitName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owningbusinessunit");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningbusinessunit"))
				    value = (EntityReference) backupAttributeCollection["owningbusinessunit"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_name", "businessunit", "businessunitid", "owningbusinessunit")]
        public IDictionary<int, string> OwningBusinessUnitLabels { get; set; }

        /// <summary>
        ///  
		/// 'OwningTeam'.<br />
        /// Unique identifier for the team that owns the record.
        /// </summary>
		[AttributeLogicalName("owningteam")]
		public Guid? OwningTeam
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owningteam");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningteam"))
				    value = (EntityReference) backupAttributeCollection["owningteam"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningTeam");
                if (value != null)
				    SetAttributeValue("owningteam", new EntityReference("team", value.Value));
                else
					SetAttributeValue("owningteam", value);
				OnPropertyChanged("OwningTeam");
			}
		}

        public string OwningTeamName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owningteam");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningteam"))
				    value = (EntityReference) backupAttributeCollection["owningteam"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_name", "team", "teamid", "owningteam")]
        public IDictionary<int, string> OwningTeamLabels { get; set; }

        /// <summary>
        ///  
		/// 'OwningUser'.<br />
        /// Unique identifier for the user that owns the record.
        /// </summary>
		[AttributeLogicalName("owninguser")]
		public Guid? OwningUser
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owninguser");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owninguser"))
				    value = (EntityReference) backupAttributeCollection["owninguser"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningUser");
                if (value != null)
				    SetAttributeValue("owninguser", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("owninguser", value);
				OnPropertyChanged("OwningUser");
			}
		}

        public string OwningUserName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owninguser");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owninguser"))
				    value = (EntityReference) backupAttributeCollection["owninguser"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_fullname", "systemuser", "systemuserid", "owninguser")]
        public IDictionary<int, string> OwningUserLabels { get; set; }

        /// <summary>
        ///  
		/// 'ParentCaseId'.<br />
        /// Choose the parent case for a case.
        /// </summary>
		[AttributeLogicalName("parentcaseid")]
		public Guid? ParentCaseId
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("parentcaseid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("parentcaseid"))
				    value = (EntityReference) backupAttributeCollection["parentcaseid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ParentCaseId");
                if (value != null)
				    SetAttributeValue("parentcaseid", new EntityReference("incident", value.Value));
                else
					SetAttributeValue("parentcaseid", value);
				OnPropertyChanged("ParentCaseId");
			}
		}

        public string ParentCaseIdName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("parentcaseid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("parentcaseid"))
				    value = (EntityReference) backupAttributeCollection["parentcaseid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_title", "incident", "incidentid", "parentcaseid")]
        public IDictionary<int, string> ParentCaseIdLabels { get; set; }

        /// <summary>
        ///  
		/// 'PrimaryContactId'.<br />
        /// Select a primary contact for this case.
        /// </summary>
		[AttributeLogicalName("primarycontactid")]
		public Guid? PrimaryContactId
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("primarycontactid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("primarycontactid"))
				    value = (EntityReference) backupAttributeCollection["primarycontactid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("PrimaryContactId");
                if (value != null)
				    SetAttributeValue("primarycontactid", new EntityReference("contact", value.Value));
                else
					SetAttributeValue("primarycontactid", value);
				OnPropertyChanged("PrimaryContactId");
			}
		}

        public string PrimaryContactIdName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("primarycontactid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("primarycontactid"))
				    value = (EntityReference) backupAttributeCollection["primarycontactid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_fullname", "contact", "contactid", "primarycontactid")]
        public IDictionary<int, string> PrimaryContactIdLabels { get; set; }

        /// <summary>
        ///  
		/// 'PriorityCode'.<br />
        /// Select the priority so that preferred customers or critical issues are handled quickly.
        /// </summary>
		[AttributeLogicalName("prioritycode")]
		public PriorityCodeEnum? PriorityCode
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("prioritycode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("prioritycode"))
				    value = (OptionSetValue) backupAttributeCollection["prioritycode"];
                return value == null ? (PriorityCodeEnum?) null : (PriorityCodeEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("PriorityCode");
                if (value != null)
				    SetAttributeValue("prioritycode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("prioritycode", value);
				OnPropertyChanged("PriorityCode");
			}
		}

        public IDictionary<int, string> PriorityCodeLabels
        {
		    get
		    {
                var value = GetAttributeValue<OptionSetValue>("prioritycode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("prioritycode"))
				    value = (OptionSetValue) backupAttributeCollection["prioritycode"];
                if (value == null)
                    return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("prioritycode", value.Value, 1033) },
                        };
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'ProcessId'.<br />
        /// Contains the id of the process associated with the entity.
        /// </summary>
		[AttributeLogicalName("processid")]
		public Guid? ProcessId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("processid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("processid"))
				    value = (Guid?) backupAttributeCollection["processid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ProcessId");
					SetAttributeValue("processid", value);
				OnPropertyChanged("ProcessId");
			}
		}

        /// <summary>
        ///  
		/// 'ProductId'.<br />
        /// Choose the product associated with the case to identify warranty, service, or other product issues and be able to report the number of incidents for each product.
        /// </summary>
		[AttributeLogicalName("productid")]
		public Guid? ProductId
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("productid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("productid"))
				    value = (EntityReference) backupAttributeCollection["productid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ProductId");
                if (value != null)
				    SetAttributeValue("productid", new EntityReference("product", value.Value));
                else
					SetAttributeValue("productid", value);
				OnPropertyChanged("ProductId");
			}
		}

        public string ProductIdName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("productid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("productid"))
				    value = (EntityReference) backupAttributeCollection["productid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_name", "product", "productid", "productid")]
        public IDictionary<int, string> ProductIdLabels { get; set; }

        /// <summary>
        /// [MaximumLength=100] 
		/// 'ProductSerialNumber'.<br />
        /// Type the serial number of the product that is associated with this case, so that the number of cases per product can be reported.
        /// </summary>
		[AttributeLogicalName("productserialnumber"), MaxLength(100)]
		public string ProductSerialNumber
		{
			get
			{
				var value = GetAttributeValue<string>("productserialnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("productserialnumber"))
				    value = (string) backupAttributeCollection["productserialnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ProductSerialNumber");
					SetAttributeValue("productserialnumber", value);
				OnPropertyChanged("ProductSerialNumber");
			}
		}

        /// <summary>
        ///  
		/// 'ResolveBy'.<br />
        /// Enter the date by when the case must be resolved.
        /// </summary>
		[AttributeLogicalName("resolveby")]
		public DateTime? ResolveBy
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("resolveby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("resolveby"))
				    value = (DateTime?) backupAttributeCollection["resolveby"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ResolveBy");
					SetAttributeValue("resolveby", value);
				OnPropertyChanged("ResolveBy");
			}
		}

        /// <summary>
        ///  
		/// 'ResolveByKPIId'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("resolvebykpiid")]
		public Guid? ResolveByKPIId
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("resolvebykpiid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("resolvebykpiid"))
				    value = (EntityReference) backupAttributeCollection["resolvebykpiid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ResolveByKPIId");
                if (value != null)
				    SetAttributeValue("resolvebykpiid", new EntityReference("slakpiinstance", value.Value));
                else
					SetAttributeValue("resolvebykpiid", value);
				OnPropertyChanged("ResolveByKPIId");
			}
		}

        public string ResolveByKPIIdName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("resolvebykpiid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("resolvebykpiid"))
				    value = (EntityReference) backupAttributeCollection["resolvebykpiid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_name", "slakpiinstance", "slakpiinstanceid", "resolvebykpiid")]
        public IDictionary<int, string> ResolveByKPIIdLabels { get; set; }

        /// <summary>
        ///  
		/// 'ResolveBySLAStatus'.<br />
        /// Shows the status of the resolution time for the case according to the terms of the SLA.
        /// </summary>
		[AttributeLogicalName("resolvebyslastatus")]
		public ResolveBySLAStatusEnum? ResolveBySLAStatus
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("resolvebyslastatus");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("resolvebyslastatus"))
				    value = (OptionSetValue) backupAttributeCollection["resolvebyslastatus"];
                return value == null ? (ResolveBySLAStatusEnum?) null : (ResolveBySLAStatusEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("ResolveBySLAStatus");
                if (value != null)
				    SetAttributeValue("resolvebyslastatus", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("resolvebyslastatus", value);
				OnPropertyChanged("ResolveBySLAStatus");
			}
		}

        public IDictionary<int, string> ResolveBySLAStatusLabels
        {
		    get
		    {
                var value = GetAttributeValue<OptionSetValue>("resolvebyslastatus");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("resolvebyslastatus"))
				    value = (OptionSetValue) backupAttributeCollection["resolvebyslastatus"];
                if (value == null)
                    return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("resolvebyslastatus", value.Value, 1033) },
                        };
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'ResponseBy'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("responseby")]
		public DateTime? ResponseBy
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("responseby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("responseby"))
				    value = (DateTime?) backupAttributeCollection["responseby"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ResponseBy");
					SetAttributeValue("responseby", value);
				OnPropertyChanged("ResponseBy");
			}
		}

        /// <summary>
        ///  
		/// 'ResponsibleContactId'.<br />
        /// Choose an additional customer contact who can also help resolve the case.
        /// </summary>
		[AttributeLogicalName("responsiblecontactid")]
		[Obsolete]
		public Guid? ResponsibleContactId
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("responsiblecontactid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("responsiblecontactid"))
				    value = (EntityReference) backupAttributeCollection["responsiblecontactid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ResponsibleContactId");
                if (value != null)
				    SetAttributeValue("responsiblecontactid", new EntityReference("contact", value.Value));
                else
					SetAttributeValue("responsiblecontactid", value);
				OnPropertyChanged("ResponsibleContactId");
			}
		}

        public string ResponsibleContactIdName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("responsiblecontactid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("responsiblecontactid"))
				    value = (EntityReference) backupAttributeCollection["responsiblecontactid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_fullname", "contact", "contactid", "responsiblecontactid")]
        public IDictionary<int, string> ResponsibleContactIdLabels { get; set; }

        /// <summary>
        ///  
		/// 'RouteCase'.<br />
        /// Tells whether the incident has been routed to queue or not.
        /// </summary>
		[AttributeLogicalName("routecase")]
		public bool? RouteCase
		{
			get
			{
				var value = GetAttributeValue<bool?>("routecase");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("routecase"))
				    value = (bool?) backupAttributeCollection["routecase"];
			    return value;
			}
			set
			{
				OnPropertyChanging("RouteCase");
					SetAttributeValue("routecase", value);
				OnPropertyChanged("RouteCase");
			}
		}

        public IDictionary<int, string> RouteCaseLabels
        {
		    get
		    {
                var value = GetAttributeValue<bool?>("routecase");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("routecase"))
				    value = (bool?) backupAttributeCollection["routecase"];
                if (value == null)
                    return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("routecase", (bool) value ? 1 : 0, 1033) },
                        };
            }
            set
            {}
        }

        /// <summary>
        /// [Range(-100000000000, 100000000000)] 
		/// 'SentimentValue'.<br />
        /// Value derived after assessing words commonly associated with a negative, neutral, or positive sentiment that occurs in a social post. Sentiment information can also be reported as numeric values.
        /// </summary>
		[AttributeLogicalName("sentimentvalue"), InRange("-100000000000", "100000000000", typeof(double))]
		public double? SentimentValue
		{
			get
			{
				var value = GetAttributeValue<double?>("sentimentvalue");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("sentimentvalue"))
				    value = (double?) backupAttributeCollection["sentimentvalue"];
			    return value;
			}
			set
			{
				OnPropertyChanging("SentimentValue");
					SetAttributeValue("sentimentvalue", value);
				OnPropertyChanged("SentimentValue");
			}
		}

        /// <summary>
        ///  
		/// 'ServiceStage'.<br />
        /// Select the stage, in the case resolution process, that the case is in.
        /// </summary>
		[AttributeLogicalName("servicestage")]
		public ServiceStageEnum? ServiceStage
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("servicestage");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("servicestage"))
				    value = (OptionSetValue) backupAttributeCollection["servicestage"];
                return value == null ? (ServiceStageEnum?) null : (ServiceStageEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("ServiceStage");
                if (value != null)
				    SetAttributeValue("servicestage", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("servicestage", value);
				OnPropertyChanged("ServiceStage");
			}
		}

        public IDictionary<int, string> ServiceStageLabels
        {
		    get
		    {
                var value = GetAttributeValue<OptionSetValue>("servicestage");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("servicestage"))
				    value = (OptionSetValue) backupAttributeCollection["servicestage"];
                if (value == null)
                    return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("servicestage", value.Value, 1033) },
                        };
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'SeverityCode'.<br />
        /// Select the severity of this case to indicate the incident's impact on the customer's business.
        /// </summary>
		[AttributeLogicalName("severitycode")]
		public SeverityCodeEnum? SeverityCode
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("severitycode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("severitycode"))
				    value = (OptionSetValue) backupAttributeCollection["severitycode"];
                return value == null ? (SeverityCodeEnum?) null : (SeverityCodeEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("SeverityCode");
                if (value != null)
				    SetAttributeValue("severitycode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("severitycode", value);
				OnPropertyChanged("SeverityCode");
			}
		}

        public IDictionary<int, string> SeverityCodeLabels
        {
		    get
		    {
                var value = GetAttributeValue<OptionSetValue>("severitycode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("severitycode"))
				    value = (OptionSetValue) backupAttributeCollection["severitycode"];
                if (value == null)
                    return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("severitycode", value.Value, 1033) },
                        };
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'SLAId'.<br />
        /// Choose the service level agreement (SLA) that you want to apply to the case record.
        /// </summary>
		[AttributeLogicalName("slaid")]
		public Guid? SLAId
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("slaid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("slaid"))
				    value = (EntityReference) backupAttributeCollection["slaid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("SLAId");
                if (value != null)
				    SetAttributeValue("slaid", new EntityReference("sla", value.Value));
                else
					SetAttributeValue("slaid", value);
				OnPropertyChanged("SLAId");
			}
		}

        public string SLAIdName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("slaid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("slaid"))
				    value = (EntityReference) backupAttributeCollection["slaid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_name", "sla", "slaid", "slaid")]
        public IDictionary<int, string> SLAIdLabels { get; set; }

        /// <summary>
        ///  
		/// 'SLAInvokedId'.<br />
        /// Last SLA that was applied to this case. This field is for internal use only.
        /// </summary>
		[AttributeLogicalName("slainvokedid")]
		public Guid? SLAInvokedId
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("slainvokedid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("slainvokedid"))
				    value = (EntityReference) backupAttributeCollection["slainvokedid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("SLAInvokedId");
                if (value != null)
				    SetAttributeValue("slainvokedid", new EntityReference("sla", value.Value));
                else
					SetAttributeValue("slainvokedid", value);
				OnPropertyChanged("SLAInvokedId");
			}
		}

        public string SLAInvokedIdName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("slainvokedid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("slainvokedid"))
				    value = (EntityReference) backupAttributeCollection["slainvokedid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_name", "sla", "slaid", "slainvokedid")]
        public IDictionary<int, string> SLAInvokedIdLabels { get; set; }

        /// <summary>
        ///  
		/// 'SocialProfileId'.<br />
        /// Unique identifier of the social profile with which the case is associated.
        /// </summary>
		[AttributeLogicalName("socialprofileid")]
		public Guid? SocialProfileId
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("socialprofileid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("socialprofileid"))
				    value = (EntityReference) backupAttributeCollection["socialprofileid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("SocialProfileId");
                if (value != null)
				    SetAttributeValue("socialprofileid", new EntityReference("socialprofile", value.Value));
                else
					SetAttributeValue("socialprofileid", value);
				OnPropertyChanged("SocialProfileId");
			}
		}

        public string SocialProfileIdName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("socialprofileid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("socialprofileid"))
				    value = (EntityReference) backupAttributeCollection["socialprofileid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_profilename", "socialprofile", "socialprofileid", "socialprofileid")]
        public IDictionary<int, string> SocialProfileIdLabels { get; set; }

        /// <summary>
        ///  
		/// 'StageId'.<br />
        /// Contains the id of the stage where the entity is located.
        /// </summary>
		[AttributeLogicalName("stageid")]
		public Guid? StageId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("stageid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("stageid"))
				    value = (Guid?) backupAttributeCollection["stageid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("StageId");
					SetAttributeValue("stageid", value);
				OnPropertyChanged("StageId");
			}
		}

        /// <summary>
        ///  
		/// 'StateCode'.<br />
        /// Shows whether the case is active, resolved, or canceled. Resolved and canceled cases are read-only and can't be edited unless they are reactivated.
        /// </summary>
		[AttributeLogicalName("statecode")]
		public StateCodeEnum? StateCode
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("statecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("statecode"))
				    value = (OptionSetValue) backupAttributeCollection["statecode"];
                return value == null ? (StateCodeEnum?) null : (StateCodeEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("StateCode");
                if (value != null)
				    SetAttributeValue("statecode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("statecode", value);
				OnPropertyChanged("StateCode");
			}
		}

        public IDictionary<int, string> StateCodeLabels
        {
		    get
		    {
                var value = GetAttributeValue<OptionSetValue>("statecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("statecode"))
				    value = (OptionSetValue) backupAttributeCollection["statecode"];
                if (value == null)
                    return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("statecode", value.Value, 1033) },
                        };
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'StatusCode'.<br />
        /// Select the case's status.
        /// </summary>
		[AttributeLogicalName("statuscode")]
		public StatusCodeEnum? StatusCode
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("statuscode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("statuscode"))
				    value = (OptionSetValue) backupAttributeCollection["statuscode"];
                return value == null ? (StatusCodeEnum?) null : (StatusCodeEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("StatusCode");
                if (value != null)
				    SetAttributeValue("statuscode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("statuscode", value);
				OnPropertyChanged("StatusCode");
			}
		}

        public IDictionary<int, string> StatusCodeLabels
        {
		    get
		    {
                var value = GetAttributeValue<OptionSetValue>("statuscode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("statuscode"))
				    value = (OptionSetValue) backupAttributeCollection["statuscode"];
                if (value == null)
                    return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("statuscode", value.Value, 1033) },
                        };
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'SubjectId'.<br />
        /// Choose the subject for the case, such as catalog request or product complaint, so customer service managers can identify frequent requests or problem areas. Administrators can configure subjects under Business Management in the Settings area.
        /// </summary>
		[AttributeLogicalName("subjectid")]
		public Guid? SubjectId
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("subjectid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("subjectid"))
				    value = (EntityReference) backupAttributeCollection["subjectid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("SubjectId");
                if (value != null)
				    SetAttributeValue("subjectid", new EntityReference("subject", value.Value));
                else
					SetAttributeValue("subjectid", value);
				OnPropertyChanged("SubjectId");
			}
		}

        public string SubjectIdName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("subjectid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("subjectid"))
				    value = (EntityReference) backupAttributeCollection["subjectid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_title", "subject", "subjectid", "subjectid")]
        public IDictionary<int, string> SubjectIdLabels { get; set; }

        /// <summary>
        /// [MaximumLength=100] 
		/// 'TicketNumber'.<br />
        /// Shows the case number for customer reference and searching capabilities. This cannot be modified.
        /// </summary>
		[AttributeLogicalName("ticketnumber"), MaxLength(100)]
		public string TicketNumber
		{
			get
			{
				var value = GetAttributeValue<string>("ticketnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ticketnumber"))
				    value = (string) backupAttributeCollection["ticketnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("TicketNumber");
					SetAttributeValue("ticketnumber", value);
				OnPropertyChanged("TicketNumber");
			}
		}

        /// <summary>
        /// [Range(-1, 2147483647)] 
		/// 'TimeZoneRuleVersionNumber'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("timezoneruleversionnumber"), InRange("-1", "2147483647", typeof(int))]
		public int? TimeZoneRuleVersionNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("timezoneruleversionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("timezoneruleversionnumber"))
				    value = (int?) backupAttributeCollection["timezoneruleversionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("TimeZoneRuleVersionNumber");
					SetAttributeValue("timezoneruleversionnumber", value);
				OnPropertyChanged("TimeZoneRuleVersionNumber");
			}
		}

        /// <summary>
        /// [Required][MaximumLength=200] 
		/// 'Title'.<br />
        /// Type a subject or descriptive name, such as the request, issue, or company name, to identify the case in Microsoft Dynamics 365 views.
        /// </summary>
		[AttributeLogicalName("title"), Required, MaxLength(200)]
		public string Title
		{
			get
			{
				var value = GetAttributeValue<string>("title");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("title"))
				    value = (string) backupAttributeCollection["title"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Title");
					SetAttributeValue("title", value);
				OnPropertyChanged("Title");
			}
		}

        /// <summary>
        ///  
		/// 'TransactionCurrencyId'.<br />
        /// Choose the local currency for the record to make sure budgets are reported in the correct currency.
        /// </summary>
		[AttributeLogicalName("transactioncurrencyid")]
		public Guid? TransactionCurrencyId
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("transactioncurrencyid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("transactioncurrencyid"))
				    value = (EntityReference) backupAttributeCollection["transactioncurrencyid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("TransactionCurrencyId");
                if (value != null)
				    SetAttributeValue("transactioncurrencyid", new EntityReference("transactioncurrency", value.Value));
                else
					SetAttributeValue("transactioncurrencyid", value);
				OnPropertyChanged("TransactionCurrencyId");
			}
		}

        public string TransactionCurrencyIdName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("transactioncurrencyid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("transactioncurrencyid"))
				    value = (EntityReference) backupAttributeCollection["transactioncurrencyid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_currencyname", "transactioncurrency", "transactioncurrencyid", "transactioncurrencyid")]
        public IDictionary<int, string> TransactionCurrencyIdLabels { get; set; }

        /// <summary>
        /// [MaximumLength=1250] 
		/// 'TraversedPath'.<br />
        /// A comma separated list of string values representing the unique identifiers of stages in a Business Process Flow Instance in the order that they occur.
        /// </summary>
		[AttributeLogicalName("traversedpath"), MaxLength(1250)]
		public string TraversedPath
		{
			get
			{
				var value = GetAttributeValue<string>("traversedpath");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("traversedpath"))
				    value = (string) backupAttributeCollection["traversedpath"];
			    return value;
			}
			set
			{
				OnPropertyChanging("TraversedPath");
					SetAttributeValue("traversedpath", value);
				OnPropertyChanged("TraversedPath");
			}
		}

        /// <summary>
        /// [Range(-1, 2147483647)] 
		/// 'UTCConversionTimeZoneCode'.<br />
        /// Time zone code that was in use when the record was created.
        /// </summary>
		[AttributeLogicalName("utcconversiontimezonecode"), InRange("-1", "2147483647", typeof(int))]
		public int? UTCConversionTimeZoneCode
		{
			get
			{
				var value = GetAttributeValue<int?>("utcconversiontimezonecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("utcconversiontimezonecode"))
				    value = (int?) backupAttributeCollection["utcconversiontimezonecode"];
			    return value;
			}
			set
			{
				OnPropertyChanging("UTCConversionTimeZoneCode");
					SetAttributeValue("utcconversiontimezonecode", value);
				OnPropertyChanged("UTCConversionTimeZoneCode");
			}
		}

        /// <summary>
        ///  
		/// 'VersionNumber'.<br />
        /// Version Number
        /// </summary>
		[AttributeLogicalName("versionnumber")]
		public long? VersionNumber
		{
			get
			{
				var value = GetAttributeValue<long?>("versionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("versionnumber"))
				    value = (long?) backupAttributeCollection["versionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("VersionNumber");
					SetAttributeValue("versionnumber", value);
				OnPropertyChanged("VersionNumber");
			}
		}

		#endregion

		#region Relationships

		
		/// <summary>
		/// 1:N, 'incident_activity_parties'
		/// </summary>
		[RelationshipSchemaName("incident_activity_parties")]
		public ActivityParty[] ActivityPartysOfParty
		{
			get
			{
				var enumerable = GetRelatedEntities<ActivityParty>("incident_activity_parties", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("ActivityPartysOfParty");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<ActivityParty>("incident_activity_parties", null, value);
				OnPropertyChanged("ActivityPartysOfParty");
			}
		}
		
		/// <summary>
		/// 1:N, 'incident_existingcase'
		/// </summary>
		[RelationshipSchemaName("incident_existingcase", Microsoft.Xrm.Sdk.EntityRole.Referenced)]
		public Incident[] CasesOfExistingCase
		{
			get
			{
				var enumerable = GetRelatedEntities<Incident>("incident_existingcase", Microsoft.Xrm.Sdk.EntityRole.Referenced);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("CasesOfExistingCase");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<Incident>("incident_existingcase", Microsoft.Xrm.Sdk.EntityRole.Referenced, value);
				OnPropertyChanged("CasesOfExistingCase");
			}
		}
		
		/// <summary>
		/// 1:N, 'incident_master_incident'
		/// </summary>
		[RelationshipSchemaName("incident_master_incident", Microsoft.Xrm.Sdk.EntityRole.Referenced)]
		public Incident[] CasesOfMasterCase
		{
			get
			{
				var enumerable = GetRelatedEntities<Incident>("incident_master_incident", Microsoft.Xrm.Sdk.EntityRole.Referenced);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("CasesOfMasterCase");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<Incident>("incident_master_incident", Microsoft.Xrm.Sdk.EntityRole.Referenced, value);
				OnPropertyChanged("CasesOfMasterCase");
			}
		}
		
		/// <summary>
		/// 1:N, 'incident_parent_incident'
		/// </summary>
		[RelationshipSchemaName("incident_parent_incident", Microsoft.Xrm.Sdk.EntityRole.Referenced)]
		public Incident[] CasesOfParentCase
		{
			get
			{
				var enumerable = GetRelatedEntities<Incident>("incident_parent_incident", Microsoft.Xrm.Sdk.EntityRole.Referenced);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("CasesOfParentCase");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<Incident>("incident_parent_incident", Microsoft.Xrm.Sdk.EntityRole.Referenced, value);
				OnPropertyChanged("CasesOfParentCase");
			}
		}
		
		/// <summary>
		/// N:1, 'incident_existingcase'
		/// </summary>
		[RelationshipSchemaName("incident_existingcase", Microsoft.Xrm.Sdk.EntityRole.Referencing), AttributeLogicalName("existingcase")]
		public Incident CaseAsExistingCase
		{
			get
			{
				return GetRelatedEntity<Incident>("incident_existingcase", Microsoft.Xrm.Sdk.EntityRole.Referencing);
			}
			set
			{
				OnPropertyChanging("CaseAsExistingCase");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<Incident>("incident_existingcase", Microsoft.Xrm.Sdk.EntityRole.Referencing, value);
				OnPropertyChanged("CaseAsExistingCase");
			}
		}
		
		/// <summary>
		/// N:1, 'incident_master_incident'
		/// </summary>
		[RelationshipSchemaName("incident_master_incident", Microsoft.Xrm.Sdk.EntityRole.Referencing), AttributeLogicalName("masterid")]
		public Incident CaseAsMasterCase
		{
			get
			{
				return GetRelatedEntity<Incident>("incident_master_incident", Microsoft.Xrm.Sdk.EntityRole.Referencing);
			}
			set
			{
				OnPropertyChanging("CaseAsMasterCase");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<Incident>("incident_master_incident", Microsoft.Xrm.Sdk.EntityRole.Referencing, value);
				OnPropertyChanged("CaseAsMasterCase");
			}
		}
		
		/// <summary>
		/// N:1, 'incident_parent_incident'
		/// </summary>
		[RelationshipSchemaName("incident_parent_incident", Microsoft.Xrm.Sdk.EntityRole.Referencing), AttributeLogicalName("parentcaseid")]
		public Incident CaseAsParentCase
		{
			get
			{
				return GetRelatedEntity<Incident>("incident_parent_incident", Microsoft.Xrm.Sdk.EntityRole.Referencing);
			}
			set
			{
				OnPropertyChanging("CaseAsParentCase");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<Incident>("incident_parent_incident", Microsoft.Xrm.Sdk.EntityRole.Referencing, value);
				OnPropertyChanged("CaseAsParentCase");
			}
		}
		
		public static class RelationNames {
			public static RelationName ActivityPartysOfParty = new RelationName("ActivityPartysOfParty");
			public static RelationName CasesOfExistingCase = new RelationName("CasesOfExistingCase");
			public static RelationName CasesOfMasterCase = new RelationName("CasesOfMasterCase");
			public static RelationName CasesOfParentCase = new RelationName("CasesOfParentCase");
			public static RelationName CaseAsExistingCase = new RelationName("CaseAsExistingCase");
			public static RelationName CaseAsMasterCase = new RelationName("CaseAsMasterCase");
			public static RelationName CaseAsParentCase = new RelationName("CaseAsParentCase");
		}


		protected override IDictionary<string, object[]> RelationProperties { get {
			if (relationProperties != null) return relationProperties;
			relationProperties = new Dictionary<string, object[]>();
			relationProperties["ActivityPartysOfParty"] = new object[] { "ActivityPartysOfParty", "activityparty", "incident", "partyid", "incidentid", "incidentid", "incidentid", "incident_activity_parties", typeof (ActivityParty[]) };
			relationProperties["CasesOfExistingCase"] = new object[] { "CasesOfExistingCase", "incident", "incident", "existingcase", "incidentid", "incidentid", "incidentid", "incident_existingcase", typeof (Incident[]) };
			relationProperties["CasesOfMasterCase"] = new object[] { "CasesOfMasterCase", "incident", "incident", "masterid", "incidentid", "incidentid", "incidentid", "incident_master_incident", typeof (Incident[]) };
			relationProperties["CasesOfParentCase"] = new object[] { "CasesOfParentCase", "incident", "incident", "parentcaseid", "incidentid", "incidentid", "incidentid", "incident_parent_incident", typeof (Incident[]) };
			relationProperties["CaseAsExistingCase"] = new object[] { "CaseAsExistingCase", "incident", "incident", "incidentid", "existingcase", "incidentid", "incidentid", "incident_existingcase", typeof (Incident) };
			relationProperties["CaseAsMasterCase"] = new object[] { "CaseAsMasterCase", "incident", "incident", "incidentid", "masterid", "incidentid", "incidentid", "incident_master_incident", typeof (Incident) };
			relationProperties["CaseAsParentCase"] = new object[] { "CaseAsParentCase", "incident", "incident", "incidentid", "parentcaseid", "incidentid", "incidentid", "incident_parent_incident", typeof (Incident) };
			return relationProperties; } }


		#endregion

		/// <summary>
		/// Constructor for populating via LINQ queries given a LINQ anonymous type
		/// <param name="anonymousType">LINQ anonymous type.</param>
		/// </summary>
		public Incident(object anonymousType) : 
				this()
		{
            foreach (var p in anonymousType.GetType().GetProperties())
            {
                var value = p.GetValue(anonymousType, null);
                if (p.PropertyType == typeof(System.Guid))
                {
                    // Type is Guid, must be Id
                    base.Id = (System.Guid)value;
                    Attributes["incidentid"] = base.Id;
               }
                else if (p.Name == "FormattedValues")
                {
                    // Add Support for FormattedValues
                    FormattedValues.AddRange((FormattedValueCollection)value);
                }
                else
                {
                    Attributes[p.Name.ToLower()] = value;
                }
            }
		}


		#region Label/value pairs

		#region ActivitiesComplete

		public enum ActivitiesCompleteEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region adx_publishtoweb

		public enum adx_publishtowebEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region BlockedProfile

		public enum BlockedProfileEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region CaseOriginCode

		public enum CaseOriginCodeEnum
		{
			[EnumMember]Phone = 1,
			[EnumMember]Email = 2,
			[EnumMember]Web = 3,
			[EnumMember]Facebook = 2483,
			[EnumMember]Twitter = 3986,
		}

		#endregion
	
		#region CaseTypeCode

		public enum CaseTypeCodeEnum
		{
			[EnumMember]Question = 1,
			[EnumMember]Problem = 2,
			[EnumMember]Request = 3,
		}

		#endregion
	
		#region CheckEmail

		public enum CheckEmailEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region ContractServiceLevelCode

		public enum ContractServiceLevelCodeEnum
		{
			[EnumMember]Gold = 1,
			[EnumMember]Silver = 2,
			[EnumMember]Bronze = 3,
		}

		#endregion
	
		#region CustomerContacted

		public enum CustomerContactedEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region CustomerSatisfactionCode

		public enum CustomerSatisfactionCodeEnum
		{
			[EnumMember]VerySatisfied = 5,
			[EnumMember]Satisfied = 4,
			[EnumMember]Neutral = 3,
			[EnumMember]Dissatisfied = 2,
			[EnumMember]VeryDissatisfied = 1,
		}

		#endregion
	
		#region DecrementEntitlementTerm

		public enum DecrementEntitlementTermEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region FirstResponseSent

		public enum FirstResponseSentEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region FirstResponseSLAStatus

		public enum FirstResponseSLAStatusEnum
		{
			[EnumMember]InProgress = 1,
			[EnumMember]NearingNoncompliance = 2,
			[EnumMember]Succeeded = 3,
			[EnumMember]Noncompliant = 4,
		}

		#endregion
	
		#region FollowUpTaskCreated

		public enum FollowUpTaskCreatedEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region IncidentStageCode

		public enum IncidentStageCodeEnum
		{
			[EnumMember]DefaultValue = 1,
		}

		#endregion
	
		#region IsDecrementing

		public enum IsDecrementingEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region IsEscalated

		public enum IsEscalatedEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region Merged

		public enum MergedEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region MessageTypeCode

		public enum MessageTypeCodeEnum
		{
			[EnumMember]PublicMessage = 0,
			[EnumMember]PrivateMessage = 1,
		}

		#endregion
	
		#region PriorityCode

		public enum PriorityCodeEnum
		{
			[EnumMember]High = 1,
			[EnumMember]Normal = 2,
			[EnumMember]Low = 3,
		}

		#endregion
	
		#region ResolveBySLAStatus

		public enum ResolveBySLAStatusEnum
		{
			[EnumMember]InProgress = 1,
			[EnumMember]NearingNoncompliance = 2,
			[EnumMember]Succeeded = 3,
			[EnumMember]Noncompliant = 4,
		}

		#endregion
	
		#region RouteCase

		public enum RouteCaseEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region ServiceStage

		public enum ServiceStageEnum
		{
			[EnumMember]Identify = 0,
			[EnumMember]Research = 1,
			[EnumMember]Resolve = 2,
		}

		#endregion
	
		#region SeverityCode

		public enum SeverityCodeEnum
		{
			[EnumMember]DefaultValue = 1,
		}

		#endregion
	
		#region StateCode

		public enum StateCodeEnum
		{
			[EnumMember]Active = 0,
			[EnumMember]Resolved = 1,
			[EnumMember]Canceled = 2,
		}

		#endregion
	
		#region StatusCode

		public enum StatusCodeEnum
		{
			[EnumMember]ProblemSolved = 5,
			[EnumMember]InformationProvided = 1000,
			[EnumMember]Canceled = 6,
			[EnumMember]Merged = 2000,
			[EnumMember]InProgress = 1,
			[EnumMember]OnHold = 2,
			[EnumMember]WaitingforDetails = 3,
			[EnumMember]Researching = 4,
		}

		#endregion
	
		#endregion


		#region Metadata


		#region Enums

		public static class Enums
		{
			/// <summary>
			/// Gets the label corresponding to the option-set's value using its logical name,
			/// the value within, and the language code.
			/// </summary>
			/// <param name="logicalName">The logical name of the option-set in CRM</param>
			/// <param name="constant">The value from the option-set</param>
			/// <param name="languageCode">The language code from CRM</param>
			/// <returns></returns>
			public static string GetLabel(string logicalName, int constant, int languageCode = 1033)
			{
				return GeneratorHelpers.GetLabel(logicalName, constant, typeof(Enums), languageCode);
			}
			/// <summary>
			/// Gets the value corresponding to the option-set's label using its logical name,
			/// the value within, and the language code.
			/// </summary>
			/// <param name="logicalName">The logical name of the option-set in CRM</param>
			/// <param name="label">The label from the option-set</param>
			/// <param name="languageCode">The language code from CRM</param>
			/// <returns>The value corresponding to the label</returns>
			public static int GetValue(string logicalName, string label, int languageCode = 1033)
			{
				return GeneratorHelpers.GetValue(logicalName, label, typeof(Enums), languageCode);
			}

			#region Logical names

			public static class Names
			{
				public const string ActivitiesComplete = "activitiescomplete";
				public const string adx_publishtoweb = "adx_publishtoweb";
				public const string BlockedProfile = "blockedprofile";
				public const string CaseOriginCode = "caseorigincode";
				public const string CaseTypeCode = "casetypecode";
				public const string CheckEmail = "checkemail";
				public const string ContractServiceLevelCode = "contractservicelevelcode";
				public const string CustomerContacted = "customercontacted";
				public const string CustomerSatisfactionCode = "customersatisfactioncode";
				public const string DecrementEntitlementTerm = "decremententitlementterm";
				public const string FirstResponseSent = "firstresponsesent";
				public const string FirstResponseSLAStatus = "firstresponseslastatus";
				public const string FollowUpTaskCreated = "followuptaskcreated";
				public const string IncidentStageCode = "incidentstagecode";
				public const string IsDecrementing = "isdecrementing";
				public const string IsEscalated = "isescalated";
				public const string Merged = "merged";
				public const string MessageTypeCode = "messagetypecode";
				public const string PriorityCode = "prioritycode";
				public const string ResolveBySLAStatus = "resolvebyslastatus";
				public const string RouteCase = "routecase";
				public const string ServiceStage = "servicestage";
				public const string SeverityCode = "severitycode";
				public const string StateCode = "statecode";
				public const string StatusCode = "statuscode";
			}

			#endregion

			#region Labels

			public static class Labels
			{
				public static class ActivitiesComplete 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(ActivitiesComplete), label, languageCode);
					}
				}

				public static class adx_publishtoweb 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(adx_publishtoweb), label, languageCode);
					}
				}

				public static class BlockedProfile 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(BlockedProfile), label, languageCode);
					}
				}

				public static class CaseOriginCode 
				{
					public const string Phone_1033 = "Phone";
					public const string Email_1033 = "Email";
					public const string Web_1033 = "Web";
					public const string Facebook_1033 = "Facebook";
					public const string Twitter_1033 = "Twitter";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(CaseOriginCode), label, languageCode);
					}
				}

				public static class CaseTypeCode 
				{
					public const string Question_1033 = "Question";
					public const string Problem_1033 = "Problem";
					public const string Request_1033 = "Request";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(CaseTypeCode), label, languageCode);
					}
				}

				public static class CheckEmail 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(CheckEmail), label, languageCode);
					}
				}

				public static class ContractServiceLevelCode 
				{
					public const string Gold_1033 = "Gold";
					public const string Silver_1033 = "Silver";
					public const string Bronze_1033 = "Bronze";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(ContractServiceLevelCode), label, languageCode);
					}
				}

				public static class CustomerContacted 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(CustomerContacted), label, languageCode);
					}
				}

				public static class CustomerSatisfactionCode 
				{
					public const string VerySatisfied_1033 = "Very Satisfied";
					public const string Satisfied_1033 = "Satisfied";
					public const string Neutral_1033 = "Neutral";
					public const string Dissatisfied_1033 = "Dissatisfied";
					public const string VeryDissatisfied_1033 = "Very Dissatisfied";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(CustomerSatisfactionCode), label, languageCode);
					}
				}

				public static class DecrementEntitlementTerm 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(DecrementEntitlementTerm), label, languageCode);
					}
				}

				public static class FirstResponseSent 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(FirstResponseSent), label, languageCode);
					}
				}

				public static class FirstResponseSLAStatus 
				{
					public const string InProgress_1033 = "In Progress";
					public const string NearingNoncompliance_1033 = "Nearing Noncompliance";
					public const string Succeeded_1033 = "Succeeded";
					public const string Noncompliant_1033 = "Noncompliant";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(FirstResponseSLAStatus), label, languageCode);
					}
				}

				public static class FollowUpTaskCreated 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(FollowUpTaskCreated), label, languageCode);
					}
				}

				public static class IncidentStageCode 
				{
					public const string DefaultValue_1033 = "Default Value";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(IncidentStageCode), label, languageCode);
					}
				}

				public static class IsDecrementing 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(IsDecrementing), label, languageCode);
					}
				}

				public static class IsEscalated 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(IsEscalated), label, languageCode);
					}
				}

				public static class Merged 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(Merged), label, languageCode);
					}
				}

				public static class MessageTypeCode 
				{
					public const string PublicMessage_1033 = "Public Message";
					public const string PrivateMessage_1033 = "Private Message";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(MessageTypeCode), label, languageCode);
					}
				}

				public static class PriorityCode 
				{
					public const string High_1033 = "High";
					public const string Normal_1033 = "Normal";
					public const string Low_1033 = "Low";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(PriorityCode), label, languageCode);
					}
				}

				public static class ResolveBySLAStatus 
				{
					public const string InProgress_1033 = "In Progress";
					public const string NearingNoncompliance_1033 = "Nearing Noncompliance";
					public const string Succeeded_1033 = "Succeeded";
					public const string Noncompliant_1033 = "Noncompliant";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(ResolveBySLAStatus), label, languageCode);
					}
				}

				public static class RouteCase 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(RouteCase), label, languageCode);
					}
				}

				public static class ServiceStage 
				{
					public const string Identify_1033 = "Identify";
					public const string Research_1033 = "Research";
					public const string Resolve_1033 = "Resolve";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(ServiceStage), label, languageCode);
					}
				}

				public static class SeverityCode 
				{
					public const string DefaultValue_1033 = "Default Value";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(SeverityCode), label, languageCode);
					}
				}

				public static class StateCode 
				{
					public const string Active_1033 = "Active";
					public const string Resolved_1033 = "Resolved";
					public const string Canceled_1033 = "Canceled";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(StateCode), label, languageCode);
					}
				}

				public static class StatusCode 
				{
					public const string ProblemSolved_1033 = "Problem Solved";
					public const string InformationProvided_1033 = "Information Provided";
					public const string Canceled_1033 = "Canceled";
					public const string Merged_1033 = "Merged";
					public const string InProgress_1033 = "In Progress";
					public const string OnHold_1033 = "On Hold";
					public const string WaitingforDetails_1033 = "Waiting for Details";
					public const string Researching_1033 = "Researching";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(StatusCode), label, languageCode);
					}
				}

			}

			#endregion
		}

		#endregion

		#region Fields

		public static class Fields
		{
			#region Logical names

			public const string AccountId = "accountid";
			public const string ActivitiesComplete = "activitiescomplete";
			public const string ActualServiceUnits = "actualserviceunits";
			public const string Adx_CreatedByIPAddress = "adx_createdbyipaddress";
			public const string Adx_CreatedByUsername = "adx_createdbyusername";
			public const string Adx_ModifiedByIPAddress = "adx_modifiedbyipaddress";
			public const string Adx_ModifiedByUsername = "adx_modifiedbyusername";
			public const string adx_publishtoweb = "adx_publishtoweb";
			public const string adx_resolution = "adx_resolution";
			public const string adx_resolutiondate = "adx_resolutiondate";
			public const string adx_stepstoreproduce = "adx_stepstoreproduce";
			public const string BilledServiceUnits = "billedserviceunits";
			public const string BlockedProfile = "blockedprofile";
			public const string CaseOriginCode = "caseorigincode";
			public const string CaseTypeCode = "casetypecode";
			public const string CheckEmail = "checkemail";
			public const string ContactId = "contactid";
			public const string ContractDetailId = "contractdetailid";
			public const string ContractId = "contractid";
			public const string ContractServiceLevelCode = "contractservicelevelcode";
			public const string CreatedBy = "createdby";
			public const string CreatedByExternalParty = "createdbyexternalparty";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string CustomerContacted = "customercontacted";
			public const string CustomerId = "customerid";
			public const string CustomerSatisfactionCode = "customersatisfactioncode";
			public const string DecrementEntitlementTerm = "decremententitlementterm";
			public const string Description = "description";
			public const string EmailAddress = "emailaddress";
			public const string EntitlementId = "entitlementid";
			public const string EntityImageId = "entityimageid";
			public const string EscalatedOn = "escalatedon";
			public const string ExchangeRate = "exchangerate";
			public const string ExistingCase = "existingcase";
			public const string FirstResponseByKPIId = "firstresponsebykpiid";
			public const string FirstResponseSent = "firstresponsesent";
			public const string FirstResponseSLAStatus = "firstresponseslastatus";
			public const string FollowupBy = "followupby";
			public const string FollowUpTaskCreated = "followuptaskcreated";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string IncidentId = "incidentid";
			public const string IncidentStageCode = "incidentstagecode";
			public const string InfluenceScore = "influencescore";
			public const string IsDecrementing = "isdecrementing";
			public const string IsEscalated = "isescalated";
			public const string KbArticleId = "kbarticleid";
			public const string LastOnHoldTime = "lastonholdtime";
			public const string MasterId = "masterid";
			public const string Merged = "merged";
			public const string MessageTypeCode = "messagetypecode";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedByExternalParty = "modifiedbyexternalparty";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msa_partnercontactid = "msa_partnercontactid";
			public const string msa_partnerid = "msa_partnerid";
			public const string msdyn_IncidentType = "msdyn_incidenttype";
			public const string NumberOfChildIncidents = "numberofchildincidents";
			public const string OnHoldTime = "onholdtime";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string ParentCaseId = "parentcaseid";
			public const string PrimaryContactId = "primarycontactid";
			public const string PriorityCode = "prioritycode";
			public const string ProcessId = "processid";
			public const string ProductId = "productid";
			public const string ProductSerialNumber = "productserialnumber";
			public const string ResolveBy = "resolveby";
			public const string ResolveByKPIId = "resolvebykpiid";
			public const string ResolveBySLAStatus = "resolvebyslastatus";
			public const string ResponseBy = "responseby";
			public const string ResponsibleContactId = "responsiblecontactid";
			public const string RouteCase = "routecase";
			public const string SentimentValue = "sentimentvalue";
			public const string ServiceStage = "servicestage";
			public const string SeverityCode = "severitycode";
			public const string SLAId = "slaid";
			public const string SLAInvokedId = "slainvokedid";
			public const string SocialProfileId = "socialprofileid";
			public const string StageId = "stageid";
			public const string StateCode = "statecode";
			public const string StatusCode = "statuscode";
			public const string SubjectId = "subjectid";
			public const string TicketNumber = "ticketnumber";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string Title = "title";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string TraversedPath = "traversedpath";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";

			#endregion

			#region Schema names

			public static class Schema
			{
				public const string AccountId = "AccountId";
				public const string ActivitiesComplete = "ActivitiesComplete";
				public const string ActualServiceUnits = "ActualServiceUnits";
				public const string Adx_CreatedByIPAddress = "Adx_CreatedByIPAddress";
				public const string Adx_CreatedByUsername = "Adx_CreatedByUsername";
				public const string Adx_ModifiedByIPAddress = "Adx_ModifiedByIPAddress";
				public const string Adx_ModifiedByUsername = "Adx_ModifiedByUsername";
				public const string adx_publishtoweb = "adx_publishtoweb";
				public const string adx_resolution = "adx_resolution";
				public const string adx_resolutiondate = "adx_resolutiondate";
				public const string adx_stepstoreproduce = "adx_stepstoreproduce";
				public const string BilledServiceUnits = "BilledServiceUnits";
				public const string BlockedProfile = "BlockedProfile";
				public const string CaseOriginCode = "CaseOriginCode";
				public const string CaseTypeCode = "CaseTypeCode";
				public const string CheckEmail = "CheckEmail";
				public const string ContactId = "ContactId";
				public const string ContractDetailId = "ContractDetailId";
				public const string ContractId = "ContractId";
				public const string ContractServiceLevelCode = "ContractServiceLevelCode";
				public const string CreatedBy = "CreatedBy";
				public const string CreatedByExternalParty = "CreatedByExternalParty";
				public const string CreatedOn = "CreatedOn";
				public const string CreatedOnBehalfBy = "CreatedOnBehalfBy";
				public const string CustomerContacted = "CustomerContacted";
				public const string CustomerId = "CustomerId";
				public const string CustomerSatisfactionCode = "CustomerSatisfactionCode";
				public const string DecrementEntitlementTerm = "DecrementEntitlementTerm";
				public const string Description = "Description";
				public const string EmailAddress = "EmailAddress";
				public const string EntitlementId = "EntitlementId";
				public const string EntityImageId = "EntityImageId";
				public const string EscalatedOn = "EscalatedOn";
				public const string ExchangeRate = "ExchangeRate";
				public const string ExistingCase = "ExistingCase";
				public const string FirstResponseByKPIId = "FirstResponseByKPIId";
				public const string FirstResponseSent = "FirstResponseSent";
				public const string FirstResponseSLAStatus = "FirstResponseSLAStatus";
				public const string FollowupBy = "FollowupBy";
				public const string FollowUpTaskCreated = "FollowUpTaskCreated";
				public const string ImportSequenceNumber = "ImportSequenceNumber";
				public const string IncidentId = "IncidentId";
				public const string IncidentStageCode = "IncidentStageCode";
				public const string InfluenceScore = "InfluenceScore";
				public const string IsDecrementing = "IsDecrementing";
				public const string IsEscalated = "IsEscalated";
				public const string KbArticleId = "KbArticleId";
				public const string LastOnHoldTime = "LastOnHoldTime";
				public const string MasterId = "MasterId";
				public const string Merged = "Merged";
				public const string MessageTypeCode = "MessageTypeCode";
				public const string ModifiedBy = "ModifiedBy";
				public const string ModifiedByExternalParty = "ModifiedByExternalParty";
				public const string ModifiedOn = "ModifiedOn";
				public const string ModifiedOnBehalfBy = "ModifiedOnBehalfBy";
				public const string msa_partnercontactid = "msa_partnercontactid";
				public const string msa_partnerid = "msa_partnerid";
				public const string msdyn_IncidentType = "msdyn_IncidentType";
				public const string NumberOfChildIncidents = "NumberOfChildIncidents";
				public const string OnHoldTime = "OnHoldTime";
				public const string OverriddenCreatedOn = "OverriddenCreatedOn";
				public const string OwnerId = "OwnerId";
				public const string OwningBusinessUnit = "OwningBusinessUnit";
				public const string OwningTeam = "OwningTeam";
				public const string OwningUser = "OwningUser";
				public const string ParentCaseId = "ParentCaseId";
				public const string PrimaryContactId = "PrimaryContactId";
				public const string PriorityCode = "PriorityCode";
				public const string ProcessId = "ProcessId";
				public const string ProductId = "ProductId";
				public const string ProductSerialNumber = "ProductSerialNumber";
				public const string ResolveBy = "ResolveBy";
				public const string ResolveByKPIId = "ResolveByKPIId";
				public const string ResolveBySLAStatus = "ResolveBySLAStatus";
				public const string ResponseBy = "ResponseBy";
				public const string ResponsibleContactId = "ResponsibleContactId";
				public const string RouteCase = "RouteCase";
				public const string SentimentValue = "SentimentValue";
				public const string ServiceStage = "ServiceStage";
				public const string SeverityCode = "SeverityCode";
				public const string SLAId = "SLAId";
				public const string SLAInvokedId = "SLAInvokedId";
				public const string SocialProfileId = "SocialProfileId";
				public const string StageId = "StageId";
				public const string StateCode = "StateCode";
				public const string StatusCode = "StatusCode";
				public const string SubjectId = "SubjectId";
				public const string TicketNumber = "TicketNumber";
				public const string TimeZoneRuleVersionNumber = "TimeZoneRuleVersionNumber";
				public const string Title = "Title";
				public const string TransactionCurrencyId = "TransactionCurrencyId";
				public const string TraversedPath = "TraversedPath";
				public const string UTCConversionTimeZoneCode = "UTCConversionTimeZoneCode";
				public const string VersionNumber = "VersionNumber";
			}

			#endregion

			#region Labels

			public static class Labels
			{
				public static class AccountId
				{
					public const string _1033 = "Account";
				}

				public static class ActivitiesComplete
				{
					public const string _1033 = "Activities Complete";
				}

				public static class ActualServiceUnits
				{
					public const string _1033 = "Actual Service Units";
				}

				public static class Adx_CreatedByIPAddress
				{
					public const string _1033 = "Created By IP Address";
				}

				public static class Adx_CreatedByUsername
				{
					public const string _1033 = "Created By Username";
				}

				public static class Adx_ModifiedByIPAddress
				{
					public const string _1033 = "Modified By IP Address";
				}

				public static class Adx_ModifiedByUsername
				{
					public const string _1033 = "Modified By Username";
				}

				public static class adx_publishtoweb
				{
					public const string _1033 = "Publish to Web";
				}

				public static class adx_resolution
				{
					public const string _1033 = "Resolution";
				}

				public static class adx_resolutiondate
				{
					public const string _1033 = "Resolution Date";
				}

				public static class adx_stepstoreproduce
				{
					public const string _1033 = "Steps to Reproduce";
				}

				public static class BilledServiceUnits
				{
					public const string _1033 = "Billed Service Units";
				}

				public static class BlockedProfile
				{
					public const string _1033 = "Blocked Profile";
				}

				public static class CaseOriginCode
				{
					public const string _1033 = "Origin";
				}

				public static class CaseTypeCode
				{
					public const string _1033 = "Case Type";
				}

				public static class CheckEmail
				{
					public const string _1033 = "Check Email";
				}

				public static class ContactId
				{
					public const string _1033 = "Contact";
				}

				public static class ContractDetailId
				{
					public const string _1033 = "Contract Line";
				}

				public static class ContractId
				{
					public const string _1033 = "Contract";
				}

				public static class ContractServiceLevelCode
				{
					public const string _1033 = "Service Level";
				}

				public static class CreatedBy
				{
					public const string _1033 = "Created By";
				}

				public static class CreatedByExternalParty
				{
					public const string _1033 = "Created By (External Party)";
				}

				public static class CreatedOn
				{
					public const string _1033 = "Created On";
				}

				public static class CreatedOnBehalfBy
				{
					public const string _1033 = "Created By (Delegate)";
				}

				public static class CustomerContacted
				{
					public const string _1033 = "Customer Contacted";
				}

				public static class CustomerId
				{
					public const string _1033 = "Customer";
				}

				public static class CustomerSatisfactionCode
				{
					public const string _1033 = "Satisfaction";
				}

				public static class DecrementEntitlementTerm
				{
					public const string _1033 = "Decrement Entitlement Terms";
				}

				public static class Description
				{
					public const string _1033 = "Description";
				}

				public static class EmailAddress
				{
					public const string _1033 = "Email Address";
				}

				public static class EntitlementId
				{
					public const string _1033 = "Entitlement";
				}

				public static class EntityImageId
				{
				}

				public static class EscalatedOn
				{
					public const string _1033 = "Escalated On";
				}

				public static class ExchangeRate
				{
					public const string _1033 = "Exchange Rate";
				}

				public static class ExistingCase
				{
					public const string _1033 = "Existing Case";
				}

				public static class FirstResponseByKPIId
				{
					public const string _1033 = "First Response By KPI";
				}

				public static class FirstResponseSent
				{
					public const string _1033 = "First Response Sent";
				}

				public static class FirstResponseSLAStatus
				{
					public const string _1033 = "First Response SLA Status";
				}

				public static class FollowupBy
				{
					public const string _1033 = "Follow Up By";
				}

				public static class FollowUpTaskCreated
				{
					public const string _1033 = "Follow up Task Created";
				}

				public static class ImportSequenceNumber
				{
					public const string _1033 = "Import Sequence Number";
				}

				public static class IncidentId
				{
					public const string _1033 = "Case";
				}

				public static class IncidentStageCode
				{
					public const string _1033 = "Case Stage";
				}

				public static class InfluenceScore
				{
					public const string _1033 = "Influence Score";
				}

				public static class IsDecrementing
				{
					public const string _1033 = "Decrementing";
				}

				public static class IsEscalated
				{
					public const string _1033 = "Is Escalated";
				}

				public static class KbArticleId
				{
					public const string _1033 = "Knowledge Base Article";
				}

				public static class LastOnHoldTime
				{
					public const string _1033 = "Last On Hold Time";
				}

				public static class MasterId
				{
					public const string _1033 = "Master Case";
				}

				public static class Merged
				{
					public const string _1033 = "Internal Use Only";
				}

				public static class MessageTypeCode
				{
					public const string _1033 = "Received As";
				}

				public static class ModifiedBy
				{
					public const string _1033 = "Modified By";
				}

				public static class ModifiedByExternalParty
				{
					public const string _1033 = "Modified By (External Party)";
				}

				public static class ModifiedOn
				{
					public const string _1033 = "Modified On";
				}

				public static class ModifiedOnBehalfBy
				{
					public const string _1033 = "Modified By (Delegate)";
				}

				public static class msa_partnercontactid
				{
					public const string _1033 = "Partner Contact";
				}

				public static class msa_partnerid
				{
					public const string _1033 = "Partner";
				}

				public static class msdyn_IncidentType
				{
					public const string _1033 = "Incident Type";
				}

				public static class NumberOfChildIncidents
				{
					public const string _1033 = "Child Cases";
				}

				public static class OnHoldTime
				{
					public const string _1033 = "On Hold Time (Minutes)";
				}

				public static class OverriddenCreatedOn
				{
					public const string _1033 = "Record Created On";
				}

				public static class OwnerId
				{
					public const string _1033 = "Owner";
				}

				public static class OwningBusinessUnit
				{
					public const string _1033 = "Owning Business Unit";
				}

				public static class OwningTeam
				{
					public const string _1033 = "Owning Team";
				}

				public static class OwningUser
				{
					public const string _1033 = "Owning User";
				}

				public static class ParentCaseId
				{
					public const string _1033 = "Parent Case";
				}

				public static class PrimaryContactId
				{
					public const string _1033 = "Contact";
				}

				public static class PriorityCode
				{
					public const string _1033 = "Priority";
				}

				public static class ProcessId
				{
					public const string _1033 = "Process Id";
				}

				public static class ProductId
				{
					public const string _1033 = "Product";
				}

				public static class ProductSerialNumber
				{
					public const string _1033 = "Serial Number";
				}

				public static class ResolveBy
				{
					public const string _1033 = "Resolve By";
				}

				public static class ResolveByKPIId
				{
					public const string _1033 = "Resolve By KPI";
				}

				public static class ResolveBySLAStatus
				{
					public const string _1033 = "Resolve By SLA Status";
				}

				public static class ResponseBy
				{
					public const string _1033 = "First Response By";
				}

				public static class ResponsibleContactId
				{
					public const string _1033 = "Responsible Contact";
				}

				public static class RouteCase
				{
					public const string _1033 = "Route Case";
				}

				public static class SentimentValue
				{
					public const string _1033 = "Sentiment Value";
				}

				public static class ServiceStage
				{
					public const string _1033 = "Service Stage";
				}

				public static class SeverityCode
				{
					public const string _1033 = "Severity";
				}

				public static class SLAId
				{
					public const string _1033 = "SLA";
				}

				public static class SLAInvokedId
				{
					public const string _1033 = "Last SLA applied";
				}

				public static class SocialProfileId
				{
					public const string _1033 = "Social Profile";
				}

				public static class StageId
				{
					public const string _1033 = "Stage Id";
				}

				public static class StateCode
				{
					public const string _1033 = "Status";
				}

				public static class StatusCode
				{
					public const string _1033 = "Status Reason";
				}

				public static class SubjectId
				{
					public const string _1033 = "Subject";
				}

				public static class TicketNumber
				{
					public const string _1033 = "Case Number";
				}

				public static class TimeZoneRuleVersionNumber
				{
					public const string _1033 = "Time Zone Rule Version Number";
				}

				public static class Title
				{
					public const string _1033 = "Case Title";
				}

				public static class TransactionCurrencyId
				{
					public const string _1033 = "Currency";
				}

				public static class TraversedPath
				{
					public const string _1033 = "Traversed Path";
				}

				public static class UTCConversionTimeZoneCode
				{
					public const string _1033 = "UTC Conversion Time Zone Code";
				}

				public static class VersionNumber
				{
					public const string _1033 = "Version Number";
				}

			}

			#endregion
		}

		#endregion

		#region Relations

		public static class Relations
		{
			public static class OneToN
			{
				public const string ActivityPartysOfParty = "incident_activity_parties";
				public const string CasesOfExistingCase = "incident_existingcase";
				public const string CasesOfMasterCase = "incident_master_incident";
				public const string CasesOfParentCase = "incident_parent_incident";
			}
			
			public static class NToOne
			{
				public const string CaseAsExistingCase = "incident_existingcase";
				public const string CaseAsMasterCase = "incident_master_incident";
				public const string CaseAsParentCase = "incident_parent_incident";

				public static class Lookups
				{
					public const string CaseAsExistingCase = "existingcase";
					public const string CaseAsMasterCase = "masterid";
					public const string CaseAsParentCase = "parentcaseid";
				}
			}

			public static class NToN
			{

			}
		}

		#endregion

		#endregion
	}

	#endregion

	#region Invoice

	/// <summary>
	/// 'Invoice'.<br />
	/// Order that has been billed.
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract, EntityLogicalName("invoice")]
	public partial class Invoice : GeneratedEntity<Invoice.RelationName>
	{
		
		public Invoice() : 
				base(EntityLogicalName)
		{
		}
		
		public const string DisplayName = "Invoice";
		public const string SchemaName = "Invoice";
		public const string EntityLogicalName = "invoice";
		public const int EntityTypeCode = 1090;
		
		public class RelationName : RelationNameBase
		{
			public RelationName(string name) : base(name)
			{}
		}


		#region Attributes

		[AttributeLogicalName("invoiceid"), DataMember]
		public override System.Guid Id
		{
			get
			{
				return (InvoiceId == null || InvoiceId == Guid.Empty) ? base.Id : InvoiceId.GetValueOrDefault();
			}
			
			set
			{
                if (value == Guid.Empty) {
                    Attributes.Remove("invoiceid");
                    base.Id = value;
                } else {
				    InvoiceId = value;
                }
			}
		}

        /// <summary>
        ///  
		/// 'AccountId'.<br />
        /// Unique identifier of the account with which the invoice is associated.
        /// </summary>
		[AttributeLogicalName("accountid")]
		public Guid? AccountId
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("accountid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("accountid"))
				    value = (EntityReference) backupAttributeCollection["accountid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("AccountId");
                if (value != null)
				    SetAttributeValue("accountid", new EntityReference("account", value.Value));
                else
					SetAttributeValue("accountid", value);
				OnPropertyChanged("AccountId");
			}
		}

        public string AccountIdName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("accountid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("accountid"))
				    value = (EntityReference) backupAttributeCollection["accountid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_name", "account", "accountid", "accountid")]
        public IDictionary<int, string> AccountIdLabels { get; set; }

        /// <summary>
        /// [MaximumLength=80] 
		/// 'BillTo_City'.<br />
        /// Type the city for the customer's billing address.
        /// </summary>
		[AttributeLogicalName("billto_city"), MaxLength(80)]
		public string BillTo_City
		{
			get
			{
				var value = GetAttributeValue<string>("billto_city");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("billto_city"))
				    value = (string) backupAttributeCollection["billto_city"];
			    return value;
			}
			set
			{
				OnPropertyChanging("BillTo_City");
					SetAttributeValue("billto_city", value);
				OnPropertyChanged("BillTo_City");
			}
		}

        /// <summary>
        /// [MaximumLength=1000] 
		/// 'BillTo_Composite'.<br />
        /// Shows the complete Bill To address.
        /// </summary>
		[AttributeLogicalName("billto_composite"), MaxLength(1000)]
		public string BillTo_Composite
		{
			get
			{
				var value = GetAttributeValue<string>("billto_composite");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("billto_composite"))
				    value = (string) backupAttributeCollection["billto_composite"];
			    return value;
			}
			set
			{
				OnPropertyChanging("BillTo_Composite");
					SetAttributeValue("billto_composite", value);
				OnPropertyChanged("BillTo_Composite");
			}
		}

        /// <summary>
        /// [MaximumLength=80] 
		/// 'BillTo_Country'.<br />
        /// Type the country or region for the customer's billing address.
        /// </summary>
		[AttributeLogicalName("billto_country"), MaxLength(80)]
		public string BillTo_Country
		{
			get
			{
				var value = GetAttributeValue<string>("billto_country");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("billto_country"))
				    value = (string) backupAttributeCollection["billto_country"];
			    return value;
			}
			set
			{
				OnPropertyChanging("BillTo_Country");
					SetAttributeValue("billto_country", value);
				OnPropertyChanged("BillTo_Country");
			}
		}

        /// <summary>
        /// [MaximumLength=50] 
		/// 'BillTo_Fax'.<br />
        /// Type the fax number for the customer's billing address.
        /// </summary>
		[AttributeLogicalName("billto_fax"), MaxLength(50)]
		public string BillTo_Fax
		{
			get
			{
				var value = GetAttributeValue<string>("billto_fax");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("billto_fax"))
				    value = (string) backupAttributeCollection["billto_fax"];
			    return value;
			}
			set
			{
				OnPropertyChanging("BillTo_Fax");
					SetAttributeValue("billto_fax", value);
				OnPropertyChanged("BillTo_Fax");
			}
		}

        /// <summary>
        /// [MaximumLength=250] 
		/// 'BillTo_Line1'.<br />
        /// Type the first line of the customer's billing address.
        /// </summary>
		[AttributeLogicalName("billto_line1"), MaxLength(250)]
		public string BillTo_Line1
		{
			get
			{
				var value = GetAttributeValue<string>("billto_line1");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("billto_line1"))
				    value = (string) backupAttributeCollection["billto_line1"];
			    return value;
			}
			set
			{
				OnPropertyChanging("BillTo_Line1");
					SetAttributeValue("billto_line1", value);
				OnPropertyChanged("BillTo_Line1");
			}
		}

        /// <summary>
        /// [MaximumLength=250] 
		/// 'BillTo_Line2'.<br />
        /// Type the second line of the customer's billing address.
        /// </summary>
		[AttributeLogicalName("billto_line2"), MaxLength(250)]
		public string BillTo_Line2
		{
			get
			{
				var value = GetAttributeValue<string>("billto_line2");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("billto_line2"))
				    value = (string) backupAttributeCollection["billto_line2"];
			    return value;
			}
			set
			{
				OnPropertyChanging("BillTo_Line2");
					SetAttributeValue("billto_line2", value);
				OnPropertyChanged("BillTo_Line2");
			}
		}

        /// <summary>
        /// [MaximumLength=250] 
		/// 'BillTo_Line3'.<br />
        /// Type the third line of the billing address.
        /// </summary>
		[AttributeLogicalName("billto_line3"), MaxLength(250)]
		public string BillTo_Line3
		{
			get
			{
				var value = GetAttributeValue<string>("billto_line3");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("billto_line3"))
				    value = (string) backupAttributeCollection["billto_line3"];
			    return value;
			}
			set
			{
				OnPropertyChanging("BillTo_Line3");
					SetAttributeValue("billto_line3", value);
				OnPropertyChanged("BillTo_Line3");
			}
		}

        /// <summary>
        /// [MaximumLength=200] 
		/// 'BillTo_Name'.<br />
        /// Type a name for the customer's billing address, such as "Headquarters" or "Field office", to identify the address.
        /// </summary>
		[AttributeLogicalName("billto_name"), MaxLength(200)]
		public string BillTo_Name
		{
			get
			{
				var value = GetAttributeValue<string>("billto_name");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("billto_name"))
				    value = (string) backupAttributeCollection["billto_name"];
			    return value;
			}
			set
			{
				OnPropertyChanging("BillTo_Name");
					SetAttributeValue("billto_name", value);
				OnPropertyChanged("BillTo_Name");
			}
		}

        /// <summary>
        /// [MaximumLength=20] 
		/// 'BillTo_PostalCode'.<br />
        /// Type the ZIP Code or postal code for the billing address.
        /// </summary>
		[AttributeLogicalName("billto_postalcode"), MaxLength(20)]
		public string BillTo_PostalCode
		{
			get
			{
				var value = GetAttributeValue<string>("billto_postalcode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("billto_postalcode"))
				    value = (string) backupAttributeCollection["billto_postalcode"];
			    return value;
			}
			set
			{
				OnPropertyChanging("BillTo_PostalCode");
					SetAttributeValue("billto_postalcode", value);
				OnPropertyChanged("BillTo_PostalCode");
			}
		}

        /// <summary>
        /// [MaximumLength=50] 
		/// 'BillTo_StateOrProvince'.<br />
        /// Type the state or province for the billing address.
        /// </summary>
		[AttributeLogicalName("billto_stateorprovince"), MaxLength(50)]
		public string BillTo_StateOrProvince
		{
			get
			{
				var value = GetAttributeValue<string>("billto_stateorprovince");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("billto_stateorprovince"))
				    value = (string) backupAttributeCollection["billto_stateorprovince"];
			    return value;
			}
			set
			{
				OnPropertyChanging("BillTo_StateOrProvince");
					SetAttributeValue("billto_stateorprovince", value);
				OnPropertyChanged("BillTo_StateOrProvince");
			}
		}

        /// <summary>
        /// [MaximumLength=50] 
		/// 'BillTo_Telephone'.<br />
        /// Type the phone number for the customer's billing address.
        /// </summary>
		[AttributeLogicalName("billto_telephone"), MaxLength(50)]
		public string BillTo_Telephone
		{
			get
			{
				var value = GetAttributeValue<string>("billto_telephone");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("billto_telephone"))
				    value = (string) backupAttributeCollection["billto_telephone"];
			    return value;
			}
			set
			{
				OnPropertyChanging("BillTo_Telephone");
					SetAttributeValue("billto_telephone", value);
				OnPropertyChanged("BillTo_Telephone");
			}
		}

        /// <summary>
        ///  
		/// 'ContactId'.<br />
        /// Unique identifier of the contact associated with the invoice.
        /// </summary>
		[AttributeLogicalName("contactid")]
		public Guid? ContactId
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("contactid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("contactid"))
				    value = (EntityReference) backupAttributeCollection["contactid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ContactId");
                if (value != null)
				    SetAttributeValue("contactid", new EntityReference("contact", value.Value));
                else
					SetAttributeValue("contactid", value);
				OnPropertyChanged("ContactId");
			}
		}

        public string ContactIdName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("contactid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("contactid"))
				    value = (EntityReference) backupAttributeCollection["contactid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_fullname", "contact", "contactid", "contactid")]
        public IDictionary<int, string> ContactIdLabels { get; set; }

        /// <summary>
        ///  
		/// 'CreatedBy'.<br />
        /// Shows who created the record.
        /// </summary>
		[AttributeLogicalName("createdby")]
		public Guid? CreatedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdby"))
				    value = (EntityReference) backupAttributeCollection["createdby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("CreatedBy");
                if (value != null)
				    SetAttributeValue("createdby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("createdby", value);
				OnPropertyChanged("CreatedBy");
			}
		}

        public string CreatedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdby"))
				    value = (EntityReference) backupAttributeCollection["createdby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_fullname", "systemuser", "systemuserid", "createdby")]
        public IDictionary<int, string> CreatedByLabels { get; set; }

        /// <summary>
        ///  
		/// 'CreatedOn'.<br />
        /// Date and time when the record was created.
        /// </summary>
		[AttributeLogicalName("createdon")]
		public DateTime? CreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("createdon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdon"))
				    value = (DateTime?) backupAttributeCollection["createdon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("CreatedOn");
					SetAttributeValue("createdon", value);
				OnPropertyChanged("CreatedOn");
			}
		}

        /// <summary>
        ///  
		/// 'CreatedOnBehalfBy'.<br />
        /// Shows who created the record on behalf of another user.
        /// </summary>
		[AttributeLogicalName("createdonbehalfby")]
		public Guid? CreatedOnBehalfBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["createdonbehalfby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("CreatedOnBehalfBy");
                if (value != null)
				    SetAttributeValue("createdonbehalfby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("createdonbehalfby", value);
				OnPropertyChanged("CreatedOnBehalfBy");
			}
		}

        public string CreatedOnBehalfByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["createdonbehalfby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_fullname", "systemuser", "systemuserid", "createdonbehalfby")]
        public IDictionary<int, string> CreatedOnBehalfByLabels { get; set; }

        /// <summary>
        /// [Required] 
		/// 'CustomerId'.<br />
        /// Select the customer account or contact to provide a quick link to additional customer details, such as account information, activities, and opportunities.
        /// </summary>
		[AttributeLogicalName("customerid"), Required]
		public EntityReference CustomerId
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("customerid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("customerid"))
				    value = (EntityReference) backupAttributeCollection["customerid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("CustomerId");
					SetAttributeValue("customerid", value);
				OnPropertyChanged("CustomerId");
			}
		}

        public string CustomerIdName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("customerid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("customerid"))
				    value = (EntityReference) backupAttributeCollection["customerid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        public IDictionary<int, string> CustomerIdLabels { get; set; }

        /// <summary>
        ///  
		/// 'DateDelivered'.<br />
        /// Enter the date when the products included in the invoice were delivered.
        /// </summary>
		[AttributeLogicalName("datedelivered")]
		public DateTime? DateDelivered
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("datedelivered");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("datedelivered"))
				    value = (DateTime?) backupAttributeCollection["datedelivered"];
			    return value;
			}
			set
			{
				OnPropertyChanging("DateDelivered");
					SetAttributeValue("datedelivered", value);
				OnPropertyChanged("DateDelivered");
			}
		}

        /// <summary>
        /// [MaximumLength=2000] 
		/// 'Description'.<br />
        /// Type additional information to describe the invoice, such as shipping details or product substitutions.
        /// </summary>
		[AttributeLogicalName("description"), MaxLength(2000)]
		public string Description
		{
			get
			{
				var value = GetAttributeValue<string>("description");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("description"))
				    value = (string) backupAttributeCollection["description"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Description");
					SetAttributeValue("description", value);
				OnPropertyChanged("Description");
			}
		}

        /// <summary>
        /// [Range(0, 1000000000000)] 
		/// 'DiscountAmount'.<br />
        /// Type the discount amount for the invoice if the customer is eligible for special savings.
        /// </summary>
		[AttributeLogicalName("discountamount"), InRange("0", "1000000000000", typeof(decimal))]
		public decimal? DiscountAmount
		{
			get
			{
				var value = GetAttributeValue<Money>("discountamount");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("discountamount"))
				    value = (Money) backupAttributeCollection["discountamount"];
                return value == null ? (decimal?) null : value.Value;
			}
			set
			{
				OnPropertyChanging("DiscountAmount");
                if (value != null)
				    SetAttributeValue("discountamount", new Money(value.Value));
                else
					SetAttributeValue("discountamount", value);
				OnPropertyChanged("DiscountAmount");
			}
		}

        /// <summary>
        /// [Range(-922337203685477, 922337203685477)] 
		/// 'DiscountAmount_Base'.<br />
        /// Value of the Invoice Discount Amount in base currency.
        /// </summary>
		[AttributeLogicalName("discountamount_base"), InRange("-922337203685477", "922337203685477", typeof(decimal))]
		public decimal? DiscountAmount_Base
		{
			get
			{
				var value = GetAttributeValue<Money>("discountamount_base");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("discountamount_base"))
				    value = (Money) backupAttributeCollection["discountamount_base"];
                return value == null ? (decimal?) null : value.Value;
			}
			set
			{
				OnPropertyChanging("DiscountAmount_Base");
                if (value != null)
				    SetAttributeValue("discountamount_base", new Money(value.Value));
                else
					SetAttributeValue("discountamount_base", value);
				OnPropertyChanged("DiscountAmount_Base");
			}
		}

        /// <summary>
        /// [Range(0, 100)] 
		/// 'DiscountPercentage'.<br />
        /// Type the discount rate that should be applied to the Detail Amount field, for use in calculating the Pre-Freight Amount and Total Amount values for the invoice.
        /// </summary>
		[AttributeLogicalName("discountpercentage"), InRange("0", "100", typeof(decimal))]
		public decimal? DiscountPercentage
		{
			get
			{
				var value = GetAttributeValue<decimal?>("discountpercentage");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("discountpercentage"))
				    value = (decimal?) backupAttributeCollection["discountpercentage"];
			    return value;
			}
			set
			{
				OnPropertyChanging("DiscountPercentage");
					SetAttributeValue("discountpercentage", value);
				OnPropertyChanged("DiscountPercentage");
			}
		}

        /// <summary>
        ///  
		/// 'DueDate'.<br />
        /// Enter the date by which the invoice should be paid by the customer.
        /// </summary>
		[AttributeLogicalName("duedate")]
		public DateTime? DueDate
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("duedate");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("duedate"))
				    value = (DateTime?) backupAttributeCollection["duedate"];
			    return value;
			}
			set
			{
				OnPropertyChanging("DueDate");
					SetAttributeValue("duedate", value);
				OnPropertyChanged("DueDate");
			}
		}

        /// <summary>
        /// [MaximumLength=100] 
		/// 'EmailAddress'.<br />
        /// The primary email address for the entity.
        /// </summary>
		[AttributeLogicalName("emailaddress"), MaxLength(100)]
		public string EmailAddress
		{
			get
			{
				var value = GetAttributeValue<string>("emailaddress");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("emailaddress"))
				    value = (string) backupAttributeCollection["emailaddress"];
			    return value;
			}
			set
			{
				OnPropertyChanging("EmailAddress");
					SetAttributeValue("emailaddress", value);
				OnPropertyChanged("EmailAddress");
			}
		}

		[AttributeLogicalName("entityimageid")]
		public Guid? EntityImageId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("entityimageid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("entityimageid"))
				    value = (Guid?) backupAttributeCollection["entityimageid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("EntityImageId");
					SetAttributeValue("entityimageid", value);
				OnPropertyChanged("EntityImageId");
			}
		}

        /// <summary>
        /// [Range(0.0000000001, 100000000000)] 
		/// 'ExchangeRate'.<br />
        /// Shows the conversion rate of the record's currency. The exchange rate is used to convert all money fields in the record from the local currency to the system's default currency.
        /// </summary>
		[AttributeLogicalName("exchangerate"), InRange("0.0000000001", "100000000000", typeof(decimal))]
		public decimal? ExchangeRate
		{
			get
			{
				var value = GetAttributeValue<decimal?>("exchangerate");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("exchangerate"))
				    value = (decimal?) backupAttributeCollection["exchangerate"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ExchangeRate");
					SetAttributeValue("exchangerate", value);
				OnPropertyChanged("ExchangeRate");
			}
		}

        /// <summary>
        /// [Range(0, 1000000000000)] 
		/// 'FreightAmount'.<br />
        /// Type the cost of freight or shipping for the products included in the invoice for use in calculating the total amount due.
        /// </summary>
		[AttributeLogicalName("freightamount"), InRange("0", "1000000000000", typeof(decimal))]
		public decimal? FreightAmount
		{
			get
			{
				var value = GetAttributeValue<Money>("freightamount");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("freightamount"))
				    value = (Money) backupAttributeCollection["freightamount"];
                return value == null ? (decimal?) null : value.Value;
			}
			set
			{
				OnPropertyChanging("FreightAmount");
                if (value != null)
				    SetAttributeValue("freightamount", new Money(value.Value));
                else
					SetAttributeValue("freightamount", value);
				OnPropertyChanged("FreightAmount");
			}
		}

        /// <summary>
        /// [Range(-922337203685477, 922337203685477)] 
		/// 'FreightAmount_Base'.<br />
        /// Value of the Freight Amount in base currency.
        /// </summary>
		[AttributeLogicalName("freightamount_base"), InRange("-922337203685477", "922337203685477", typeof(decimal))]
		public decimal? FreightAmount_Base
		{
			get
			{
				var value = GetAttributeValue<Money>("freightamount_base");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("freightamount_base"))
				    value = (Money) backupAttributeCollection["freightamount_base"];
                return value == null ? (decimal?) null : value.Value;
			}
			set
			{
				OnPropertyChanging("FreightAmount_Base");
                if (value != null)
				    SetAttributeValue("freightamount_base", new Money(value.Value));
                else
					SetAttributeValue("freightamount_base", value);
				OnPropertyChanged("FreightAmount_Base");
			}
		}

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'ImportSequenceNumber'.<br />
        /// Sequence number of the import that created this record.
        /// </summary>
		[AttributeLogicalName("importsequencenumber"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? ImportSequenceNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("importsequencenumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("importsequencenumber"))
				    value = (int?) backupAttributeCollection["importsequencenumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ImportSequenceNumber");
					SetAttributeValue("importsequencenumber", value);
				OnPropertyChanged("ImportSequenceNumber");
			}
		}

        /// <summary>
        ///  
		/// 'InvoiceId'.<br />
        /// Unique identifier of the invoice.
        /// </summary>
		[AttributeLogicalName("invoiceid")]
		public Guid? InvoiceId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("invoiceid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("invoiceid"))
				    value = (Guid?) backupAttributeCollection["invoiceid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("InvoiceId");
                if (value != null)
					SetAttributeValue("invoiceid", value);
				if (value != null)
					base.Id = value.Value;
				else
					Id = System.Guid.Empty;
				OnPropertyChanged("InvoiceId");
			}
		}

        /// <summary>
        /// [MaximumLength=100] 
		/// 'InvoiceNumber'.<br />
        /// Shows the identifying number or code of the invoice.
        /// </summary>
		[AttributeLogicalName("invoicenumber"), MaxLength(100)]
		public string InvoiceNumber
		{
			get
			{
				var value = GetAttributeValue<string>("invoicenumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("invoicenumber"))
				    value = (string) backupAttributeCollection["invoicenumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("InvoiceNumber");
					SetAttributeValue("invoicenumber", value);
				OnPropertyChanged("InvoiceNumber");
			}
		}

        /// <summary>
        /// [Required] 
		/// 'IsPriceLocked'.<br />
        /// Select whether prices specified on the invoice are locked from any further updates.
        /// </summary>
		[AttributeLogicalName("ispricelocked"), Required]
		public bool? IsPriceLocked
		{
			get
			{
				var value = GetAttributeValue<bool?>("ispricelocked");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ispricelocked"))
				    value = (bool?) backupAttributeCollection["ispricelocked"];
			    return value;
			}
			set
			{
				OnPropertyChanging("IsPriceLocked");
					SetAttributeValue("ispricelocked", value);
				OnPropertyChanged("IsPriceLocked");
			}
		}

        public IDictionary<int, string> IsPriceLockedLabels
        {
		    get
		    {
                var value = GetAttributeValue<bool?>("ispricelocked");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ispricelocked"))
				    value = (bool?) backupAttributeCollection["ispricelocked"];
                if (value == null)
                    return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("ispricelocked", (bool) value ? 1 : 0, 1033) },
                        };
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'LastBackofficeSubmit'.<br />
        /// Enter the date and time when the invoice was last submitted to an accounting or ERP system for processing.
        /// </summary>
		[AttributeLogicalName("lastbackofficesubmit")]
		public DateTime? LastBackofficeSubmit
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("lastbackofficesubmit");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("lastbackofficesubmit"))
				    value = (DateTime?) backupAttributeCollection["lastbackofficesubmit"];
			    return value;
			}
			set
			{
				OnPropertyChanging("LastBackofficeSubmit");
					SetAttributeValue("lastbackofficesubmit", value);
				OnPropertyChanged("LastBackofficeSubmit");
			}
		}

        /// <summary>
        ///  
		/// 'LastOnHoldTime'.<br />
        /// Contains the date time stamp of the last on hold time.
        /// </summary>
		[AttributeLogicalName("lastonholdtime")]
		public DateTime? LastOnHoldTime
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("lastonholdtime");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("lastonholdtime"))
				    value = (DateTime?) backupAttributeCollection["lastonholdtime"];
			    return value;
			}
			set
			{
				OnPropertyChanging("LastOnHoldTime");
					SetAttributeValue("lastonholdtime", value);
				OnPropertyChanged("LastOnHoldTime");
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedBy'.<br />
        /// Shows who last updated the record.
        /// </summary>
		[AttributeLogicalName("modifiedby")]
		public Guid? ModifiedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedby"))
				    value = (EntityReference) backupAttributeCollection["modifiedby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ModifiedBy");
                if (value != null)
				    SetAttributeValue("modifiedby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("modifiedby", value);
				OnPropertyChanged("ModifiedBy");
			}
		}

        public string ModifiedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedby"))
				    value = (EntityReference) backupAttributeCollection["modifiedby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_fullname", "systemuser", "systemuserid", "modifiedby")]
        public IDictionary<int, string> ModifiedByLabels { get; set; }

        /// <summary>
        ///  
		/// 'ModifiedOn'.<br />
        /// Date and time when the record was modified.
        /// </summary>
		[AttributeLogicalName("modifiedon")]
		public DateTime? ModifiedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("modifiedon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedon"))
				    value = (DateTime?) backupAttributeCollection["modifiedon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ModifiedOn");
					SetAttributeValue("modifiedon", value);
				OnPropertyChanged("ModifiedOn");
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedOnBehalfBy'.<br />
        /// Shows who last updated the record on behalf of another user.
        /// </summary>
		[AttributeLogicalName("modifiedonbehalfby")]
		public Guid? ModifiedOnBehalfBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["modifiedonbehalfby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ModifiedOnBehalfBy");
                if (value != null)
				    SetAttributeValue("modifiedonbehalfby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("modifiedonbehalfby", value);
				OnPropertyChanged("ModifiedOnBehalfBy");
			}
		}

        public string ModifiedOnBehalfByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["modifiedonbehalfby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_fullname", "systemuser", "systemuserid", "modifiedonbehalfby")]
        public IDictionary<int, string> ModifiedOnBehalfByLabels { get; set; }

        /// <summary>
        /// [Range(-1000000000, 1000000000)] 
		/// 'msdyn_AmountDue'.<br />
        /// Enter the amount due on this invoice.
        /// </summary>
		[AttributeLogicalName("msdyn_amountdue"), InRange("-1000000000", "1000000000", typeof(decimal))]
		public decimal? msdyn_AmountDue
		{
			get
			{
				var value = GetAttributeValue<Money>("msdyn_amountdue");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("msdyn_amountdue"))
				    value = (Money) backupAttributeCollection["msdyn_amountdue"];
                return value == null ? (decimal?) null : value.Value;
			}
			set
			{
				OnPropertyChanging("msdyn_AmountDue");
                if (value != null)
				    SetAttributeValue("msdyn_amountdue", new Money(value.Value));
                else
					SetAttributeValue("msdyn_amountdue", value);
				OnPropertyChanged("msdyn_AmountDue");
			}
		}

        /// <summary>
        /// [Range(-922337203685477, 922337203685477)] 
		/// 'msdyn_amountdue_Base'.<br />
        /// Value of the Amount Due in base currency.
        /// </summary>
		[AttributeLogicalName("msdyn_amountdue_base"), InRange("-922337203685477", "922337203685477", typeof(decimal))]
		public decimal? msdyn_amountdue_Base
		{
			get
			{
				var value = GetAttributeValue<Money>("msdyn_amountdue_base");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("msdyn_amountdue_base"))
				    value = (Money) backupAttributeCollection["msdyn_amountdue_base"];
                return value == null ? (decimal?) null : value.Value;
			}
			set
			{
				OnPropertyChanging("msdyn_amountdue_Base");
                if (value != null)
				    SetAttributeValue("msdyn_amountdue_base", new Money(value.Value));
                else
					SetAttributeValue("msdyn_amountdue_base", value);
				OnPropertyChanged("msdyn_amountdue_Base");
			}
		}

        /// <summary>
        ///  
		/// 'msdyn_HasCorrections'.<br />
        /// Indicates if this invoice contains corrections to previous invoices.
        /// </summary>
		[AttributeLogicalName("msdyn_hascorrections")]
		public bool? msdyn_HasCorrections
		{
			get
			{
				var value = GetAttributeValue<bool?>("msdyn_hascorrections");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("msdyn_hascorrections"))
				    value = (bool?) backupAttributeCollection["msdyn_hascorrections"];
			    return value;
			}
			set
			{
				OnPropertyChanging("msdyn_HasCorrections");
					SetAttributeValue("msdyn_hascorrections", value);
				OnPropertyChanged("msdyn_HasCorrections");
			}
		}

        public IDictionary<int, string> msdyn_HasCorrectionsLabels
        {
		    get
		    {
                var value = GetAttributeValue<bool?>("msdyn_hascorrections");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("msdyn_hascorrections"))
				    value = (bool?) backupAttributeCollection["msdyn_hascorrections"];
                if (value == null)
                    return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("msdyn_hascorrections", (bool) value ? 1 : 0, 1033) },
                        };
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'msdyn_InvoiceDate'.<br />
        /// Document date of the Invoice for use in calculation of payment due date
        /// </summary>
		[AttributeLogicalName("msdyn_invoicedate")]
		public DateTime? msdyn_InvoiceDate
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("msdyn_invoicedate");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("msdyn_invoicedate"))
				    value = (DateTime?) backupAttributeCollection["msdyn_invoicedate"];
			    return value;
			}
			set
			{
				OnPropertyChanging("msdyn_InvoiceDate");
					SetAttributeValue("msdyn_invoicedate", value);
				OnPropertyChanged("msdyn_InvoiceDate");
			}
		}

        /// <summary>
        ///  
		/// 'msdyn_OrderType'.<br />
        /// Whether the Invoice is for an Item-based or a service maintainence-based sale
        /// </summary>
		[AttributeLogicalName("msdyn_ordertype")]
		public msdyn_OrderTypeEnum? msdyn_OrderType
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("msdyn_ordertype");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("msdyn_ordertype"))
				    value = (OptionSetValue) backupAttributeCollection["msdyn_ordertype"];
                return value == null ? (msdyn_OrderTypeEnum?) null : (msdyn_OrderTypeEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("msdyn_OrderType");
                if (value != null)
				    SetAttributeValue("msdyn_ordertype", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("msdyn_ordertype", value);
				OnPropertyChanged("msdyn_OrderType");
			}
		}

        public IDictionary<int, string> msdyn_OrderTypeLabels
        {
		    get
		    {
                var value = GetAttributeValue<OptionSetValue>("msdyn_ordertype");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("msdyn_ordertype"))
				    value = (OptionSetValue) backupAttributeCollection["msdyn_ordertype"];
                if (value == null)
                    return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("msdyn_ordertype", value.Value, 1033) },
                        };
            }
            set
            {}
        }

        /// <summary>
        /// [Required] 
		/// 'msdyn_projectinvoicestatus'.<br />
        /// Project specific status
        /// </summary>
		[AttributeLogicalName("msdyn_projectinvoicestatus"), Required]
		public msdyn_projectinvoicestatusEnum? msdyn_projectinvoicestatus
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("msdyn_projectinvoicestatus");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("msdyn_projectinvoicestatus"))
				    value = (OptionSetValue) backupAttributeCollection["msdyn_projectinvoicestatus"];
                return value == null ? (msdyn_projectinvoicestatusEnum?) null : (msdyn_projectinvoicestatusEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("msdyn_projectinvoicestatus");
                if (value != null)
				    SetAttributeValue("msdyn_projectinvoicestatus", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("msdyn_projectinvoicestatus", value);
				OnPropertyChanged("msdyn_projectinvoicestatus");
			}
		}

        public IDictionary<int, string> msdyn_projectinvoicestatusLabels
        {
		    get
		    {
                var value = GetAttributeValue<OptionSetValue>("msdyn_projectinvoicestatus");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("msdyn_projectinvoicestatus"))
				    value = (OptionSetValue) backupAttributeCollection["msdyn_projectinvoicestatus"];
                if (value == null)
                    return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("msdyn_projectinvoicestatus", value.Value, 1033) },
                        };
            }
            set
            {}
        }

        /// <summary>
        /// [Required][MaximumLength=300] 
		/// 'Name'.<br />
        /// Type a descriptive name for the invoice.
        /// </summary>
		[AttributeLogicalName("name"), Required, MaxLength(300)]
		public string Name
		{
			get
			{
				var value = GetAttributeValue<string>("name");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("name"))
				    value = (string) backupAttributeCollection["name"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Name");
					SetAttributeValue("name", value);
				OnPropertyChanged("Name");
			}
		}

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'OnHoldTime'.<br />
        /// Shows the duration in minutes for which the invoice was on hold.
        /// </summary>
		[AttributeLogicalName("onholdtime"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? OnHoldTime
		{
			get
			{
				var value = GetAttributeValue<int?>("onholdtime");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("onholdtime"))
				    value = (int?) backupAttributeCollection["onholdtime"];
			    return value;
			}
			set
			{
				OnPropertyChanging("OnHoldTime");
					SetAttributeValue("onholdtime", value);
				OnPropertyChanged("OnHoldTime");
			}
		}

        /// <summary>
        ///  
		/// 'OpportunityId'.<br />
        /// Choose the opportunity that the invoice is related to for reporting and analytics.
        /// </summary>
		[AttributeLogicalName("opportunityid")]
		public Guid? OpportunityId
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("opportunityid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("opportunityid"))
				    value = (EntityReference) backupAttributeCollection["opportunityid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OpportunityId");
                if (value != null)
				    SetAttributeValue("opportunityid", new EntityReference("opportunity", value.Value));
                else
					SetAttributeValue("opportunityid", value);
				OnPropertyChanged("OpportunityId");
			}
		}

        public string OpportunityIdName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("opportunityid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("opportunityid"))
				    value = (EntityReference) backupAttributeCollection["opportunityid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_name", "opportunity", "opportunityid", "opportunityid")]
        public IDictionary<int, string> OpportunityIdLabels { get; set; }

        /// <summary>
        ///  
		/// 'OverriddenCreatedOn'.<br />
        /// Date and time that the record was migrated.
        /// </summary>
		[AttributeLogicalName("overriddencreatedon")]
		public DateTime? OverriddenCreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("overriddencreatedon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("overriddencreatedon"))
				    value = (DateTime?) backupAttributeCollection["overriddencreatedon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("OverriddenCreatedOn");
					SetAttributeValue("overriddencreatedon", value);
				OnPropertyChanged("OverriddenCreatedOn");
			}
		}

        /// <summary>
        ///  
		/// 'OwnerId'.<br />
        /// Owner Id
        /// </summary>
		[AttributeLogicalName("ownerid")]
		public EntityReference OwnerId
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ownerid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ownerid"))
				    value = (EntityReference) backupAttributeCollection["ownerid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("OwnerId");
					SetAttributeValue("ownerid", value);
				OnPropertyChanged("OwnerId");
			}
		}

        public string OwnerIdName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ownerid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ownerid"))
				    value = (EntityReference) backupAttributeCollection["ownerid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        public IDictionary<int, string> OwnerIdLabels { get; set; }

        /// <summary>
        ///  
		/// 'OwningBusinessUnit'.<br />
        /// Unique identifier for the business unit that owns the record
        /// </summary>
		[AttributeLogicalName("owningbusinessunit")]
		public Guid? OwningBusinessUnit
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owningbusinessunit");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningbusinessunit"))
				    value = (EntityReference) backupAttributeCollection["owningbusinessunit"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningBusinessUnit");
                if (value != null)
				    SetAttributeValue("owningbusinessunit", new EntityReference("businessunit", value.Value));
                else
					SetAttributeValue("owningbusinessunit", value);
				OnPropertyChanged("OwningBusinessUnit");
			}
		}

        public string OwningBusinessUnitName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owningbusinessunit");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningbusinessunit"))
				    value = (EntityReference) backupAttributeCollection["owningbusinessunit"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_name", "businessunit", "businessunitid", "owningbusinessunit")]
        public IDictionary<int, string> OwningBusinessUnitLabels { get; set; }

        /// <summary>
        ///  
		/// 'OwningTeam'.<br />
        /// Unique identifier for the team that owns the record.
        /// </summary>
		[AttributeLogicalName("owningteam")]
		public Guid? OwningTeam
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owningteam");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningteam"))
				    value = (EntityReference) backupAttributeCollection["owningteam"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningTeam");
                if (value != null)
				    SetAttributeValue("owningteam", new EntityReference("team", value.Value));
                else
					SetAttributeValue("owningteam", value);
				OnPropertyChanged("OwningTeam");
			}
		}

        public string OwningTeamName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owningteam");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningteam"))
				    value = (EntityReference) backupAttributeCollection["owningteam"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_name", "team", "teamid", "owningteam")]
        public IDictionary<int, string> OwningTeamLabels { get; set; }

        /// <summary>
        ///  
		/// 'OwningUser'.<br />
        /// Unique identifier for the user that owns the record.
        /// </summary>
		[AttributeLogicalName("owninguser")]
		public Guid? OwningUser
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owninguser");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owninguser"))
				    value = (EntityReference) backupAttributeCollection["owninguser"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningUser");
                if (value != null)
				    SetAttributeValue("owninguser", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("owninguser", value);
				OnPropertyChanged("OwningUser");
			}
		}

        public string OwningUserName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owninguser");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owninguser"))
				    value = (EntityReference) backupAttributeCollection["owninguser"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_fullname", "systemuser", "systemuserid", "owninguser")]
        public IDictionary<int, string> OwningUserLabels { get; set; }

        /// <summary>
        ///  
		/// 'PaymentTermsCode'.<br />
        /// Select the payment terms to indicate when the customer needs to pay the total amount.
        /// </summary>
		[AttributeLogicalName("paymenttermscode")]
		public PaymentTermsCodeEnum? PaymentTermsCode
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("paymenttermscode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("paymenttermscode"))
				    value = (OptionSetValue) backupAttributeCollection["paymenttermscode"];
                return value == null ? (PaymentTermsCodeEnum?) null : (PaymentTermsCodeEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("PaymentTermsCode");
                if (value != null)
				    SetAttributeValue("paymenttermscode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("paymenttermscode", value);
				OnPropertyChanged("PaymentTermsCode");
			}
		}

        public IDictionary<int, string> PaymentTermsCodeLabels
        {
		    get
		    {
                var value = GetAttributeValue<OptionSetValue>("paymenttermscode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("paymenttermscode"))
				    value = (OptionSetValue) backupAttributeCollection["paymenttermscode"];
                if (value == null)
                    return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("paymenttermscode", value.Value, 1033) },
                        };
            }
            set
            {}
        }

        /// <summary>
        /// [Required] 
		/// 'PriceLevelId'.<br />
        /// Choose the price list associated with this record to make sure the products associated with the campaign are offered at the correct prices.
        /// </summary>
		[AttributeLogicalName("pricelevelid"), Required]
		public Guid? PriceLevelId
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("pricelevelid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("pricelevelid"))
				    value = (EntityReference) backupAttributeCollection["pricelevelid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("PriceLevelId");
                if (value != null)
				    SetAttributeValue("pricelevelid", new EntityReference("pricelevel", value.Value));
                else
					SetAttributeValue("pricelevelid", value);
				OnPropertyChanged("PriceLevelId");
			}
		}

        public string PriceLevelIdName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("pricelevelid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("pricelevelid"))
				    value = (EntityReference) backupAttributeCollection["pricelevelid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_name", "pricelevel", "pricelevelid", "pricelevelid")]
        public IDictionary<int, string> PriceLevelIdLabels { get; set; }

        /// <summary>
        ///  
		/// 'PricingErrorCode'.<br />
        /// Type of pricing error for the invoice.
        /// </summary>
		[AttributeLogicalName("pricingerrorcode")]
		public PricingErrorCodeEnum? PricingErrorCode
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("pricingerrorcode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("pricingerrorcode"))
				    value = (OptionSetValue) backupAttributeCollection["pricingerrorcode"];
                return value == null ? (PricingErrorCodeEnum?) null : (PricingErrorCodeEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("PricingErrorCode");
                if (value != null)
				    SetAttributeValue("pricingerrorcode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("pricingerrorcode", value);
				OnPropertyChanged("PricingErrorCode");
			}
		}

        public IDictionary<int, string> PricingErrorCodeLabels
        {
		    get
		    {
                var value = GetAttributeValue<OptionSetValue>("pricingerrorcode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("pricingerrorcode"))
				    value = (OptionSetValue) backupAttributeCollection["pricingerrorcode"];
                if (value == null)
                    return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("pricingerrorcode", value.Value, 1033) },
                        };
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'PriorityCode'.<br />
        /// Select the priority so that preferred customers or critical issues are handled quickly.
        /// </summary>
		[AttributeLogicalName("prioritycode")]
		public PriorityCodeEnum? PriorityCode
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("prioritycode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("prioritycode"))
				    value = (OptionSetValue) backupAttributeCollection["prioritycode"];
                return value == null ? (PriorityCodeEnum?) null : (PriorityCodeEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("PriorityCode");
                if (value != null)
				    SetAttributeValue("prioritycode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("prioritycode", value);
				OnPropertyChanged("PriorityCode");
			}
		}

        public IDictionary<int, string> PriorityCodeLabels
        {
		    get
		    {
                var value = GetAttributeValue<OptionSetValue>("prioritycode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("prioritycode"))
				    value = (OptionSetValue) backupAttributeCollection["prioritycode"];
                if (value == null)
                    return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("prioritycode", value.Value, 1033) },
                        };
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'ProcessId'.<br />
        /// Contains the id of the process associated with the entity.
        /// </summary>
		[AttributeLogicalName("processid")]
		public Guid? ProcessId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("processid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("processid"))
				    value = (Guid?) backupAttributeCollection["processid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ProcessId");
					SetAttributeValue("processid", value);
				OnPropertyChanged("ProcessId");
			}
		}

        /// <summary>
        ///  
		/// 'SalesOrderId'.<br />
        /// Choose the order related to the invoice to make sure the order is fulfilled and invoiced correctly.
        /// </summary>
		[AttributeLogicalName("salesorderid")]
		public Guid? SalesOrderId
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("salesorderid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("salesorderid"))
				    value = (EntityReference) backupAttributeCollection["salesorderid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("SalesOrderId");
                if (value != null)
				    SetAttributeValue("salesorderid", new EntityReference("salesorder", value.Value));
                else
					SetAttributeValue("salesorderid", value);
				OnPropertyChanged("SalesOrderId");
			}
		}

        public string SalesOrderIdName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("salesorderid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("salesorderid"))
				    value = (EntityReference) backupAttributeCollection["salesorderid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_name", "salesorder", "salesorderid", "salesorderid")]
        public IDictionary<int, string> SalesOrderIdLabels { get; set; }

        /// <summary>
        ///  
		/// 'ShippingMethodCode'.<br />
        /// Select a shipping method for deliveries sent to this address.
        /// </summary>
		[AttributeLogicalName("shippingmethodcode")]
		public ShippingMethodCodeEnum? ShippingMethodCode
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("shippingmethodcode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("shippingmethodcode"))
				    value = (OptionSetValue) backupAttributeCollection["shippingmethodcode"];
                return value == null ? (ShippingMethodCodeEnum?) null : (ShippingMethodCodeEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("ShippingMethodCode");
                if (value != null)
				    SetAttributeValue("shippingmethodcode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("shippingmethodcode", value);
				OnPropertyChanged("ShippingMethodCode");
			}
		}

        public IDictionary<int, string> ShippingMethodCodeLabels
        {
		    get
		    {
                var value = GetAttributeValue<OptionSetValue>("shippingmethodcode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("shippingmethodcode"))
				    value = (OptionSetValue) backupAttributeCollection["shippingmethodcode"];
                if (value == null)
                    return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("shippingmethodcode", value.Value, 1033) },
                        };
            }
            set
            {}
        }

        /// <summary>
        /// [MaximumLength=80] 
		/// 'ShipTo_City'.<br />
        /// Type the city for the customer's shipping address.
        /// </summary>
		[AttributeLogicalName("shipto_city"), MaxLength(80)]
		public string ShipTo_City
		{
			get
			{
				var value = GetAttributeValue<string>("shipto_city");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("shipto_city"))
				    value = (string) backupAttributeCollection["shipto_city"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ShipTo_City");
					SetAttributeValue("shipto_city", value);
				OnPropertyChanged("ShipTo_City");
			}
		}

        /// <summary>
        /// [MaximumLength=1000] 
		/// 'ShipTo_Composite'.<br />
        /// Shows the complete Ship To address.
        /// </summary>
		[AttributeLogicalName("shipto_composite"), MaxLength(1000)]
		public string ShipTo_Composite
		{
			get
			{
				var value = GetAttributeValue<string>("shipto_composite");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("shipto_composite"))
				    value = (string) backupAttributeCollection["shipto_composite"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ShipTo_Composite");
					SetAttributeValue("shipto_composite", value);
				OnPropertyChanged("ShipTo_Composite");
			}
		}

        /// <summary>
        /// [MaximumLength=80] 
		/// 'ShipTo_Country'.<br />
        /// Type the country or region for the customer's shipping address.
        /// </summary>
		[AttributeLogicalName("shipto_country"), MaxLength(80)]
		public string ShipTo_Country
		{
			get
			{
				var value = GetAttributeValue<string>("shipto_country");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("shipto_country"))
				    value = (string) backupAttributeCollection["shipto_country"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ShipTo_Country");
					SetAttributeValue("shipto_country", value);
				OnPropertyChanged("ShipTo_Country");
			}
		}

        /// <summary>
        /// [MaximumLength=50] 
		/// 'ShipTo_Fax'.<br />
        /// Type the fax number for the customer's shipping address.
        /// </summary>
		[AttributeLogicalName("shipto_fax"), MaxLength(50)]
		public string ShipTo_Fax
		{
			get
			{
				var value = GetAttributeValue<string>("shipto_fax");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("shipto_fax"))
				    value = (string) backupAttributeCollection["shipto_fax"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ShipTo_Fax");
					SetAttributeValue("shipto_fax", value);
				OnPropertyChanged("ShipTo_Fax");
			}
		}

        /// <summary>
        ///  
		/// 'ShipTo_FreightTermsCode'.<br />
        /// Select the freight terms to make sure shipping orders are processed correctly.
        /// </summary>
		[AttributeLogicalName("shipto_freighttermscode")]
		public ShipTo_FreightTermsCodeEnum? ShipTo_FreightTermsCode
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("shipto_freighttermscode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("shipto_freighttermscode"))
				    value = (OptionSetValue) backupAttributeCollection["shipto_freighttermscode"];
                return value == null ? (ShipTo_FreightTermsCodeEnum?) null : (ShipTo_FreightTermsCodeEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("ShipTo_FreightTermsCode");
                if (value != null)
				    SetAttributeValue("shipto_freighttermscode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("shipto_freighttermscode", value);
				OnPropertyChanged("ShipTo_FreightTermsCode");
			}
		}

        public IDictionary<int, string> ShipTo_FreightTermsCodeLabels
        {
		    get
		    {
                var value = GetAttributeValue<OptionSetValue>("shipto_freighttermscode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("shipto_freighttermscode"))
				    value = (OptionSetValue) backupAttributeCollection["shipto_freighttermscode"];
                if (value == null)
                    return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("shipto_freighttermscode", value.Value, 1033) },
                        };
            }
            set
            {}
        }

        /// <summary>
        /// [MaximumLength=250] 
		/// 'ShipTo_Line1'.<br />
        /// Type the first line of the customer's shipping address.
        /// </summary>
		[AttributeLogicalName("shipto_line1"), MaxLength(250)]
		public string ShipTo_Line1
		{
			get
			{
				var value = GetAttributeValue<string>("shipto_line1");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("shipto_line1"))
				    value = (string) backupAttributeCollection["shipto_line1"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ShipTo_Line1");
					SetAttributeValue("shipto_line1", value);
				OnPropertyChanged("ShipTo_Line1");
			}
		}

        /// <summary>
        /// [MaximumLength=250] 
		/// 'ShipTo_Line2'.<br />
        /// Type the second line of the customer's shipping address.
        /// </summary>
		[AttributeLogicalName("shipto_line2"), MaxLength(250)]
		public string ShipTo_Line2
		{
			get
			{
				var value = GetAttributeValue<string>("shipto_line2");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("shipto_line2"))
				    value = (string) backupAttributeCollection["shipto_line2"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ShipTo_Line2");
					SetAttributeValue("shipto_line2", value);
				OnPropertyChanged("ShipTo_Line2");
			}
		}

        /// <summary>
        /// [MaximumLength=250] 
		/// 'ShipTo_Line3'.<br />
        /// Type the third line of the shipping address.
        /// </summary>
		[AttributeLogicalName("shipto_line3"), MaxLength(250)]
		public string ShipTo_Line3
		{
			get
			{
				var value = GetAttributeValue<string>("shipto_line3");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("shipto_line3"))
				    value = (string) backupAttributeCollection["shipto_line3"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ShipTo_Line3");
					SetAttributeValue("shipto_line3", value);
				OnPropertyChanged("ShipTo_Line3");
			}
		}

        /// <summary>
        /// [MaximumLength=200] 
		/// 'ShipTo_Name'.<br />
        /// Type a name for the customer's shipping address, such as "Headquarters" or "Field office",  to identify the address.
        /// </summary>
		[AttributeLogicalName("shipto_name"), MaxLength(200)]
		public string ShipTo_Name
		{
			get
			{
				var value = GetAttributeValue<string>("shipto_name");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("shipto_name"))
				    value = (string) backupAttributeCollection["shipto_name"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ShipTo_Name");
					SetAttributeValue("shipto_name", value);
				OnPropertyChanged("ShipTo_Name");
			}
		}

        /// <summary>
        /// [MaximumLength=20] 
		/// 'ShipTo_PostalCode'.<br />
        /// Type the ZIP Code or postal code for the shipping address.
        /// </summary>
		[AttributeLogicalName("shipto_postalcode"), MaxLength(20)]
		public string ShipTo_PostalCode
		{
			get
			{
				var value = GetAttributeValue<string>("shipto_postalcode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("shipto_postalcode"))
				    value = (string) backupAttributeCollection["shipto_postalcode"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ShipTo_PostalCode");
					SetAttributeValue("shipto_postalcode", value);
				OnPropertyChanged("ShipTo_PostalCode");
			}
		}

        /// <summary>
        /// [MaximumLength=50] 
		/// 'ShipTo_StateOrProvince'.<br />
        /// Type the state or province for the shipping address.
        /// </summary>
		[AttributeLogicalName("shipto_stateorprovince"), MaxLength(50)]
		public string ShipTo_StateOrProvince
		{
			get
			{
				var value = GetAttributeValue<string>("shipto_stateorprovince");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("shipto_stateorprovince"))
				    value = (string) backupAttributeCollection["shipto_stateorprovince"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ShipTo_StateOrProvince");
					SetAttributeValue("shipto_stateorprovince", value);
				OnPropertyChanged("ShipTo_StateOrProvince");
			}
		}

        /// <summary>
        /// [MaximumLength=50] 
		/// 'ShipTo_Telephone'.<br />
        /// Type the phone number for the customer's shipping address.
        /// </summary>
		[AttributeLogicalName("shipto_telephone"), MaxLength(50)]
		public string ShipTo_Telephone
		{
			get
			{
				var value = GetAttributeValue<string>("shipto_telephone");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("shipto_telephone"))
				    value = (string) backupAttributeCollection["shipto_telephone"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ShipTo_Telephone");
					SetAttributeValue("shipto_telephone", value);
				OnPropertyChanged("ShipTo_Telephone");
			}
		}

        /// <summary>
        ///  
		/// 'SLAId'.<br />
        /// Choose the service level agreement (SLA) that you want to apply to the invoice record.
        /// </summary>
		[AttributeLogicalName("slaid")]
		public Guid? SLAId
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("slaid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("slaid"))
				    value = (EntityReference) backupAttributeCollection["slaid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("SLAId");
                if (value != null)
				    SetAttributeValue("slaid", new EntityReference("sla", value.Value));
                else
					SetAttributeValue("slaid", value);
				OnPropertyChanged("SLAId");
			}
		}

        public string SLAIdName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("slaid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("slaid"))
				    value = (EntityReference) backupAttributeCollection["slaid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_name", "sla", "slaid", "slaid")]
        public IDictionary<int, string> SLAIdLabels { get; set; }

        /// <summary>
        ///  
		/// 'SLAInvokedId'.<br />
        /// Last SLA that was applied to this invoice. This field is for internal use only.
        /// </summary>
		[AttributeLogicalName("slainvokedid")]
		public Guid? SLAInvokedId
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("slainvokedid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("slainvokedid"))
				    value = (EntityReference) backupAttributeCollection["slainvokedid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("SLAInvokedId");
                if (value != null)
				    SetAttributeValue("slainvokedid", new EntityReference("sla", value.Value));
                else
					SetAttributeValue("slainvokedid", value);
				OnPropertyChanged("SLAInvokedId");
			}
		}

        public string SLAInvokedIdName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("slainvokedid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("slainvokedid"))
				    value = (EntityReference) backupAttributeCollection["slainvokedid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_name", "sla", "slaid", "slainvokedid")]
        public IDictionary<int, string> SLAInvokedIdLabels { get; set; }

        /// <summary>
        ///  
		/// 'StageId'.<br />
        /// Contains the id of the stage where the entity is located.
        /// </summary>
		[AttributeLogicalName("stageid")]
		public Guid? StageId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("stageid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("stageid"))
				    value = (Guid?) backupAttributeCollection["stageid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("StageId");
					SetAttributeValue("stageid", value);
				OnPropertyChanged("StageId");
			}
		}

        /// <summary>
        ///  
		/// 'StateCode'.<br />
        /// Shows whether the invoice is active, paid, or canceled. Paid and canceled invoices are read-only and can't be edited unless they are reactivated.
        /// </summary>
		[AttributeLogicalName("statecode")]
		public StateCodeEnum? StateCode
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("statecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("statecode"))
				    value = (OptionSetValue) backupAttributeCollection["statecode"];
                return value == null ? (StateCodeEnum?) null : (StateCodeEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("StateCode");
                if (value != null)
				    SetAttributeValue("statecode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("statecode", value);
				OnPropertyChanged("StateCode");
			}
		}

        public IDictionary<int, string> StateCodeLabels
        {
		    get
		    {
                var value = GetAttributeValue<OptionSetValue>("statecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("statecode"))
				    value = (OptionSetValue) backupAttributeCollection["statecode"];
                if (value == null)
                    return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("statecode", value.Value, 1033) },
                        };
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'StatusCode'.<br />
        /// Select the invoice's status.
        /// </summary>
		[AttributeLogicalName("statuscode")]
		public StatusCodeEnum? StatusCode
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("statuscode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("statuscode"))
				    value = (OptionSetValue) backupAttributeCollection["statuscode"];
                return value == null ? (StatusCodeEnum?) null : (StatusCodeEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("StatusCode");
                if (value != null)
				    SetAttributeValue("statuscode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("statuscode", value);
				OnPropertyChanged("StatusCode");
			}
		}

        public IDictionary<int, string> StatusCodeLabels
        {
		    get
		    {
                var value = GetAttributeValue<OptionSetValue>("statuscode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("statuscode"))
				    value = (OptionSetValue) backupAttributeCollection["statuscode"];
                if (value == null)
                    return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("statuscode", value.Value, 1033) },
                        };
            }
            set
            {}
        }

        /// <summary>
        /// [Range(-1, 2147483647)] 
		/// 'TimeZoneRuleVersionNumber'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("timezoneruleversionnumber"), InRange("-1", "2147483647", typeof(int))]
		public int? TimeZoneRuleVersionNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("timezoneruleversionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("timezoneruleversionnumber"))
				    value = (int?) backupAttributeCollection["timezoneruleversionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("TimeZoneRuleVersionNumber");
					SetAttributeValue("timezoneruleversionnumber", value);
				OnPropertyChanged("TimeZoneRuleVersionNumber");
			}
		}

        /// <summary>
        /// [Range(-922337203685477, 922337203685477)] 
		/// 'TotalAmount'.<br />
        /// Shows the total amount due, calculated as the sum of the products, discount, freight, and taxes for the invoice.
        /// </summary>
		[AttributeLogicalName("totalamount"), InRange("-922337203685477", "922337203685477", typeof(decimal))]
		public decimal? TotalAmount
		{
			get
			{
				var value = GetAttributeValue<Money>("totalamount");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("totalamount"))
				    value = (Money) backupAttributeCollection["totalamount"];
                return value == null ? (decimal?) null : value.Value;
			}
			set
			{
				OnPropertyChanging("TotalAmount");
                if (value != null)
				    SetAttributeValue("totalamount", new Money(value.Value));
                else
					SetAttributeValue("totalamount", value);
				OnPropertyChanged("TotalAmount");
			}
		}

        /// <summary>
        /// [Range(-922337203685477, 922337203685477)] 
		/// 'TotalAmount_Base'.<br />
        /// Value of the Total Amount in base currency.
        /// </summary>
		[AttributeLogicalName("totalamount_base"), InRange("-922337203685477", "922337203685477", typeof(decimal))]
		public decimal? TotalAmount_Base
		{
			get
			{
				var value = GetAttributeValue<Money>("totalamount_base");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("totalamount_base"))
				    value = (Money) backupAttributeCollection["totalamount_base"];
                return value == null ? (decimal?) null : value.Value;
			}
			set
			{
				OnPropertyChanging("TotalAmount_Base");
                if (value != null)
				    SetAttributeValue("totalamount_base", new Money(value.Value));
                else
					SetAttributeValue("totalamount_base", value);
				OnPropertyChanged("TotalAmount_Base");
			}
		}

        /// <summary>
        /// [Range(-922337203685477, 922337203685477)] 
		/// 'TotalAmountLessFreight'.<br />
        /// Shows the total product amount due, minus any discounts. This value is added to freight and tax amounts in the calculation for the total amount due for the invoice.
        /// </summary>
		[AttributeLogicalName("totalamountlessfreight"), InRange("-922337203685477", "922337203685477", typeof(decimal))]
		public decimal? TotalAmountLessFreight
		{
			get
			{
				var value = GetAttributeValue<Money>("totalamountlessfreight");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("totalamountlessfreight"))
				    value = (Money) backupAttributeCollection["totalamountlessfreight"];
                return value == null ? (decimal?) null : value.Value;
			}
			set
			{
				OnPropertyChanging("TotalAmountLessFreight");
                if (value != null)
				    SetAttributeValue("totalamountlessfreight", new Money(value.Value));
                else
					SetAttributeValue("totalamountlessfreight", value);
				OnPropertyChanged("TotalAmountLessFreight");
			}
		}

        /// <summary>
        /// [Range(-922337203685477, 922337203685477)] 
		/// 'TotalAmountLessFreight_Base'.<br />
        /// Value of the Total Pre-Freight Amount in base currency.
        /// </summary>
		[AttributeLogicalName("totalamountlessfreight_base"), InRange("-922337203685477", "922337203685477", typeof(decimal))]
		public decimal? TotalAmountLessFreight_Base
		{
			get
			{
				var value = GetAttributeValue<Money>("totalamountlessfreight_base");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("totalamountlessfreight_base"))
				    value = (Money) backupAttributeCollection["totalamountlessfreight_base"];
                return value == null ? (decimal?) null : value.Value;
			}
			set
			{
				OnPropertyChanging("TotalAmountLessFreight_Base");
                if (value != null)
				    SetAttributeValue("totalamountlessfreight_base", new Money(value.Value));
                else
					SetAttributeValue("totalamountlessfreight_base", value);
				OnPropertyChanged("TotalAmountLessFreight_Base");
			}
		}

        /// <summary>
        /// [Range(-922337203685477, 922337203685477)] 
		/// 'TotalDiscountAmount'.<br />
        /// Shows the total discount amount, based on the discount price and rate entered on the invoice.
        /// </summary>
		[AttributeLogicalName("totaldiscountamount"), InRange("-922337203685477", "922337203685477", typeof(decimal))]
		public decimal? TotalDiscountAmount
		{
			get
			{
				var value = GetAttributeValue<Money>("totaldiscountamount");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("totaldiscountamount"))
				    value = (Money) backupAttributeCollection["totaldiscountamount"];
                return value == null ? (decimal?) null : value.Value;
			}
			set
			{
				OnPropertyChanging("TotalDiscountAmount");
                if (value != null)
				    SetAttributeValue("totaldiscountamount", new Money(value.Value));
                else
					SetAttributeValue("totaldiscountamount", value);
				OnPropertyChanged("TotalDiscountAmount");
			}
		}

        /// <summary>
        /// [Range(-922337203685477, 922337203685477)] 
		/// 'TotalDiscountAmount_Base'.<br />
        /// Value of the Total Discount Amount in base currency.
        /// </summary>
		[AttributeLogicalName("totaldiscountamount_base"), InRange("-922337203685477", "922337203685477", typeof(decimal))]
		public decimal? TotalDiscountAmount_Base
		{
			get
			{
				var value = GetAttributeValue<Money>("totaldiscountamount_base");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("totaldiscountamount_base"))
				    value = (Money) backupAttributeCollection["totaldiscountamount_base"];
                return value == null ? (decimal?) null : value.Value;
			}
			set
			{
				OnPropertyChanging("TotalDiscountAmount_Base");
                if (value != null)
				    SetAttributeValue("totaldiscountamount_base", new Money(value.Value));
                else
					SetAttributeValue("totaldiscountamount_base", value);
				OnPropertyChanged("TotalDiscountAmount_Base");
			}
		}

        /// <summary>
        /// [Range(-922337203685477, 922337203685477)] 
		/// 'TotalLineItemAmount'.<br />
        /// Shows the sum of all existing and write-in products included on the invoice, based on the specified price list and quantities.
        /// </summary>
		[AttributeLogicalName("totallineitemamount"), InRange("-922337203685477", "922337203685477", typeof(decimal))]
		public decimal? TotalLineItemAmount
		{
			get
			{
				var value = GetAttributeValue<Money>("totallineitemamount");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("totallineitemamount"))
				    value = (Money) backupAttributeCollection["totallineitemamount"];
                return value == null ? (decimal?) null : value.Value;
			}
			set
			{
				OnPropertyChanging("TotalLineItemAmount");
                if (value != null)
				    SetAttributeValue("totallineitemamount", new Money(value.Value));
                else
					SetAttributeValue("totallineitemamount", value);
				OnPropertyChanged("TotalLineItemAmount");
			}
		}

        /// <summary>
        /// [Range(-922337203685477, 922337203685477)] 
		/// 'TotalLineItemAmount_Base'.<br />
        /// Value of the Total Detail Amount in base currency.
        /// </summary>
		[AttributeLogicalName("totallineitemamount_base"), InRange("-922337203685477", "922337203685477", typeof(decimal))]
		public decimal? TotalLineItemAmount_Base
		{
			get
			{
				var value = GetAttributeValue<Money>("totallineitemamount_base");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("totallineitemamount_base"))
				    value = (Money) backupAttributeCollection["totallineitemamount_base"];
                return value == null ? (decimal?) null : value.Value;
			}
			set
			{
				OnPropertyChanging("TotalLineItemAmount_Base");
                if (value != null)
				    SetAttributeValue("totallineitemamount_base", new Money(value.Value));
                else
					SetAttributeValue("totallineitemamount_base", value);
				OnPropertyChanged("TotalLineItemAmount_Base");
			}
		}

        /// <summary>
        /// [Range(-922337203685477, 922337203685477)] 
		/// 'TotalLineItemDiscountAmount'.<br />
        /// Shows the Manual Discount amounts specified on all products included in the invoice. This value is reflected in the Detail Amount field on the invoice and is added to any discount amount or rate specified on the invoice.
        /// </summary>
		[AttributeLogicalName("totallineitemdiscountamount"), InRange("-922337203685477", "922337203685477", typeof(decimal))]
		public decimal? TotalLineItemDiscountAmount
		{
			get
			{
				var value = GetAttributeValue<Money>("totallineitemdiscountamount");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("totallineitemdiscountamount"))
				    value = (Money) backupAttributeCollection["totallineitemdiscountamount"];
                return value == null ? (decimal?) null : value.Value;
			}
			set
			{
				OnPropertyChanging("TotalLineItemDiscountAmount");
                if (value != null)
				    SetAttributeValue("totallineitemdiscountamount", new Money(value.Value));
                else
					SetAttributeValue("totallineitemdiscountamount", value);
				OnPropertyChanged("TotalLineItemDiscountAmount");
			}
		}

        /// <summary>
        /// [Range(-922337203685477, 922337203685477)] 
		/// 'TotalLineItemDiscountAmount_Base'.<br />
        /// Value of the Total Line Item Discount Amount in base currency.
        /// </summary>
		[AttributeLogicalName("totallineitemdiscountamount_base"), InRange("-922337203685477", "922337203685477", typeof(decimal))]
		public decimal? TotalLineItemDiscountAmount_Base
		{
			get
			{
				var value = GetAttributeValue<Money>("totallineitemdiscountamount_base");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("totallineitemdiscountamount_base"))
				    value = (Money) backupAttributeCollection["totallineitemdiscountamount_base"];
                return value == null ? (decimal?) null : value.Value;
			}
			set
			{
				OnPropertyChanging("TotalLineItemDiscountAmount_Base");
                if (value != null)
				    SetAttributeValue("totallineitemdiscountamount_base", new Money(value.Value));
                else
					SetAttributeValue("totallineitemdiscountamount_base", value);
				OnPropertyChanged("TotalLineItemDiscountAmount_Base");
			}
		}

        /// <summary>
        /// [Range(-922337203685477, 922337203685477)] 
		/// 'TotalTax'.<br />
        /// Shows the total of the Tax amounts specified on all products included in the invoice, included in the Total Amount due calculation for the invoice.
        /// </summary>
		[AttributeLogicalName("totaltax"), InRange("-922337203685477", "922337203685477", typeof(decimal))]
		public decimal? TotalTax
		{
			get
			{
				var value = GetAttributeValue<Money>("totaltax");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("totaltax"))
				    value = (Money) backupAttributeCollection["totaltax"];
                return value == null ? (decimal?) null : value.Value;
			}
			set
			{
				OnPropertyChanging("TotalTax");
                if (value != null)
				    SetAttributeValue("totaltax", new Money(value.Value));
                else
					SetAttributeValue("totaltax", value);
				OnPropertyChanged("TotalTax");
			}
		}

        /// <summary>
        /// [Range(-922337203685477, 922337203685477)] 
		/// 'TotalTax_Base'.<br />
        /// Value of the Total Tax in base currency.
        /// </summary>
		[AttributeLogicalName("totaltax_base"), InRange("-922337203685477", "922337203685477", typeof(decimal))]
		public decimal? TotalTax_Base
		{
			get
			{
				var value = GetAttributeValue<Money>("totaltax_base");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("totaltax_base"))
				    value = (Money) backupAttributeCollection["totaltax_base"];
                return value == null ? (decimal?) null : value.Value;
			}
			set
			{
				OnPropertyChanging("TotalTax_Base");
                if (value != null)
				    SetAttributeValue("totaltax_base", new Money(value.Value));
                else
					SetAttributeValue("totaltax_base", value);
				OnPropertyChanged("TotalTax_Base");
			}
		}

        /// <summary>
        /// [Required] 
		/// 'TransactionCurrencyId'.<br />
        /// Choose the local currency for the record to make sure budgets are reported in the correct currency.
        /// </summary>
		[AttributeLogicalName("transactioncurrencyid"), Required]
		public Guid? TransactionCurrencyId
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("transactioncurrencyid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("transactioncurrencyid"))
				    value = (EntityReference) backupAttributeCollection["transactioncurrencyid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("TransactionCurrencyId");
                if (value != null)
				    SetAttributeValue("transactioncurrencyid", new EntityReference("transactioncurrency", value.Value));
                else
					SetAttributeValue("transactioncurrencyid", value);
				OnPropertyChanged("TransactionCurrencyId");
			}
		}

        public string TransactionCurrencyIdName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("transactioncurrencyid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("transactioncurrencyid"))
				    value = (EntityReference) backupAttributeCollection["transactioncurrencyid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_currencyname", "transactioncurrency", "transactioncurrencyid", "transactioncurrencyid")]
        public IDictionary<int, string> TransactionCurrencyIdLabels { get; set; }

        /// <summary>
        /// [MaximumLength=1250] 
		/// 'TraversedPath'.<br />
        /// A comma separated list of string values representing the unique identifiers of stages in a Business Process Flow Instance in the order that they occur.
        /// </summary>
		[AttributeLogicalName("traversedpath"), MaxLength(1250)]
		public string TraversedPath
		{
			get
			{
				var value = GetAttributeValue<string>("traversedpath");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("traversedpath"))
				    value = (string) backupAttributeCollection["traversedpath"];
			    return value;
			}
			set
			{
				OnPropertyChanging("TraversedPath");
					SetAttributeValue("traversedpath", value);
				OnPropertyChanged("TraversedPath");
			}
		}

        /// <summary>
        /// [Range(-1, 2147483647)] 
		/// 'UTCConversionTimeZoneCode'.<br />
        /// Time zone code that was in use when the record was created.
        /// </summary>
		[AttributeLogicalName("utcconversiontimezonecode"), InRange("-1", "2147483647", typeof(int))]
		public int? UTCConversionTimeZoneCode
		{
			get
			{
				var value = GetAttributeValue<int?>("utcconversiontimezonecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("utcconversiontimezonecode"))
				    value = (int?) backupAttributeCollection["utcconversiontimezonecode"];
			    return value;
			}
			set
			{
				OnPropertyChanging("UTCConversionTimeZoneCode");
					SetAttributeValue("utcconversiontimezonecode", value);
				OnPropertyChanged("UTCConversionTimeZoneCode");
			}
		}

        /// <summary>
        ///  
		/// 'VersionNumber'.<br />
        /// Version Number
        /// </summary>
		[AttributeLogicalName("versionnumber")]
		public long? VersionNumber
		{
			get
			{
				var value = GetAttributeValue<long?>("versionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("versionnumber"))
				    value = (long?) backupAttributeCollection["versionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("VersionNumber");
					SetAttributeValue("versionnumber", value);
				OnPropertyChanged("VersionNumber");
			}
		}

        /// <summary>
        ///  
		/// 'WillCall'.<br />
        /// Select whether the products included in the invoice should be shipped to the specified address or held until the customer calls with further pick up or delivery instructions.
        /// </summary>
		[AttributeLogicalName("willcall")]
		public bool? WillCall
		{
			get
			{
				var value = GetAttributeValue<bool?>("willcall");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("willcall"))
				    value = (bool?) backupAttributeCollection["willcall"];
			    return value;
			}
			set
			{
				OnPropertyChanging("WillCall");
					SetAttributeValue("willcall", value);
				OnPropertyChanged("WillCall");
			}
		}

        public IDictionary<int, string> WillCallLabels
        {
		    get
		    {
                var value = GetAttributeValue<bool?>("willcall");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("willcall"))
				    value = (bool?) backupAttributeCollection["willcall"];
                if (value == null)
                    return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("willcall", (bool) value ? 1 : 0, 1033) },
                        };
            }
            set
            {}
        }

		#endregion

		#region Relationships

		
		/// <summary>
		/// 1:N, 'invoice_activity_parties'
		/// </summary>
		[RelationshipSchemaName("invoice_activity_parties")]
		public ActivityParty[] ActivityPartysOfParty
		{
			get
			{
				var enumerable = GetRelatedEntities<ActivityParty>("invoice_activity_parties", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("ActivityPartysOfParty");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<ActivityParty>("invoice_activity_parties", null, value);
				OnPropertyChanged("ActivityPartysOfParty");
			}
		}
		
		public static class RelationNames {
			public static RelationName ActivityPartysOfParty = new RelationName("ActivityPartysOfParty");
		}


		protected override IDictionary<string, object[]> RelationProperties { get {
			if (relationProperties != null) return relationProperties;
			relationProperties = new Dictionary<string, object[]>();
			relationProperties["ActivityPartysOfParty"] = new object[] { "ActivityPartysOfParty", "activityparty", "invoice", "partyid", "invoiceid", "invoiceid", "invoiceid", "invoice_activity_parties", typeof (ActivityParty[]) };
			return relationProperties; } }


		#endregion

		/// <summary>
		/// Constructor for populating via LINQ queries given a LINQ anonymous type
		/// <param name="anonymousType">LINQ anonymous type.</param>
		/// </summary>
		public Invoice(object anonymousType) : 
				this()
		{
            foreach (var p in anonymousType.GetType().GetProperties())
            {
                var value = p.GetValue(anonymousType, null);
                if (p.PropertyType == typeof(System.Guid))
                {
                    // Type is Guid, must be Id
                    base.Id = (System.Guid)value;
                    Attributes["invoiceid"] = base.Id;
               }
                else if (p.Name == "FormattedValues")
                {
                    // Add Support for FormattedValues
                    FormattedValues.AddRange((FormattedValueCollection)value);
                }
                else
                {
                    Attributes[p.Name.ToLower()] = value;
                }
            }
		}


		#region Label/value pairs

		#region IsPriceLocked

		public enum IsPriceLockedEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region msdyn_HasCorrections

		public enum msdyn_HasCorrectionsEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region msdyn_OrderType

		public enum msdyn_OrderTypeEnum
		{
			[EnumMember]Itembased = 192350000,
			[EnumMember]ServiceMaintenanceBased = 690970002,
			[EnumMember]Workbased = 192350001,
		}

		#endregion
	
		#region msdyn_projectinvoicestatus

		public enum msdyn_projectinvoicestatusEnum
		{
			[EnumMember]Draft = 192350000,
			[EnumMember]InReview = 192350001,
			[EnumMember]Confirmed = 192350002,
			[EnumMember]InvoicePaid = 192350003,
		}

		#endregion
	
		#region PaymentTermsCode

		public enum PaymentTermsCodeEnum
		{
			[EnumMember]Net30 = 1,
			[EnumMember]_210Net30 = 2,
			[EnumMember]Net45 = 3,
			[EnumMember]Net60 = 4,
		}

		#endregion
	
		#region PricingErrorCode

		public enum PricingErrorCodeEnum
		{
			[EnumMember]None = 0,
			[EnumMember]DetailError = 1,
			[EnumMember]MissingPriceLevel = 2,
			[EnumMember]InactivePriceLevel = 3,
			[EnumMember]MissingQuantity = 4,
			[EnumMember]MissingUnitPrice = 5,
			[EnumMember]MissingProduct = 6,
			[EnumMember]InvalidProduct = 7,
			[EnumMember]MissingPricingCode = 8,
			[EnumMember]InvalidPricingCode = 9,
			[EnumMember]MissingUOM = 10,
			[EnumMember]ProductNotInPriceLevel = 11,
			[EnumMember]MissingPriceLevelAmount = 12,
			[EnumMember]MissingPriceLevelPercentage = 13,
			[EnumMember]MissingPrice = 14,
			[EnumMember]MissingCurrentCost = 15,
			[EnumMember]MissingStandardCost = 16,
			[EnumMember]InvalidPriceLevelAmount = 17,
			[EnumMember]InvalidPriceLevelPercentage = 18,
			[EnumMember]InvalidPrice = 19,
			[EnumMember]InvalidCurrentCost = 20,
			[EnumMember]InvalidStandardCost = 21,
			[EnumMember]InvalidRoundingPolicy = 22,
			[EnumMember]InvalidRoundingOption = 23,
			[EnumMember]InvalidRoundingAmount = 24,
			[EnumMember]PriceCalculationError = 25,
			[EnumMember]InvalidDiscountType = 26,
			[EnumMember]DiscountTypeInvalidState = 27,
			[EnumMember]InvalidDiscount = 28,
			[EnumMember]InvalidQuantity = 29,
			[EnumMember]InvalidPricingPrecision = 30,
			[EnumMember]MissingProductDefaultUOM = 31,
			[EnumMember]MissingProductUOMSchedule = 32,
			[EnumMember]InactiveDiscountType = 33,
			[EnumMember]InvalidPriceLevelCurrency = 34,
			[EnumMember]PriceAttributeOutOfRange = 35,
			[EnumMember]BaseCurrencyAttributeOverflow = 36,
			[EnumMember]BaseCurrencyAttributeUnderflow = 37,
		}

		#endregion
	
		#region PriorityCode

		public enum PriorityCodeEnum
		{
			[EnumMember]DefaultValue = 1,
		}

		#endregion
	
		#region ShippingMethodCode

		public enum ShippingMethodCodeEnum
		{
			[EnumMember]Airborne = 1,
			[EnumMember]DHL = 2,
			[EnumMember]FedEx = 3,
			[EnumMember]UPS = 4,
			[EnumMember]PostalMail = 5,
			[EnumMember]FullLoad = 6,
			[EnumMember]WillCall = 7,
		}

		#endregion
	
		#region ShipTo_FreightTermsCode

		public enum ShipTo_FreightTermsCodeEnum
		{
			[EnumMember]DefaultValue = 1,
		}

		#endregion
	
		#region StateCode

		public enum StateCodeEnum
		{
			[EnumMember]Active = 0,
			[EnumMember]Closed = 1,
			[EnumMember]Paid = 2,
			[EnumMember]Canceled = 3,
		}

		#endregion
	
		#region StatusCode

		public enum StatusCodeEnum
		{
			[EnumMember]New = 1,
			[EnumMember]PartiallyShipped = 2,
			[EnumMember]Billed = 4,
			[EnumMember]Bookedappliestoservices = 5,
			[EnumMember]Installedappliestoservices = 6,
			[EnumMember]Canceleddeprecated = 3,
			[EnumMember]PaidinFulldeprecated = 7,
			[EnumMember]Complete = 100001,
			[EnumMember]Partial = 100002,
			[EnumMember]Canceled = 100003,
		}

		#endregion
	
		#region WillCall

		public enum WillCallEnum
		{
			[EnumMember]WillCall = 1,
			[EnumMember]Address = 0,
		}

		#endregion
	
		#endregion


		#region Metadata


		#region Enums

		public static class Enums
		{
			/// <summary>
			/// Gets the label corresponding to the option-set's value using its logical name,
			/// the value within, and the language code.
			/// </summary>
			/// <param name="logicalName">The logical name of the option-set in CRM</param>
			/// <param name="constant">The value from the option-set</param>
			/// <param name="languageCode">The language code from CRM</param>
			/// <returns></returns>
			public static string GetLabel(string logicalName, int constant, int languageCode = 1033)
			{
				return GeneratorHelpers.GetLabel(logicalName, constant, typeof(Enums), languageCode);
			}
			/// <summary>
			/// Gets the value corresponding to the option-set's label using its logical name,
			/// the value within, and the language code.
			/// </summary>
			/// <param name="logicalName">The logical name of the option-set in CRM</param>
			/// <param name="label">The label from the option-set</param>
			/// <param name="languageCode">The language code from CRM</param>
			/// <returns>The value corresponding to the label</returns>
			public static int GetValue(string logicalName, string label, int languageCode = 1033)
			{
				return GeneratorHelpers.GetValue(logicalName, label, typeof(Enums), languageCode);
			}

			#region Logical names

			public static class Names
			{
				public const string IsPriceLocked = "ispricelocked";
				public const string msdyn_HasCorrections = "msdyn_hascorrections";
				public const string msdyn_OrderType = "msdyn_ordertype";
				public const string msdyn_projectinvoicestatus = "msdyn_projectinvoicestatus";
				public const string PaymentTermsCode = "paymenttermscode";
				public const string PricingErrorCode = "pricingerrorcode";
				public const string PriorityCode = "prioritycode";
				public const string ShippingMethodCode = "shippingmethodcode";
				public const string ShipTo_FreightTermsCode = "shipto_freighttermscode";
				public const string StateCode = "statecode";
				public const string StatusCode = "statuscode";
				public const string WillCall = "willcall";
			}

			#endregion

			#region Labels

			public static class Labels
			{
				public static class IsPriceLocked 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(IsPriceLocked), label, languageCode);
					}
				}

				public static class msdyn_HasCorrections 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(msdyn_HasCorrections), label, languageCode);
					}
				}

				public static class msdyn_OrderType 
				{
					public const string Itembased_1033 = "Item based";
					public const string ServiceMaintenanceBased_1033 = "Service-Maintenance Based";
					public const string Workbased_1033 = "Work based";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(msdyn_OrderType), label, languageCode);
					}
				}

				public static class msdyn_projectinvoicestatus 
				{
					public const string Draft_1033 = "Draft";
					public const string InReview_1033 = "In Review";
					public const string Confirmed_1033 = "Confirmed";
					public const string InvoicePaid_1033 = "Invoice Paid";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(msdyn_projectinvoicestatus), label, languageCode);
					}
				}

				public static class PaymentTermsCode 
				{
					public const string Net30_1033 = "Net 30";
					public const string _210Net30_1033 = "2% 10, Net 30";
					public const string Net45_1033 = "Net 45";
					public const string Net60_1033 = "Net 60";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(PaymentTermsCode), label, languageCode);
					}
				}

				public static class PricingErrorCode 
				{
					public const string None_1033 = "None";
					public const string DetailError_1033 = "Detail Error";
					public const string MissingPriceLevel_1033 = "Missing Price Level";
					public const string InactivePriceLevel_1033 = "Inactive Price Level";
					public const string MissingQuantity_1033 = "Missing Quantity";
					public const string MissingUnitPrice_1033 = "Missing Unit Price";
					public const string MissingProduct_1033 = "Missing Product";
					public const string InvalidProduct_1033 = "Invalid Product";
					public const string MissingPricingCode_1033 = "Missing Pricing Code";
					public const string InvalidPricingCode_1033 = "Invalid Pricing Code";
					public const string MissingUOM_1033 = "Missing UOM";
					public const string ProductNotInPriceLevel_1033 = "Product Not In Price Level";
					public const string MissingPriceLevelAmount_1033 = "Missing Price Level Amount";
					public const string MissingPriceLevelPercentage_1033 = "Missing Price Level Percentage";
					public const string MissingPrice_1033 = "Missing Price";
					public const string MissingCurrentCost_1033 = "Missing Current Cost";
					public const string MissingStandardCost_1033 = "Missing Standard Cost";
					public const string InvalidPriceLevelAmount_1033 = "Invalid Price Level Amount";
					public const string InvalidPriceLevelPercentage_1033 = "Invalid Price Level Percentage";
					public const string InvalidPrice_1033 = "Invalid Price";
					public const string InvalidCurrentCost_1033 = "Invalid Current Cost";
					public const string InvalidStandardCost_1033 = "Invalid Standard Cost";
					public const string InvalidRoundingPolicy_1033 = "Invalid Rounding Policy";
					public const string InvalidRoundingOption_1033 = "Invalid Rounding Option";
					public const string InvalidRoundingAmount_1033 = "Invalid Rounding Amount";
					public const string PriceCalculationError_1033 = "Price Calculation Error";
					public const string InvalidDiscountType_1033 = "Invalid Discount Type";
					public const string DiscountTypeInvalidState_1033 = "Discount Type Invalid State";
					public const string InvalidDiscount_1033 = "Invalid Discount";
					public const string InvalidQuantity_1033 = "Invalid Quantity";
					public const string InvalidPricingPrecision_1033 = "Invalid Pricing Precision";
					public const string MissingProductDefaultUOM_1033 = "Missing Product Default UOM";
					public const string MissingProductUOMSchedule_1033 = "Missing Product UOM Schedule ";
					public const string InactiveDiscountType_1033 = "Inactive Discount Type";
					public const string InvalidPriceLevelCurrency_1033 = "Invalid Price Level Currency";
					public const string PriceAttributeOutOfRange_1033 = "Price Attribute Out Of Range";
					public const string BaseCurrencyAttributeOverflow_1033 = "Base Currency Attribute Overflow";
					public const string BaseCurrencyAttributeUnderflow_1033 = "Base Currency Attribute Underflow";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(PricingErrorCode), label, languageCode);
					}
				}

				public static class PriorityCode 
				{
					public const string DefaultValue_1033 = "Default Value";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(PriorityCode), label, languageCode);
					}
				}

				public static class ShippingMethodCode 
				{
					public const string Airborne_1033 = "Airborne";
					public const string DHL_1033 = "DHL";
					public const string FedEx_1033 = "FedEx";
					public const string UPS_1033 = "UPS";
					public const string PostalMail_1033 = "Postal Mail";
					public const string FullLoad_1033 = "Full Load";
					public const string WillCall_1033 = "Will Call";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(ShippingMethodCode), label, languageCode);
					}
				}

				public static class ShipTo_FreightTermsCode 
				{
					public const string DefaultValue_1033 = "Default Value";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(ShipTo_FreightTermsCode), label, languageCode);
					}
				}

				public static class StateCode 
				{
					public const string Active_1033 = "Active";
					public const string Closed_1033 = "Closed (deprecated)";
					public const string Paid_1033 = "Paid";
					public const string Canceled_1033 = "Canceled";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(StateCode), label, languageCode);
					}
				}

				public static class StatusCode 
				{
					public const string New_1033 = "New";
					public const string PartiallyShipped_1033 = "Partially Shipped";
					public const string Billed_1033 = "Billed";
					public const string Bookedappliestoservices_1033 = "Booked (applies to services)";
					public const string Installedappliestoservices_1033 = "Installed (applies to services)";
					public const string Canceleddeprecated_1033 = "Canceled (deprecated)";
					public const string PaidinFulldeprecated_1033 = "Paid in Full (deprecated)";
					public const string Complete_1033 = "Complete";
					public const string Partial_1033 = "Partial";
					public const string Canceled_1033 = "Canceled";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(StatusCode), label, languageCode);
					}
				}

				public static class WillCall 
				{
					public const string WillCall_1033 = "Will Call";
					public const string Address_1033 = "Address";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(WillCall), label, languageCode);
					}
				}

			}

			#endregion
		}

		#endregion

		#region Fields

		public static class Fields
		{
			#region Logical names

			public const string AccountId = "accountid";
			public const string BillTo_City = "billto_city";
			public const string BillTo_Composite = "billto_composite";
			public const string BillTo_Country = "billto_country";
			public const string BillTo_Fax = "billto_fax";
			public const string BillTo_Line1 = "billto_line1";
			public const string BillTo_Line2 = "billto_line2";
			public const string BillTo_Line3 = "billto_line3";
			public const string BillTo_Name = "billto_name";
			public const string BillTo_PostalCode = "billto_postalcode";
			public const string BillTo_StateOrProvince = "billto_stateorprovince";
			public const string BillTo_Telephone = "billto_telephone";
			public const string ContactId = "contactid";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string CustomerId = "customerid";
			public const string DateDelivered = "datedelivered";
			public const string Description = "description";
			public const string DiscountAmount = "discountamount";
			public const string DiscountAmount_Base = "discountamount_base";
			public const string DiscountPercentage = "discountpercentage";
			public const string DueDate = "duedate";
			public const string EmailAddress = "emailaddress";
			public const string EntityImageId = "entityimageid";
			public const string ExchangeRate = "exchangerate";
			public const string FreightAmount = "freightamount";
			public const string FreightAmount_Base = "freightamount_base";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string InvoiceId = "invoiceid";
			public const string InvoiceNumber = "invoicenumber";
			public const string IsPriceLocked = "ispricelocked";
			public const string LastBackofficeSubmit = "lastbackofficesubmit";
			public const string LastOnHoldTime = "lastonholdtime";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_AmountDue = "msdyn_amountdue";
			public const string msdyn_amountdue_Base = "msdyn_amountdue_base";
			public const string msdyn_HasCorrections = "msdyn_hascorrections";
			public const string msdyn_InvoiceDate = "msdyn_invoicedate";
			public const string msdyn_OrderType = "msdyn_ordertype";
			public const string msdyn_projectinvoicestatus = "msdyn_projectinvoicestatus";
			public const string Name = "name";
			public const string OnHoldTime = "onholdtime";
			public const string OpportunityId = "opportunityid";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string PaymentTermsCode = "paymenttermscode";
			public const string PriceLevelId = "pricelevelid";
			public const string PricingErrorCode = "pricingerrorcode";
			public const string PriorityCode = "prioritycode";
			public const string ProcessId = "processid";
			public const string SalesOrderId = "salesorderid";
			public const string ShippingMethodCode = "shippingmethodcode";
			public const string ShipTo_City = "shipto_city";
			public const string ShipTo_Composite = "shipto_composite";
			public const string ShipTo_Country = "shipto_country";
			public const string ShipTo_Fax = "shipto_fax";
			public const string ShipTo_FreightTermsCode = "shipto_freighttermscode";
			public const string ShipTo_Line1 = "shipto_line1";
			public const string ShipTo_Line2 = "shipto_line2";
			public const string ShipTo_Line3 = "shipto_line3";
			public const string ShipTo_Name = "shipto_name";
			public const string ShipTo_PostalCode = "shipto_postalcode";
			public const string ShipTo_StateOrProvince = "shipto_stateorprovince";
			public const string ShipTo_Telephone = "shipto_telephone";
			public const string SLAId = "slaid";
			public const string SLAInvokedId = "slainvokedid";
			public const string StageId = "stageid";
			public const string StateCode = "statecode";
			public const string StatusCode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string TotalAmount = "totalamount";
			public const string TotalAmount_Base = "totalamount_base";
			public const string TotalAmountLessFreight = "totalamountlessfreight";
			public const string TotalAmountLessFreight_Base = "totalamountlessfreight_base";
			public const string TotalDiscountAmount = "totaldiscountamount";
			public const string TotalDiscountAmount_Base = "totaldiscountamount_base";
			public const string TotalLineItemAmount = "totallineitemamount";
			public const string TotalLineItemAmount_Base = "totallineitemamount_base";
			public const string TotalLineItemDiscountAmount = "totallineitemdiscountamount";
			public const string TotalLineItemDiscountAmount_Base = "totallineitemdiscountamount_base";
			public const string TotalTax = "totaltax";
			public const string TotalTax_Base = "totaltax_base";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string TraversedPath = "traversedpath";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
			public const string WillCall = "willcall";

			#endregion

			#region Schema names

			public static class Schema
			{
				public const string AccountId = "AccountId";
				public const string BillTo_City = "BillTo_City";
				public const string BillTo_Composite = "BillTo_Composite";
				public const string BillTo_Country = "BillTo_Country";
				public const string BillTo_Fax = "BillTo_Fax";
				public const string BillTo_Line1 = "BillTo_Line1";
				public const string BillTo_Line2 = "BillTo_Line2";
				public const string BillTo_Line3 = "BillTo_Line3";
				public const string BillTo_Name = "BillTo_Name";
				public const string BillTo_PostalCode = "BillTo_PostalCode";
				public const string BillTo_StateOrProvince = "BillTo_StateOrProvince";
				public const string BillTo_Telephone = "BillTo_Telephone";
				public const string ContactId = "ContactId";
				public const string CreatedBy = "CreatedBy";
				public const string CreatedOn = "CreatedOn";
				public const string CreatedOnBehalfBy = "CreatedOnBehalfBy";
				public const string CustomerId = "CustomerId";
				public const string DateDelivered = "DateDelivered";
				public const string Description = "Description";
				public const string DiscountAmount = "DiscountAmount";
				public const string DiscountAmount_Base = "DiscountAmount_Base";
				public const string DiscountPercentage = "DiscountPercentage";
				public const string DueDate = "DueDate";
				public const string EmailAddress = "EmailAddress";
				public const string EntityImageId = "EntityImageId";
				public const string ExchangeRate = "ExchangeRate";
				public const string FreightAmount = "FreightAmount";
				public const string FreightAmount_Base = "FreightAmount_Base";
				public const string ImportSequenceNumber = "ImportSequenceNumber";
				public const string InvoiceId = "InvoiceId";
				public const string InvoiceNumber = "InvoiceNumber";
				public const string IsPriceLocked = "IsPriceLocked";
				public const string LastBackofficeSubmit = "LastBackofficeSubmit";
				public const string LastOnHoldTime = "LastOnHoldTime";
				public const string ModifiedBy = "ModifiedBy";
				public const string ModifiedOn = "ModifiedOn";
				public const string ModifiedOnBehalfBy = "ModifiedOnBehalfBy";
				public const string msdyn_AmountDue = "msdyn_AmountDue";
				public const string msdyn_amountdue_Base = "msdyn_amountdue_Base";
				public const string msdyn_HasCorrections = "msdyn_HasCorrections";
				public const string msdyn_InvoiceDate = "msdyn_InvoiceDate";
				public const string msdyn_OrderType = "msdyn_OrderType";
				public const string msdyn_projectinvoicestatus = "msdyn_projectinvoicestatus";
				public const string Name = "Name";
				public const string OnHoldTime = "OnHoldTime";
				public const string OpportunityId = "OpportunityId";
				public const string OverriddenCreatedOn = "OverriddenCreatedOn";
				public const string OwnerId = "OwnerId";
				public const string OwningBusinessUnit = "OwningBusinessUnit";
				public const string OwningTeam = "OwningTeam";
				public const string OwningUser = "OwningUser";
				public const string PaymentTermsCode = "PaymentTermsCode";
				public const string PriceLevelId = "PriceLevelId";
				public const string PricingErrorCode = "PricingErrorCode";
				public const string PriorityCode = "PriorityCode";
				public const string ProcessId = "ProcessId";
				public const string SalesOrderId = "SalesOrderId";
				public const string ShippingMethodCode = "ShippingMethodCode";
				public const string ShipTo_City = "ShipTo_City";
				public const string ShipTo_Composite = "ShipTo_Composite";
				public const string ShipTo_Country = "ShipTo_Country";
				public const string ShipTo_Fax = "ShipTo_Fax";
				public const string ShipTo_FreightTermsCode = "ShipTo_FreightTermsCode";
				public const string ShipTo_Line1 = "ShipTo_Line1";
				public const string ShipTo_Line2 = "ShipTo_Line2";
				public const string ShipTo_Line3 = "ShipTo_Line3";
				public const string ShipTo_Name = "ShipTo_Name";
				public const string ShipTo_PostalCode = "ShipTo_PostalCode";
				public const string ShipTo_StateOrProvince = "ShipTo_StateOrProvince";
				public const string ShipTo_Telephone = "ShipTo_Telephone";
				public const string SLAId = "SLAId";
				public const string SLAInvokedId = "SLAInvokedId";
				public const string StageId = "StageId";
				public const string StateCode = "StateCode";
				public const string StatusCode = "StatusCode";
				public const string TimeZoneRuleVersionNumber = "TimeZoneRuleVersionNumber";
				public const string TotalAmount = "TotalAmount";
				public const string TotalAmount_Base = "TotalAmount_Base";
				public const string TotalAmountLessFreight = "TotalAmountLessFreight";
				public const string TotalAmountLessFreight_Base = "TotalAmountLessFreight_Base";
				public const string TotalDiscountAmount = "TotalDiscountAmount";
				public const string TotalDiscountAmount_Base = "TotalDiscountAmount_Base";
				public const string TotalLineItemAmount = "TotalLineItemAmount";
				public const string TotalLineItemAmount_Base = "TotalLineItemAmount_Base";
				public const string TotalLineItemDiscountAmount = "TotalLineItemDiscountAmount";
				public const string TotalLineItemDiscountAmount_Base = "TotalLineItemDiscountAmount_Base";
				public const string TotalTax = "TotalTax";
				public const string TotalTax_Base = "TotalTax_Base";
				public const string TransactionCurrencyId = "TransactionCurrencyId";
				public const string TraversedPath = "TraversedPath";
				public const string UTCConversionTimeZoneCode = "UTCConversionTimeZoneCode";
				public const string VersionNumber = "VersionNumber";
				public const string WillCall = "WillCall";
			}

			#endregion

			#region Labels

			public static class Labels
			{
				public static class AccountId
				{
					public const string _1033 = "Account";
				}

				public static class BillTo_City
				{
					public const string _1033 = "Bill To City";
				}

				public static class BillTo_Composite
				{
					public const string _1033 = "Bill To Address";
				}

				public static class BillTo_Country
				{
					public const string _1033 = "Bill To Country/Region";
				}

				public static class BillTo_Fax
				{
					public const string _1033 = "Bill To Fax";
				}

				public static class BillTo_Line1
				{
					public const string _1033 = "Bill To Street 1";
				}

				public static class BillTo_Line2
				{
					public const string _1033 = "Bill To Street 2";
				}

				public static class BillTo_Line3
				{
					public const string _1033 = "Bill To Street 3";
				}

				public static class BillTo_Name
				{
					public const string _1033 = "Bill To Name";
				}

				public static class BillTo_PostalCode
				{
					public const string _1033 = "Bill To ZIP/Postal Code";
				}

				public static class BillTo_StateOrProvince
				{
					public const string _1033 = "Bill To State/Province";
				}

				public static class BillTo_Telephone
				{
					public const string _1033 = "Bill To Phone";
				}

				public static class ContactId
				{
					public const string _1033 = "Contact";
				}

				public static class CreatedBy
				{
					public const string _1033 = "Created By";
				}

				public static class CreatedOn
				{
					public const string _1033 = "Created On";
				}

				public static class CreatedOnBehalfBy
				{
					public const string _1033 = "Created By (Delegate)";
				}

				public static class CustomerId
				{
					public const string _1033 = "Customer";
				}

				public static class DateDelivered
				{
					public const string _1033 = "Date Delivered";
				}

				public static class Description
				{
					public const string _1033 = "Description";
				}

				public static class DiscountAmount
				{
					public const string _1033 = "Invoice Discount Amount";
				}

				public static class DiscountAmount_Base
				{
					public const string _1033 = "Invoice Discount Amount (Base)";
				}

				public static class DiscountPercentage
				{
					public const string _1033 = "Invoice Discount (%)";
				}

				public static class DueDate
				{
					public const string _1033 = "Due Date";
				}

				public static class EmailAddress
				{
					public const string _1033 = "Email Address";
				}

				public static class EntityImageId
				{
				}

				public static class ExchangeRate
				{
					public const string _1033 = "Exchange Rate";
				}

				public static class FreightAmount
				{
					public const string _1033 = "Freight Amount";
				}

				public static class FreightAmount_Base
				{
					public const string _1033 = "Freight Amount (Base)";
				}

				public static class ImportSequenceNumber
				{
					public const string _1033 = "Import Sequence Number";
				}

				public static class InvoiceId
				{
					public const string _1033 = "Invoice";
				}

				public static class InvoiceNumber
				{
					public const string _1033 = "Invoice ID";
				}

				public static class IsPriceLocked
				{
					public const string _1033 = "Prices Locked";
				}

				public static class LastBackofficeSubmit
				{
					public const string _1033 = "Last Submitted to Back Office";
				}

				public static class LastOnHoldTime
				{
					public const string _1033 = "Last On Hold Time";
				}

				public static class ModifiedBy
				{
					public const string _1033 = "Modified By";
				}

				public static class ModifiedOn
				{
					public const string _1033 = "Modified On";
				}

				public static class ModifiedOnBehalfBy
				{
					public const string _1033 = "Modified By (Delegate)";
				}

				public static class msdyn_AmountDue
				{
					public const string _1033 = "Amount Due";
				}

				public static class msdyn_amountdue_Base
				{
					public const string _1033 = "Amount Due (Base)";
				}

				public static class msdyn_HasCorrections
				{
					public const string _1033 = "Has Corrections";
				}

				public static class msdyn_InvoiceDate
				{
					public const string _1033 = "Invoice Date";
				}

				public static class msdyn_OrderType
				{
					public const string _1033 = "Type";
				}

				public static class msdyn_projectinvoicestatus
				{
					public const string _1033 = "Project Invoice Status";
				}

				public static class Name
				{
					public const string _1033 = "Name";
				}

				public static class OnHoldTime
				{
					public const string _1033 = "On Hold Time (Minutes)";
				}

				public static class OpportunityId
				{
					public const string _1033 = "Opportunity";
				}

				public static class OverriddenCreatedOn
				{
					public const string _1033 = "Record Created On";
				}

				public static class OwnerId
				{
					public const string _1033 = "Owner";
				}

				public static class OwningBusinessUnit
				{
					public const string _1033 = "Owning Business Unit";
				}

				public static class OwningTeam
				{
					public const string _1033 = "Owning Team";
				}

				public static class OwningUser
				{
					public const string _1033 = "Owning User";
				}

				public static class PaymentTermsCode
				{
					public const string _1033 = "Payment Terms";
				}

				public static class PriceLevelId
				{
					public const string _1033 = "Price List";
				}

				public static class PricingErrorCode
				{
					public const string _1033 = "Pricing Error ";
				}

				public static class PriorityCode
				{
					public const string _1033 = "Priority";
				}

				public static class ProcessId
				{
					public const string _1033 = "Process Id";
				}

				public static class SalesOrderId
				{
					public const string _1033 = "Contract";
				}

				public static class ShippingMethodCode
				{
					public const string _1033 = "Shipping Method";
				}

				public static class ShipTo_City
				{
					public const string _1033 = "Ship To City";
				}

				public static class ShipTo_Composite
				{
					public const string _1033 = "Ship To Address";
				}

				public static class ShipTo_Country
				{
					public const string _1033 = "Ship To Country/Region";
				}

				public static class ShipTo_Fax
				{
					public const string _1033 = "Ship To Fax";
				}

				public static class ShipTo_FreightTermsCode
				{
					public const string _1033 = "Ship To Freight Terms";
				}

				public static class ShipTo_Line1
				{
					public const string _1033 = "Ship To Street 1";
				}

				public static class ShipTo_Line2
				{
					public const string _1033 = "Ship To Street 2";
				}

				public static class ShipTo_Line3
				{
					public const string _1033 = "Ship To Street 3";
				}

				public static class ShipTo_Name
				{
					public const string _1033 = "Ship To Name";
				}

				public static class ShipTo_PostalCode
				{
					public const string _1033 = "Ship To ZIP/Postal Code";
				}

				public static class ShipTo_StateOrProvince
				{
					public const string _1033 = "Ship To State/Province";
				}

				public static class ShipTo_Telephone
				{
					public const string _1033 = "Ship To Phone";
				}

				public static class SLAId
				{
					public const string _1033 = "SLA";
				}

				public static class SLAInvokedId
				{
					public const string _1033 = "Last SLA applied";
				}

				public static class StageId
				{
					public const string _1033 = "Stage Id";
				}

				public static class StateCode
				{
					public const string _1033 = "Status";
				}

				public static class StatusCode
				{
					public const string _1033 = "Status Reason";
				}

				public static class TimeZoneRuleVersionNumber
				{
					public const string _1033 = "Time Zone Rule Version Number";
				}

				public static class TotalAmount
				{
					public const string _1033 = "Total Amount";
				}

				public static class TotalAmount_Base
				{
					public const string _1033 = "Total Amount (Base)";
				}

				public static class TotalAmountLessFreight
				{
					public const string _1033 = "Total Pre-Freight Amount";
				}

				public static class TotalAmountLessFreight_Base
				{
					public const string _1033 = "Total Pre-Freight Amount (Base)";
				}

				public static class TotalDiscountAmount
				{
					public const string _1033 = "Total Discount Amount";
				}

				public static class TotalDiscountAmount_Base
				{
					public const string _1033 = "Total Discount Amount (Base)";
				}

				public static class TotalLineItemAmount
				{
					public const string _1033 = "Total Detail Amount";
				}

				public static class TotalLineItemAmount_Base
				{
					public const string _1033 = "Total Detail Amount (Base)";
				}

				public static class TotalLineItemDiscountAmount
				{
					public const string _1033 = "Total Line Item Discount Amount";
				}

				public static class TotalLineItemDiscountAmount_Base
				{
					public const string _1033 = "Total Line Item Discount Amount (Base)";
				}

				public static class TotalTax
				{
					public const string _1033 = "Total Tax";
				}

				public static class TotalTax_Base
				{
					public const string _1033 = "Total Tax (Base)";
				}

				public static class TransactionCurrencyId
				{
					public const string _1033 = "Currency";
				}

				public static class TraversedPath
				{
					public const string _1033 = "Traversed Path";
				}

				public static class UTCConversionTimeZoneCode
				{
					public const string _1033 = "UTC Conversion Time Zone Code";
				}

				public static class VersionNumber
				{
					public const string _1033 = "Version Number";
				}

				public static class WillCall
				{
					public const string _1033 = "Ship To";
				}

			}

			#endregion
		}

		#endregion

		#region Relations

		public static class Relations
		{
			public static class OneToN
			{
				public const string ActivityPartysOfParty = "invoice_activity_parties";
			}
			
			public static class NToOne
			{

				public static class Lookups
				{
				}
			}

			public static class NToN
			{

			}
		}

		#endregion

		#endregion
	}

	#endregion

	#region KnowledgeArticle

	/// <summary>
	/// 'KnowledgeArticle'.<br />
	/// Organizational knowledge for internal and external use.
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract, EntityLogicalName("knowledgearticle")]
	public partial class KnowledgeArticle : GeneratedEntity<KnowledgeArticle.RelationName>
	{
		
		public KnowledgeArticle() : 
				base(EntityLogicalName)
		{
		}
		
		public const string DisplayName = "Knowledge Article";
		public const string SchemaName = "KnowledgeArticle";
		public const string EntityLogicalName = "knowledgearticle";
		public const int EntityTypeCode = 9953;
		
		public class RelationName : RelationNameBase
		{
			public RelationName(string name) : base(name)
			{}
		}


		#region Attributes

		[AttributeLogicalName("knowledgearticleid"), DataMember]
		public override System.Guid Id
		{
			get
			{
				return (knowledgearticleId == null || knowledgearticleId == Guid.Empty) ? base.Id : knowledgearticleId.GetValueOrDefault();
			}
			
			set
			{
                if (value == Guid.Empty) {
                    Attributes.Remove("knowledgearticleid");
                    base.Id = value;
                } else {
				    knowledgearticleId = value;
                }
			}
		}

        /// <summary>
        /// [MaximumLength=4000] 
		/// 'ArticlePublicNumber'.<br />
        /// Shows the automatically generated ID exposed to customers, partners, and other external users to reference and look up articles.
        /// </summary>
		[AttributeLogicalName("articlepublicnumber"), MaxLength(4000)]
		public string ArticlePublicNumber
		{
			get
			{
				var value = GetAttributeValue<string>("articlepublicnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("articlepublicnumber"))
				    value = (string) backupAttributeCollection["articlepublicnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ArticlePublicNumber");
					SetAttributeValue("articlepublicnumber", value);
				OnPropertyChanged("ArticlePublicNumber");
			}
		}

        /// <summary>
        ///  
		/// 'bby_addcomments'.<br />
        /// This field is used in the BPF for revised articles to force the author to add a comment noting what changes were made in the minor revision.
        /// </summary>
		[AttributeLogicalName("bby_addcomments")]
		public bool? bby_addcomments
		{
			get
			{
				var value = GetAttributeValue<bool?>("bby_addcomments");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("bby_addcomments"))
				    value = (bool?) backupAttributeCollection["bby_addcomments"];
			    return value;
			}
			set
			{
				OnPropertyChanging("bby_addcomments");
					SetAttributeValue("bby_addcomments", value);
				OnPropertyChanged("bby_addcomments");
			}
		}

        public IDictionary<int, string> bby_addcommentsLabels
        {
		    get
		    {
                var value = GetAttributeValue<bool?>("bby_addcomments");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("bby_addcomments"))
				    value = (bool?) backupAttributeCollection["bby_addcomments"];
                if (value == null)
                    return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("bby_addcomments", (bool) value ? 1 : 0, 1033) },
                        };
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'bby_approvaltype'.<br />
        /// Field that displays either the approver field (user) or the approving team (team) field for article new process.
        /// </summary>
		[AttributeLogicalName("bby_approvaltype")]
		public bby_approvaltypeEnum? bby_approvaltype
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("bby_approvaltype");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("bby_approvaltype"))
				    value = (OptionSetValue) backupAttributeCollection["bby_approvaltype"];
                return value == null ? (bby_approvaltypeEnum?) null : (bby_approvaltypeEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("bby_approvaltype");
                if (value != null)
				    SetAttributeValue("bby_approvaltype", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("bby_approvaltype", value);
				OnPropertyChanged("bby_approvaltype");
			}
		}

        public IDictionary<int, string> bby_approvaltypeLabels
        {
		    get
		    {
                var value = GetAttributeValue<OptionSetValue>("bby_approvaltype");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("bby_approvaltype"))
				    value = (OptionSetValue) backupAttributeCollection["bby_approvaltype"];
                if (value == null)
                    return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("bby_approvaltype", value.Value, 1033) },
                        };
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'bby_approver'.<br />
        /// Lookup field populated by authors that puts the article in the proper stream for review/approval.
        /// </summary>
		[AttributeLogicalName("bby_approver")]
		public Guid? bby_approver
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("bby_approver");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("bby_approver"))
				    value = (EntityReference) backupAttributeCollection["bby_approver"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("bby_approver");
                if (value != null)
				    SetAttributeValue("bby_approver", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("bby_approver", value);
				OnPropertyChanged("bby_approver");
			}
		}

        public string bby_approverName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("bby_approver");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("bby_approver"))
				    value = (EntityReference) backupAttributeCollection["bby_approver"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_fullname", "systemuser", "systemuserid", "bby_approver")]
        public IDictionary<int, string> bby_approverLabels { get; set; }

        /// <summary>
        ///  
		/// 'bby_approvinggroup'.<br />
        /// Approving group is selected by the user in the author stage to assign article to a group for approval. The actual team is set via workflow.
        /// </summary>
		[AttributeLogicalName("bby_approvinggroup")]
		public Guid? bby_approvinggroup
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("bby_approvinggroup");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("bby_approvinggroup"))
				    value = (EntityReference) backupAttributeCollection["bby_approvinggroup"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("bby_approvinggroup");
                if (value != null)
				    SetAttributeValue("bby_approvinggroup", new EntityReference("bby_knowledgearticlegroup", value.Value));
                else
					SetAttributeValue("bby_approvinggroup", value);
				OnPropertyChanged("bby_approvinggroup");
			}
		}

        public string bby_approvinggroupName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("bby_approvinggroup");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("bby_approvinggroup"))
				    value = (EntityReference) backupAttributeCollection["bby_approvinggroup"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_bby_name", "bby_knowledgearticlegroup", "bby_knowledgearticlegroupid", "bby_approvinggroup")]
        public IDictionary<int, string> bby_approvinggroupLabels { get; set; }

        /// <summary>
        ///  
		/// 'bby_approvingteam'.<br />
        /// Field used to assign articles to a team rather than a user for approval.
        /// </summary>
		[AttributeLogicalName("bby_approvingteam")]
		public Guid? bby_approvingteam
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("bby_approvingteam");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("bby_approvingteam"))
				    value = (EntityReference) backupAttributeCollection["bby_approvingteam"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("bby_approvingteam");
                if (value != null)
				    SetAttributeValue("bby_approvingteam", new EntityReference("team", value.Value));
                else
					SetAttributeValue("bby_approvingteam", value);
				OnPropertyChanged("bby_approvingteam");
			}
		}

        public string bby_approvingteamName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("bby_approvingteam");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("bby_approvingteam"))
				    value = (EntityReference) backupAttributeCollection["bby_approvingteam"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_name", "team", "teamid", "bby_approvingteam")]
        public IDictionary<int, string> bby_approvingteamLabels { get; set; }

        /// <summary>
        /// [MaximumLength=100] 
		/// 'bby_articlepublicnumbersearch'.<br />
        /// This field is used to replicate the article public number without the prefix and is used by EDI when searching for just the article number minus the prefix.
        /// </summary>
		[AttributeLogicalName("bby_articlepublicnumbersearch"), MaxLength(100)]
		public string bby_articlepublicnumbersearch
		{
			get
			{
				var value = GetAttributeValue<string>("bby_articlepublicnumbersearch");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("bby_articlepublicnumbersearch"))
				    value = (string) backupAttributeCollection["bby_articlepublicnumbersearch"];
			    return value;
			}
			set
			{
				OnPropertyChanging("bby_articlepublicnumbersearch");
					SetAttributeValue("bby_articlepublicnumbersearch", value);
				OnPropertyChanged("bby_articlepublicnumbersearch");
			}
		}

        /// <summary>
        ///  
		/// 'bby_articleverified'.<br />
        /// Manual Field in ISH, only visible when Tech Help content type is selected
        /// </summary>
		[AttributeLogicalName("bby_articleverified")]
		public bby_articleverifiedEnum? bby_articleverified
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("bby_articleverified");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("bby_articleverified"))
				    value = (OptionSetValue) backupAttributeCollection["bby_articleverified"];
                return value == null ? (bby_articleverifiedEnum?) null : (bby_articleverifiedEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("bby_articleverified");
                if (value != null)
				    SetAttributeValue("bby_articleverified", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("bby_articleverified", value);
				OnPropertyChanged("bby_articleverified");
			}
		}

        public IDictionary<int, string> bby_articleverifiedLabels
        {
		    get
		    {
                var value = GetAttributeValue<OptionSetValue>("bby_articleverified");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("bby_articleverified"))
				    value = (OptionSetValue) backupAttributeCollection["bby_articleverified"];
                if (value == null)
                    return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("bby_articleverified", value.Value, 1033) },
                        };
            }
            set
            {}
        }

		[AttributeLogicalName("bby_associatedcategoriesdata"), MaxLength(40000)]
		public string bby_AssociatedCategoriesData
		{
			get
			{
				var value = GetAttributeValue<string>("bby_associatedcategoriesdata");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("bby_associatedcategoriesdata"))
				    value = (string) backupAttributeCollection["bby_associatedcategoriesdata"];
			    return value;
			}
			set
			{
				OnPropertyChanging("bby_AssociatedCategoriesData");
					SetAttributeValue("bby_associatedcategoriesdata", value);
				OnPropertyChanged("bby_AssociatedCategoriesData");
			}
		}

        /// <summary>
        /// [MaximumLength=2000] 
		/// 'bby_attachmentdetails'.<br />
        /// Attachment Details
        /// </summary>
		[AttributeLogicalName("bby_attachmentdetails"), MaxLength(2000)]
		public string bby_attachmentdetails
		{
			get
			{
				var value = GetAttributeValue<string>("bby_attachmentdetails");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("bby_attachmentdetails"))
				    value = (string) backupAttributeCollection["bby_attachmentdetails"];
			    return value;
			}
			set
			{
				OnPropertyChanging("bby_attachmentdetails");
					SetAttributeValue("bby_attachmentdetails", value);
				OnPropertyChanged("bby_attachmentdetails");
			}
		}

		[AttributeLogicalName("bby_attachments"), MaxLength(1048576)]
		public string bby_attachments
		{
			get
			{
				var value = GetAttributeValue<string>("bby_attachments");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("bby_attachments"))
				    value = (string) backupAttributeCollection["bby_attachments"];
			    return value;
			}
			set
			{
				OnPropertyChanging("bby_attachments");
					SetAttributeValue("bby_attachments", value);
				OnPropertyChanged("bby_attachments");
			}
		}

		[AttributeLogicalName("bby_blobcontainername"), MaxLength(250)]
		public string bby_blobcontainername
		{
			get
			{
				var value = GetAttributeValue<string>("bby_blobcontainername");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("bby_blobcontainername"))
				    value = (string) backupAttributeCollection["bby_blobcontainername"];
			    return value;
			}
			set
			{
				OnPropertyChanging("bby_blobcontainername");
					SetAttributeValue("bby_blobcontainername", value);
				OnPropertyChanged("bby_blobcontainername");
			}
		}

        /// <summary>
        /// [MaximumLength=4000] 
		/// 'bby_categories'.<br />
        /// This field contains a rollup of all associated Category GUIDs. When searching the portal, this field is evaluated to match queried category.
        /// </summary>
		[AttributeLogicalName("bby_categories"), MaxLength(4000)]
		public string bby_categories
		{
			get
			{
				var value = GetAttributeValue<string>("bby_categories");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("bby_categories"))
				    value = (string) backupAttributeCollection["bby_categories"];
			    return value;
			}
			set
			{
				OnPropertyChanging("bby_categories");
					SetAttributeValue("bby_categories", value);
				OnPropertyChanged("bby_categories");
			}
		}

		[AttributeLogicalName("bby_categorydata"), MaxLength(10000)]
		public string bby_categorydata
		{
			get
			{
				var value = GetAttributeValue<string>("bby_categorydata");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("bby_categorydata"))
				    value = (string) backupAttributeCollection["bby_categorydata"];
			    return value;
			}
			set
			{
				OnPropertyChanging("bby_categorydata");
					SetAttributeValue("bby_categorydata", value);
				OnPropertyChanged("bby_categorydata");
			}
		}

		[AttributeLogicalName("bby_categoryguids"), MaxLength(66000)]
		public string bby_categoryguids
		{
			get
			{
				var value = GetAttributeValue<string>("bby_categoryguids");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("bby_categoryguids"))
				    value = (string) backupAttributeCollection["bby_categoryguids"];
			    return value;
			}
			set
			{
				OnPropertyChanging("bby_categoryguids");
					SetAttributeValue("bby_categoryguids", value);
				OnPropertyChanged("bby_categoryguids");
			}
		}

        /// <summary>
        ///  
		/// 'bby_contentowner'.<br />
        /// Business Owner responsible for content within article.
        /// </summary>
		[AttributeLogicalName("bby_contentowner")]
		public Guid? bby_contentowner
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("bby_contentowner");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("bby_contentowner"))
				    value = (EntityReference) backupAttributeCollection["bby_contentowner"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("bby_contentowner");
                if (value != null)
				    SetAttributeValue("bby_contentowner", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("bby_contentowner", value);
				OnPropertyChanged("bby_contentowner");
			}
		}

        public string bby_contentownerName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("bby_contentowner");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("bby_contentowner"))
				    value = (EntityReference) backupAttributeCollection["bby_contentowner"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_fullname", "systemuser", "systemuserid", "bby_contentowner")]
        public IDictionary<int, string> bby_contentownerLabels { get; set; }

        /// <summary>
        /// [Required] 
		/// 'bby_contenttype'.<br />
        /// Option set field used to select the content type of each article.
        /// </summary>
		[AttributeLogicalName("bby_contenttype"), Required]
		public bby_contenttypeEnum? bby_contenttype
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("bby_contenttype");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("bby_contenttype"))
				    value = (OptionSetValue) backupAttributeCollection["bby_contenttype"];
                return value == null ? (bby_contenttypeEnum?) null : (bby_contenttypeEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("bby_contenttype");
                if (value != null)
				    SetAttributeValue("bby_contenttype", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("bby_contenttype", value);
				OnPropertyChanged("bby_contenttype");
			}
		}

        public IDictionary<int, string> bby_contenttypeLabels
        {
		    get
		    {
                var value = GetAttributeValue<OptionSetValue>("bby_contenttype");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("bby_contenttype"))
				    value = (OptionSetValue) backupAttributeCollection["bby_contenttype"];
                if (value == null)
                    return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("bby_contenttype", value.Value, 1033) },
                        };
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'bby_displaytype'.<br />
        /// Field that enables decision tree functionality on that article in the portal.
        /// </summary>
		[AttributeLogicalName("bby_displaytype")]
		public bby_displaytypeEnum? bby_displaytype
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("bby_displaytype");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("bby_displaytype"))
				    value = (OptionSetValue) backupAttributeCollection["bby_displaytype"];
                return value == null ? (bby_displaytypeEnum?) null : (bby_displaytypeEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("bby_displaytype");
                if (value != null)
				    SetAttributeValue("bby_displaytype", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("bby_displaytype", value);
				OnPropertyChanged("bby_displaytype");
			}
		}

        public IDictionary<int, string> bby_displaytypeLabels
        {
		    get
		    {
                var value = GetAttributeValue<OptionSetValue>("bby_displaytype");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("bby_displaytype"))
				    value = (OptionSetValue) backupAttributeCollection["bby_displaytype"];
                if (value == null)
                    return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("bby_displaytype", value.Value, 1033) },
                        };
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'bby_featured'.<br />
        /// This field is used to send the article into the featured section in the portal.
        /// </summary>
		[AttributeLogicalName("bby_featured")]
		public bool? bby_featured
		{
			get
			{
				var value = GetAttributeValue<bool?>("bby_featured");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("bby_featured"))
				    value = (bool?) backupAttributeCollection["bby_featured"];
			    return value;
			}
			set
			{
				OnPropertyChanging("bby_featured");
					SetAttributeValue("bby_featured", value);
				OnPropertyChanged("bby_featured");
			}
		}

        public IDictionary<int, string> bby_featuredLabels
        {
		    get
		    {
                var value = GetAttributeValue<bool?>("bby_featured");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("bby_featured"))
				    value = (bool?) backupAttributeCollection["bby_featured"];
                if (value == null)
                    return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("bby_featured", (bool) value ? 1 : 0, 1033) },
                        };
            }
            set
            {}
        }

        /// <summary>
        /// [Range(0, 100)] 
		/// 'bby_feedback_avg'.<br />
        /// This field holds the average of yes votes to the total number of votes.
        /// </summary>
		[AttributeLogicalName("bby_feedback_avg"), InRange("0", "100", typeof(int))]
		public int? bby_feedback_avg
		{
			get
			{
				var value = GetAttributeValue<int?>("bby_feedback_avg");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("bby_feedback_avg"))
				    value = (int?) backupAttributeCollection["bby_feedback_avg"];
			    return value;
			}
			set
			{
				OnPropertyChanging("bby_feedback_avg");
					SetAttributeValue("bby_feedback_avg", value);
				OnPropertyChanged("bby_feedback_avg");
			}
		}

        /// <summary>
        /// [Range(0, 1000000)] 
		/// 'bby_feedback_no'.<br />
        /// This field holds the aggregate "No" votes from the portal and is used to display ratings for articles in the portal.
        /// </summary>
		[AttributeLogicalName("bby_feedback_no"), InRange("0", "1000000", typeof(int))]
		public int? bby_feedback_no
		{
			get
			{
				var value = GetAttributeValue<int?>("bby_feedback_no");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("bby_feedback_no"))
				    value = (int?) backupAttributeCollection["bby_feedback_no"];
			    return value;
			}
			set
			{
				OnPropertyChanging("bby_feedback_no");
					SetAttributeValue("bby_feedback_no", value);
				OnPropertyChanged("bby_feedback_no");
			}
		}

        /// <summary>
        /// [Range(0, 1000000)] 
		/// 'bby_feedback_yes'.<br />
        /// This field holds the aggregate "Yes" votes from the portal and is used to display ratings for articles in the portal.
        /// </summary>
		[AttributeLogicalName("bby_feedback_yes"), InRange("0", "1000000", typeof(int))]
		public int? bby_feedback_yes
		{
			get
			{
				var value = GetAttributeValue<int?>("bby_feedback_yes");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("bby_feedback_yes"))
				    value = (int?) backupAttributeCollection["bby_feedback_yes"];
			    return value;
			}
			set
			{
				OnPropertyChanging("bby_feedback_yes");
					SetAttributeValue("bby_feedback_yes", value);
				OnPropertyChanged("bby_feedback_yes");
			}
		}

        /// <summary>
        ///  
		/// 'bby_hasattachments'.<br />
        /// Has Attachments
        /// </summary>
		[AttributeLogicalName("bby_hasattachments")]
		public bool? bby_hasattachments
		{
			get
			{
				var value = GetAttributeValue<bool?>("bby_hasattachments");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("bby_hasattachments"))
				    value = (bool?) backupAttributeCollection["bby_hasattachments"];
			    return value;
			}
			set
			{
				OnPropertyChanging("bby_hasattachments");
					SetAttributeValue("bby_hasattachments", value);
				OnPropertyChanged("bby_hasattachments");
			}
		}

        public IDictionary<int, string> bby_hasattachmentsLabels
        {
		    get
		    {
                var value = GetAttributeValue<bool?>("bby_hasattachments");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("bby_hasattachments"))
				    value = (bool?) backupAttributeCollection["bby_hasattachments"];
                if (value == null)
                    return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("bby_hasattachments", (bool) value ? 1 : 0, 1033) },
                        };
            }
            set
            {}
        }

		[AttributeLogicalName("bby_hiddenfeedbackno"), InRange("0", "2147483647", typeof(int))]
		public int? bby_hiddenfeedbackno
		{
			get
			{
				var value = GetAttributeValue<int?>("bby_hiddenfeedbackno");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("bby_hiddenfeedbackno"))
				    value = (int?) backupAttributeCollection["bby_hiddenfeedbackno"];
			    return value;
			}
			set
			{
				OnPropertyChanging("bby_hiddenfeedbackno");
					SetAttributeValue("bby_hiddenfeedbackno", value);
				OnPropertyChanged("bby_hiddenfeedbackno");
			}
		}

		[AttributeLogicalName("bby_hiddenfeedbackyes"), InRange("0", "2147483647", typeof(int))]
		public int? bby_hiddenfeedbackyes
		{
			get
			{
				var value = GetAttributeValue<int?>("bby_hiddenfeedbackyes");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("bby_hiddenfeedbackyes"))
				    value = (int?) backupAttributeCollection["bby_hiddenfeedbackyes"];
			    return value;
			}
			set
			{
				OnPropertyChanging("bby_hiddenfeedbackyes");
					SetAttributeValue("bby_hiddenfeedbackyes", value);
				OnPropertyChanged("bby_hiddenfeedbackyes");
			}
		}

		[AttributeLogicalName("bby_isratingcumilative")]
		public bool? bby_isratingcumilative
		{
			get
			{
				var value = GetAttributeValue<bool?>("bby_isratingcumilative");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("bby_isratingcumilative"))
				    value = (bool?) backupAttributeCollection["bby_isratingcumilative"];
			    return value;
			}
			set
			{
				OnPropertyChanging("bby_isratingcumilative");
					SetAttributeValue("bby_isratingcumilative", value);
				OnPropertyChanged("bby_isratingcumilative");
			}
		}

        public IDictionary<int, string> bby_isratingcumilativeLabels
        {
		    get
		    {
                var value = GetAttributeValue<bool?>("bby_isratingcumilative");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("bby_isratingcumilative"))
				    value = (bool?) backupAttributeCollection["bby_isratingcumilative"];
                if (value == null)
                    return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("bby_isratingcumilative", (bool) value ? 1 : 0, 1033) },
                        };
            }
            set
            {}
        }

        /// <summary>
        /// [MaximumLength=500] 
		/// 'bby_kanaid'.<br />
        /// Holds the value of the legacy Kana ID.
        /// </summary>
		[AttributeLogicalName("bby_kanaid"), MaxLength(500)]
		public string bby_kanaid
		{
			get
			{
				var value = GetAttributeValue<string>("bby_kanaid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("bby_kanaid"))
				    value = (string) backupAttributeCollection["bby_kanaid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("bby_kanaid");
					SetAttributeValue("bby_kanaid", value);
				OnPropertyChanged("bby_kanaid");
			}
		}

        /// <summary>
        /// [MaximumLength=500] 
		/// 'bby_kanamigratablereference'.<br />
        /// Holds the legacy Kana Migration Reference value.
        /// </summary>
		[AttributeLogicalName("bby_kanamigratablereference"), MaxLength(500)]
		public string bby_kanamigratablereference
		{
			get
			{
				var value = GetAttributeValue<string>("bby_kanamigratablereference");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("bby_kanamigratablereference"))
				    value = (string) backupAttributeCollection["bby_kanamigratablereference"];
			    return value;
			}
			set
			{
				OnPropertyChanging("bby_kanamigratablereference");
					SetAttributeValue("bby_kanamigratablereference", value);
				OnPropertyChanged("bby_kanamigratablereference");
			}
		}

		[AttributeLogicalName("bby_keywordssearch"), MaxLength(4000)]
		public string bby_keywordssearch
		{
			get
			{
				var value = GetAttributeValue<string>("bby_keywordssearch");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("bby_keywordssearch"))
				    value = (string) backupAttributeCollection["bby_keywordssearch"];
			    return value;
			}
			set
			{
				OnPropertyChanging("bby_keywordssearch");
					SetAttributeValue("bby_keywordssearch", value);
				OnPropertyChanged("bby_keywordssearch");
			}
		}

		[AttributeLogicalName("bby_knowledgearticlewebcals"), MaxLength(4000)]
		public string bby_knowledgearticlewebcals
		{
			get
			{
				var value = GetAttributeValue<string>("bby_knowledgearticlewebcals");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("bby_knowledgearticlewebcals"))
				    value = (string) backupAttributeCollection["bby_knowledgearticlewebcals"];
			    return value;
			}
			set
			{
				OnPropertyChanging("bby_knowledgearticlewebcals");
					SetAttributeValue("bby_knowledgearticlewebcals", value);
				OnPropertyChanged("bby_knowledgearticlewebcals");
			}
		}

        /// <summary>
        ///  
		/// 'bby_lastnotificationdate'.<br />
        /// Denotes the last email notification date which needs to be review the article
        /// </summary>
		[AttributeLogicalName("bby_lastnotificationdate")]
		public DateTime? bby_lastnotificationdate
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("bby_lastnotificationdate");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("bby_lastnotificationdate"))
				    value = (DateTime?) backupAttributeCollection["bby_lastnotificationdate"];
			    return value;
			}
			set
			{
				OnPropertyChanging("bby_lastnotificationdate");
					SetAttributeValue("bby_lastnotificationdate", value);
				OnPropertyChanged("bby_lastnotificationdate");
			}
		}

        /// <summary>
        /// [Range(0, 100)] 
		/// 'bby_notificationcount'.<br />
        /// Email notification count to review the articles. Each 6 month the count will be increased in case of the article is not getting reviewed.
        /// </summary>
		[AttributeLogicalName("bby_notificationcount"), InRange("0", "100", typeof(int))]
		public int? bby_notificationcount
		{
			get
			{
				var value = GetAttributeValue<int?>("bby_notificationcount");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("bby_notificationcount"))
				    value = (int?) backupAttributeCollection["bby_notificationcount"];
			    return value;
			}
			set
			{
				OnPropertyChanging("bby_notificationcount");
					SetAttributeValue("bby_notificationcount", value);
				OnPropertyChanged("bby_notificationcount");
			}
		}

        /// <summary>
        ///  
		/// 'bby_portalcreatedby'.<br />
        /// User who submitted the article via edi portal using Propose Article.
        /// </summary>
		[AttributeLogicalName("bby_portalcreatedby")]
		public Guid? bby_portalcreatedby
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("bby_portalcreatedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("bby_portalcreatedby"))
				    value = (EntityReference) backupAttributeCollection["bby_portalcreatedby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("bby_portalcreatedby");
                if (value != null)
				    SetAttributeValue("bby_portalcreatedby", new EntityReference("contact", value.Value));
                else
					SetAttributeValue("bby_portalcreatedby", value);
				OnPropertyChanged("bby_portalcreatedby");
			}
		}

        public string bby_portalcreatedbyName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("bby_portalcreatedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("bby_portalcreatedby"))
				    value = (EntityReference) backupAttributeCollection["bby_portalcreatedby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_fullname", "contact", "contactid", "bby_portalcreatedby")]
        public IDictionary<int, string> bby_portalcreatedbyLabels { get; set; }

        /// <summary>
        ///  
		/// 'bby_portaleditor'.<br />
        /// This field controls write access to an article in the portal. Used in conjunction with the security model to limit publish permissions on a more granular level.
        /// </summary>
		[AttributeLogicalName("bby_portaleditor")]
		public Guid? bby_portaleditor
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("bby_portaleditor");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("bby_portaleditor"))
				    value = (EntityReference) backupAttributeCollection["bby_portaleditor"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("bby_portaleditor");
                if (value != null)
				    SetAttributeValue("bby_portaleditor", new EntityReference("contact", value.Value));
                else
					SetAttributeValue("bby_portaleditor", value);
				OnPropertyChanged("bby_portaleditor");
			}
		}

        public string bby_portaleditorName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("bby_portaleditor");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("bby_portaleditor"))
				    value = (EntityReference) backupAttributeCollection["bby_portaleditor"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_fullname", "contact", "contactid", "bby_portaleditor")]
        public IDictionary<int, string> bby_portaleditorLabels { get; set; }

        /// <summary>
        ///  
		/// 'bby_portalmodifiedon'.<br />
        /// Date the article was published last or date field was manually updated by KB Admin team.
        /// </summary>
		[AttributeLogicalName("bby_portalmodifiedon")]
		public DateTime? bby_portalmodifiedon
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("bby_portalmodifiedon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("bby_portalmodifiedon"))
				    value = (DateTime?) backupAttributeCollection["bby_portalmodifiedon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("bby_portalmodifiedon");
					SetAttributeValue("bby_portalmodifiedon", value);
				OnPropertyChanged("bby_portalmodifiedon");
			}
		}

		[AttributeLogicalName("bby_productcategories"), MaxLength(1000)]
		public string bby_productcategories
		{
			get
			{
				var value = GetAttributeValue<string>("bby_productcategories");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("bby_productcategories"))
				    value = (string) backupAttributeCollection["bby_productcategories"];
			    return value;
			}
			set
			{
				OnPropertyChanging("bby_productcategories");
					SetAttributeValue("bby_productcategories", value);
				OnPropertyChanged("bby_productcategories");
			}
		}

		[AttributeLogicalName("bby_productdata"), MaxLength(4000)]
		public string bby_productdata
		{
			get
			{
				var value = GetAttributeValue<string>("bby_productdata");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("bby_productdata"))
				    value = (string) backupAttributeCollection["bby_productdata"];
			    return value;
			}
			set
			{
				OnPropertyChanging("bby_productdata");
					SetAttributeValue("bby_productdata", value);
				OnPropertyChanged("bby_productdata");
			}
		}

		[AttributeLogicalName("bby_productdatasearch"), MaxLength(4000)]
		public string bby_productdatasearch
		{
			get
			{
				var value = GetAttributeValue<string>("bby_productdatasearch");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("bby_productdatasearch"))
				    value = (string) backupAttributeCollection["bby_productdatasearch"];
			    return value;
			}
			set
			{
				OnPropertyChanging("bby_productdatasearch");
					SetAttributeValue("bby_productdatasearch", value);
				OnPropertyChanged("bby_productdatasearch");
			}
		}

		[AttributeLogicalName("bby_productmodelnumbers"), MaxLength(1000)]
		public string bby_productmodelnumbers
		{
			get
			{
				var value = GetAttributeValue<string>("bby_productmodelnumbers");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("bby_productmodelnumbers"))
				    value = (string) backupAttributeCollection["bby_productmodelnumbers"];
			    return value;
			}
			set
			{
				OnPropertyChanging("bby_productmodelnumbers");
					SetAttributeValue("bby_productmodelnumbers", value);
				OnPropertyChanged("bby_productmodelnumbers");
			}
		}

		[AttributeLogicalName("bby_productmodelnumberssearch"), MaxLength(1000)]
		public string bby_productmodelnumberssearch
		{
			get
			{
				var value = GetAttributeValue<string>("bby_productmodelnumberssearch");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("bby_productmodelnumberssearch"))
				    value = (string) backupAttributeCollection["bby_productmodelnumberssearch"];
			    return value;
			}
			set
			{
				OnPropertyChanging("bby_productmodelnumberssearch");
					SetAttributeValue("bby_productmodelnumberssearch", value);
				OnPropertyChanged("bby_productmodelnumberssearch");
			}
		}

		[AttributeLogicalName("bby_productvendors"), MaxLength(1000)]
		public string bby_productvendors
		{
			get
			{
				var value = GetAttributeValue<string>("bby_productvendors");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("bby_productvendors"))
				    value = (string) backupAttributeCollection["bby_productvendors"];
			    return value;
			}
			set
			{
				OnPropertyChanging("bby_productvendors");
					SetAttributeValue("bby_productvendors", value);
				OnPropertyChanged("bby_productvendors");
			}
		}

		[AttributeLogicalName("bby_productvendorssearch"), MaxLength(1000)]
		public string bby_productvendorssearch
		{
			get
			{
				var value = GetAttributeValue<string>("bby_productvendorssearch");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("bby_productvendorssearch"))
				    value = (string) backupAttributeCollection["bby_productvendorssearch"];
			    return value;
			}
			set
			{
				OnPropertyChanging("bby_productvendorssearch");
					SetAttributeValue("bby_productvendorssearch", value);
				OnPropertyChanged("bby_productvendorssearch");
			}
		}

        /// <summary>
        ///  
		/// 'bby_promoend'.<br />
        /// The end date for a promotional article.
        /// </summary>
		[AttributeLogicalName("bby_promoend")]
		public DateTime? bby_promoend
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("bby_promoend");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("bby_promoend"))
				    value = (DateTime?) backupAttributeCollection["bby_promoend"];
			    return value;
			}
			set
			{
				OnPropertyChanging("bby_promoend");
					SetAttributeValue("bby_promoend", value);
				OnPropertyChanged("bby_promoend");
			}
		}

        /// <summary>
        ///  
		/// 'bby_promostart'.<br />
        /// The start date for a promotional article.
        /// </summary>
		[AttributeLogicalName("bby_promostart")]
		public DateTime? bby_promostart
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("bby_promostart");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("bby_promostart"))
				    value = (DateTime?) backupAttributeCollection["bby_promostart"];
			    return value;
			}
			set
			{
				OnPropertyChanging("bby_promostart");
					SetAttributeValue("bby_promostart", value);
				OnPropertyChanged("bby_promostart");
			}
		}

		[AttributeLogicalName("bby_promotionaltype")]
		public bby_promotionaltypeEnum? bby_promotionaltype
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("bby_promotionaltype");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("bby_promotionaltype"))
				    value = (OptionSetValue) backupAttributeCollection["bby_promotionaltype"];
                return value == null ? (bby_promotionaltypeEnum?) null : (bby_promotionaltypeEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("bby_promotionaltype");
                if (value != null)
				    SetAttributeValue("bby_promotionaltype", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("bby_promotionaltype", value);
				OnPropertyChanged("bby_promotionaltype");
			}
		}

        public IDictionary<int, string> bby_promotionaltypeLabels
        {
		    get
		    {
                var value = GetAttributeValue<OptionSetValue>("bby_promotionaltype");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("bby_promotionaltype"))
				    value = (OptionSetValue) backupAttributeCollection["bby_promotionaltype"];
                if (value == null)
                    return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("bby_promotionaltype", value.Value, 1033) },
                        };
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'bby_publishedby'.<br />
        /// User who published this version of the article
        /// </summary>
		[AttributeLogicalName("bby_publishedby")]
		public Guid? bby_publishedby
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("bby_publishedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("bby_publishedby"))
				    value = (EntityReference) backupAttributeCollection["bby_publishedby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("bby_publishedby");
                if (value != null)
				    SetAttributeValue("bby_publishedby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("bby_publishedby", value);
				OnPropertyChanged("bby_publishedby");
			}
		}

        public string bby_publishedbyName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("bby_publishedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("bby_publishedby"))
				    value = (EntityReference) backupAttributeCollection["bby_publishedby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_fullname", "systemuser", "systemuserid", "bby_publishedby")]
        public IDictionary<int, string> bby_publishedbyLabels { get; set; }

        /// <summary>
        ///  
		/// 'bby_refreshportalcategories'.<br />
        /// A simple option set used to dirty a record and force save when update is clicked after a category add/remove on a knowledge article. The save triggers the plug in that updates the category GUIDs.
        /// </summary>
		[AttributeLogicalName("bby_refreshportalcategories")]
		public bool? bby_refreshportalcategories
		{
			get
			{
				var value = GetAttributeValue<bool?>("bby_refreshportalcategories");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("bby_refreshportalcategories"))
				    value = (bool?) backupAttributeCollection["bby_refreshportalcategories"];
			    return value;
			}
			set
			{
				OnPropertyChanging("bby_refreshportalcategories");
					SetAttributeValue("bby_refreshportalcategories", value);
				OnPropertyChanged("bby_refreshportalcategories");
			}
		}

        public IDictionary<int, string> bby_refreshportalcategoriesLabels
        {
		    get
		    {
                var value = GetAttributeValue<bool?>("bby_refreshportalcategories");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("bby_refreshportalcategories"))
				    value = (bool?) backupAttributeCollection["bby_refreshportalcategories"];
                if (value == null)
                    return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("bby_refreshportalcategories", (bool) value ? 1 : 0, 1033) },
                        };
            }
            set
            {}
        }

		[AttributeLogicalName("bby_rejectionreason"), MaxLength(2000)]
		public string bby_RejectionReason
		{
			get
			{
				var value = GetAttributeValue<string>("bby_rejectionreason");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("bby_rejectionreason"))
				    value = (string) backupAttributeCollection["bby_rejectionreason"];
			    return value;
			}
			set
			{
				OnPropertyChanging("bby_RejectionReason");
					SetAttributeValue("bby_rejectionreason", value);
				OnPropertyChanged("bby_RejectionReason");
			}
		}

		[AttributeLogicalName("bby_remindermessagecounter"), InRange("0", "2147483647", typeof(int))]
		public int? bby_remindermessagecounter
		{
			get
			{
				var value = GetAttributeValue<int?>("bby_remindermessagecounter");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("bby_remindermessagecounter"))
				    value = (int?) backupAttributeCollection["bby_remindermessagecounter"];
			    return value;
			}
			set
			{
				OnPropertyChanging("bby_remindermessagecounter");
					SetAttributeValue("bby_remindermessagecounter", value);
				OnPropertyChanged("bby_remindermessagecounter");
			}
		}

        /// <summary>
        ///  
		/// 'bby_securecontent'.<br />
        /// Watermark this article in edi
        /// </summary>
		[AttributeLogicalName("bby_securecontent")]
		public bool? bby_securecontent
		{
			get
			{
				var value = GetAttributeValue<bool?>("bby_securecontent");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("bby_securecontent"))
				    value = (bool?) backupAttributeCollection["bby_securecontent"];
			    return value;
			}
			set
			{
				OnPropertyChanging("bby_securecontent");
					SetAttributeValue("bby_securecontent", value);
				OnPropertyChanged("bby_securecontent");
			}
		}

        public IDictionary<int, string> bby_securecontentLabels
        {
		    get
		    {
                var value = GetAttributeValue<bool?>("bby_securecontent");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("bby_securecontent"))
				    value = (bool?) backupAttributeCollection["bby_securecontent"];
                if (value == null)
                    return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("bby_securecontent", (bool) value ? 1 : 0, 1033) },
                        };
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'bby_securitymodifiedon'.<br />
        /// Last modification that is relevant to the security engine.
        /// </summary>
		[AttributeLogicalName("bby_securitymodifiedon")]
		public DateTime? bby_securitymodifiedon
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("bby_securitymodifiedon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("bby_securitymodifiedon"))
				    value = (DateTime?) backupAttributeCollection["bby_securitymodifiedon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("bby_securitymodifiedon");
					SetAttributeValue("bby_securitymodifiedon", value);
				OnPropertyChanged("bby_securitymodifiedon");
			}
		}

        /// <summary>
        /// [Range(0, 2147483647)] 
		/// 'bby_totalfeedback'.<br />
        /// This field counts all feedback and sums them to show the total times an article has been voted for.
        /// </summary>
		[AttributeLogicalName("bby_totalfeedback"), InRange("0", "2147483647", typeof(int))]
		public int? bby_totalfeedback
		{
			get
			{
				var value = GetAttributeValue<int?>("bby_totalfeedback");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("bby_totalfeedback"))
				    value = (int?) backupAttributeCollection["bby_totalfeedback"];
			    return value;
			}
			set
			{
				OnPropertyChanging("bby_totalfeedback");
					SetAttributeValue("bby_totalfeedback", value);
				OnPropertyChanged("bby_totalfeedback");
			}
		}

        /// <summary>
        ///  
		/// 'bby_triggernotification'.<br />
        /// Trigger alert notifications to users
        /// </summary>
		[AttributeLogicalName("bby_triggernotification")]
		public bool? bby_triggernotification
		{
			get
			{
				var value = GetAttributeValue<bool?>("bby_triggernotification");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("bby_triggernotification"))
				    value = (bool?) backupAttributeCollection["bby_triggernotification"];
			    return value;
			}
			set
			{
				OnPropertyChanging("bby_triggernotification");
					SetAttributeValue("bby_triggernotification", value);
				OnPropertyChanged("bby_triggernotification");
			}
		}

        public IDictionary<int, string> bby_triggernotificationLabels
        {
		    get
		    {
                var value = GetAttributeValue<bool?>("bby_triggernotification");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("bby_triggernotification"))
				    value = (bool?) backupAttributeCollection["bby_triggernotification"];
                if (value == null)
                    return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("bby_triggernotification", (bool) value ? 1 : 0, 1033) },
                        };
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'bby_versioncreatedby'.<br />
        /// User who created any subsequent versions of the article (1.1, 1.2, etc.).
        /// </summary>
		[AttributeLogicalName("bby_versioncreatedby")]
		public Guid? bby_versioncreatedby
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("bby_versioncreatedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("bby_versioncreatedby"))
				    value = (EntityReference) backupAttributeCollection["bby_versioncreatedby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("bby_versioncreatedby");
                if (value != null)
				    SetAttributeValue("bby_versioncreatedby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("bby_versioncreatedby", value);
				OnPropertyChanged("bby_versioncreatedby");
			}
		}

        public string bby_versioncreatedbyName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("bby_versioncreatedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("bby_versioncreatedby"))
				    value = (EntityReference) backupAttributeCollection["bby_versioncreatedby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_fullname", "systemuser", "systemuserid", "bby_versioncreatedby")]
        public IDictionary<int, string> bby_versioncreatedbyLabels { get; set; }

		[AttributeLogicalName("bby_versionflag")]
		public bool? bby_versionflag
		{
			get
			{
				var value = GetAttributeValue<bool?>("bby_versionflag");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("bby_versionflag"))
				    value = (bool?) backupAttributeCollection["bby_versionflag"];
			    return value;
			}
			set
			{
				OnPropertyChanging("bby_versionflag");
					SetAttributeValue("bby_versionflag", value);
				OnPropertyChanged("bby_versionflag");
			}
		}

        public IDictionary<int, string> bby_versionflagLabels
        {
		    get
		    {
                var value = GetAttributeValue<bool?>("bby_versionflag");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("bby_versionflag"))
				    value = (bool?) backupAttributeCollection["bby_versionflag"];
                if (value == null)
                    return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("bby_versionflag", (bool) value ? 1 : 0, 1033) },
                        };
            }
            set
            {}
        }

		[AttributeLogicalName("bby_versionfromarticleid"), MaxLength(36)]
		public string bby_versionfromarticleid
		{
			get
			{
				var value = GetAttributeValue<string>("bby_versionfromarticleid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("bby_versionfromarticleid"))
				    value = (string) backupAttributeCollection["bby_versionfromarticleid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("bby_versionfromarticleid");
					SetAttributeValue("bby_versionfromarticleid", value);
				OnPropertyChanged("bby_versionfromarticleid");
			}
		}

        /// <summary>
        /// [MaximumLength=250] 
		/// 'bby_versioningcomments'.<br />
        /// Track the changes made to the new version in this field.
        /// </summary>
		[AttributeLogicalName("bby_versioningcomments"), MaxLength(250)]
		public string bby_versioningcomments
		{
			get
			{
				var value = GetAttributeValue<string>("bby_versioningcomments");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("bby_versioningcomments"))
				    value = (string) backupAttributeCollection["bby_versioningcomments"];
			    return value;
			}
			set
			{
				OnPropertyChanging("bby_versioningcomments");
					SetAttributeValue("bby_versioningcomments", value);
				OnPropertyChanged("bby_versioningcomments");
			}
		}

        /// <summary>
        ///  
		/// 'bby_versionnotesadded'.<br />
        /// Boolean field that is used to indicate that author made version notes after creating a new version.
        /// </summary>
		[AttributeLogicalName("bby_versionnotesadded")]
		public bool? bby_versionnotesadded
		{
			get
			{
				var value = GetAttributeValue<bool?>("bby_versionnotesadded");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("bby_versionnotesadded"))
				    value = (bool?) backupAttributeCollection["bby_versionnotesadded"];
			    return value;
			}
			set
			{
				OnPropertyChanging("bby_versionnotesadded");
					SetAttributeValue("bby_versionnotesadded", value);
				OnPropertyChanged("bby_versionnotesadded");
			}
		}

        public IDictionary<int, string> bby_versionnotesaddedLabels
        {
		    get
		    {
                var value = GetAttributeValue<bool?>("bby_versionnotesadded");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("bby_versionnotesadded"))
				    value = (bool?) backupAttributeCollection["bby_versionnotesadded"];
                if (value == null)
                    return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("bby_versionnotesadded", (bool) value ? 1 : 0, 1033) },
                        };
            }
            set
            {}
        }

        /// <summary>
        /// [MaximumLength=1073741823] 
		/// 'Content'.<br />
        /// Shows the body of the article stored in HTML format.
        /// </summary>
		[AttributeLogicalName("content"), MaxLength(1073741823)]
		public string Content
		{
			get
			{
				var value = GetAttributeValue<string>("content");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("content"))
				    value = (string) backupAttributeCollection["content"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Content");
					SetAttributeValue("content", value);
				OnPropertyChanged("Content");
			}
		}

        /// <summary>
        ///  
		/// 'CreatedBy'.<br />
        /// Unique identifier of the user who created the record.
        /// </summary>
		[AttributeLogicalName("createdby")]
		public Guid? CreatedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdby"))
				    value = (EntityReference) backupAttributeCollection["createdby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("CreatedBy");
                if (value != null)
				    SetAttributeValue("createdby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("createdby", value);
				OnPropertyChanged("CreatedBy");
			}
		}

        public string CreatedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdby"))
				    value = (EntityReference) backupAttributeCollection["createdby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_fullname", "systemuser", "systemuserid", "createdby")]
        public IDictionary<int, string> CreatedByLabels { get; set; }

        /// <summary>
        ///  
		/// 'CreatedOn'.<br />
        /// Date and time when the record was created.
        /// </summary>
		[AttributeLogicalName("createdon")]
		public DateTime? CreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("createdon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdon"))
				    value = (DateTime?) backupAttributeCollection["createdon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("CreatedOn");
					SetAttributeValue("createdon", value);
				OnPropertyChanged("CreatedOn");
			}
		}

        /// <summary>
        ///  
		/// 'CreatedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who created the record.
        /// </summary>
		[AttributeLogicalName("createdonbehalfby")]
		public Guid? CreatedOnBehalfBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["createdonbehalfby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("CreatedOnBehalfBy");
                if (value != null)
				    SetAttributeValue("createdonbehalfby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("createdonbehalfby", value);
				OnPropertyChanged("CreatedOnBehalfBy");
			}
		}

        public string CreatedOnBehalfByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["createdonbehalfby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_fullname", "systemuser", "systemuserid", "createdonbehalfby")]
        public IDictionary<int, string> CreatedOnBehalfByLabels { get; set; }

        /// <summary>
        /// [Required][MaximumLength=256] 
		/// 'Description'.<br />
        /// A short overview of the article, primarily used in search results and for search engine optimization.
        /// </summary>
		[AttributeLogicalName("description"), Required, MaxLength(256)]
		public string Description
		{
			get
			{
				var value = GetAttributeValue<string>("description");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("description"))
				    value = (string) backupAttributeCollection["description"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Description");
					SetAttributeValue("description", value);
				OnPropertyChanged("Description");
			}
		}

        /// <summary>
        /// [Range(0.0000000001, 100000000000)] 
		/// 'ExchangeRate'.<br />
        /// Exchange rate for the currency associated with the KnowledgeArticle with respect to the base currency.
        /// </summary>
		[AttributeLogicalName("exchangerate"), InRange("0.0000000001", "100000000000", typeof(decimal))]
		public decimal? ExchangeRate
		{
			get
			{
				var value = GetAttributeValue<decimal?>("exchangerate");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("exchangerate"))
				    value = (decimal?) backupAttributeCollection["exchangerate"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ExchangeRate");
					SetAttributeValue("exchangerate", value);
				OnPropertyChanged("ExchangeRate");
			}
		}

        /// <summary>
        ///  
		/// 'ExpirationDate'.<br />
        /// Enter an expiration date for the article. Leave this field blank for no expiration date.
        /// </summary>
		[AttributeLogicalName("expirationdate")]
		public DateTime? ExpirationDate
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("expirationdate");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("expirationdate"))
				    value = (DateTime?) backupAttributeCollection["expirationdate"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ExpirationDate");
					SetAttributeValue("expirationdate", value);
				OnPropertyChanged("ExpirationDate");
			}
		}

        /// <summary>
        /// [Range(0, 2147483647)] 
		/// 'ExpirationStateId'.<br />
        /// Contains the id of the expiration state of the entity.
        /// </summary>
		[AttributeLogicalName("expirationstateid"), InRange("0", "2147483647", typeof(int))]
		public int? ExpirationStateId
		{
			get
			{
				var value = GetAttributeValue<int?>("expirationstateid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("expirationstateid"))
				    value = (int?) backupAttributeCollection["expirationstateid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ExpirationStateId");
					SetAttributeValue("expirationstateid", value);
				OnPropertyChanged("ExpirationStateId");
			}
		}

        /// <summary>
        /// [Range(0, 2147483647)] 
		/// 'ExpirationStatusId'.<br />
        /// Contains the id of the expiration status of the entity.
        /// </summary>
		[AttributeLogicalName("expirationstatusid"), InRange("0", "2147483647", typeof(int))]
		public int? ExpirationStatusId
		{
			get
			{
				var value = GetAttributeValue<int?>("expirationstatusid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("expirationstatusid"))
				    value = (int?) backupAttributeCollection["expirationstatusid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ExpirationStatusId");
					SetAttributeValue("expirationstatusid", value);
				OnPropertyChanged("ExpirationStatusId");
			}
		}

        /// <summary>
        ///  
		/// 'ExpiredReviewOptions'.<br />
        /// Expired Review Options
        /// </summary>
		[AttributeLogicalName("expiredreviewoptions")]
		public ExpiredReviewOptionsEnum? ExpiredReviewOptions
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("expiredreviewoptions");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("expiredreviewoptions"))
				    value = (OptionSetValue) backupAttributeCollection["expiredreviewoptions"];
                return value == null ? (ExpiredReviewOptionsEnum?) null : (ExpiredReviewOptionsEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("ExpiredReviewOptions");
                if (value != null)
				    SetAttributeValue("expiredreviewoptions", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("expiredreviewoptions", value);
				OnPropertyChanged("ExpiredReviewOptions");
			}
		}

        public IDictionary<int, string> ExpiredReviewOptionsLabels
        {
		    get
		    {
                var value = GetAttributeValue<OptionSetValue>("expiredreviewoptions");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("expiredreviewoptions"))
				    value = (OptionSetValue) backupAttributeCollection["expiredreviewoptions"];
                if (value == null)
                    return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("expiredreviewoptions", value.Value, 1033) },
                        };
            }
            set
            {}
        }

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'ImportSequenceNumber'.<br />
        /// Sequence number of the import that created this record.
        /// </summary>
		[AttributeLogicalName("importsequencenumber"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? ImportSequenceNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("importsequencenumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("importsequencenumber"))
				    value = (int?) backupAttributeCollection["importsequencenumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ImportSequenceNumber");
					SetAttributeValue("importsequencenumber", value);
				OnPropertyChanged("ImportSequenceNumber");
			}
		}

        /// <summary>
        ///  
		/// 'IsInternal'.<br />
        /// Shows whether this article is only visible internally.
        /// </summary>
		[AttributeLogicalName("isinternal")]
		public bool? IsInternal
		{
			get
			{
				var value = GetAttributeValue<bool?>("isinternal");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("isinternal"))
				    value = (bool?) backupAttributeCollection["isinternal"];
			    return value;
			}
			set
			{
				OnPropertyChanging("IsInternal");
					SetAttributeValue("isinternal", value);
				OnPropertyChanged("IsInternal");
			}
		}

        public IDictionary<int, string> IsInternalLabels
        {
		    get
		    {
                var value = GetAttributeValue<bool?>("isinternal");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("isinternal"))
				    value = (bool?) backupAttributeCollection["isinternal"];
                if (value == null)
                    return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("isinternal", (bool) value ? 1 : 0, 1033) },
                        };
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'IsLatestVersion'.<br />
        /// Shows which version of the knowledge article is the latest version.
        /// </summary>
		[AttributeLogicalName("islatestversion")]
		public bool? IsLatestVersion
		{
			get
			{
				var value = GetAttributeValue<bool?>("islatestversion");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("islatestversion"))
				    value = (bool?) backupAttributeCollection["islatestversion"];
			    return value;
			}
			set
			{
				OnPropertyChanging("IsLatestVersion");
					SetAttributeValue("islatestversion", value);
				OnPropertyChanged("IsLatestVersion");
			}
		}

        public IDictionary<int, string> IsLatestVersionLabels
        {
		    get
		    {
                var value = GetAttributeValue<bool?>("islatestversion");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("islatestversion"))
				    value = (bool?) backupAttributeCollection["islatestversion"];
                if (value == null)
                    return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("islatestversion", (bool) value ? 1 : 0, 1033) },
                        };
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'IsPrimary'.<br />
        /// Select whether the article is the primary article.
        /// </summary>
		[AttributeLogicalName("isprimary")]
		public bool? IsPrimary
		{
			get
			{
				var value = GetAttributeValue<bool?>("isprimary");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("isprimary"))
				    value = (bool?) backupAttributeCollection["isprimary"];
			    return value;
			}
			set
			{
				OnPropertyChanging("IsPrimary");
					SetAttributeValue("isprimary", value);
				OnPropertyChanged("IsPrimary");
			}
		}

        public IDictionary<int, string> IsPrimaryLabels
        {
		    get
		    {
                var value = GetAttributeValue<bool?>("isprimary");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("isprimary"))
				    value = (bool?) backupAttributeCollection["isprimary"];
                if (value == null)
                    return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("isprimary", (bool) value ? 1 : 0, 1033) },
                        };
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'IsRootArticle'.<br />
        /// Select whether the article is the root article.
        /// </summary>
		[AttributeLogicalName("isrootarticle")]
		public bool? IsRootArticle
		{
			get
			{
				var value = GetAttributeValue<bool?>("isrootarticle");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("isrootarticle"))
				    value = (bool?) backupAttributeCollection["isrootarticle"];
			    return value;
			}
			set
			{
				OnPropertyChanging("IsRootArticle");
					SetAttributeValue("isrootarticle", value);
				OnPropertyChanged("IsRootArticle");
			}
		}

        public IDictionary<int, string> IsRootArticleLabels
        {
		    get
		    {
                var value = GetAttributeValue<bool?>("isrootarticle");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("isrootarticle"))
				    value = (bool?) backupAttributeCollection["isrootarticle"];
                if (value == null)
                    return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("isrootarticle", (bool) value ? 1 : 0, 1033) },
                        };
            }
            set
            {}
        }

        /// <summary>
        /// [MaximumLength=4000] 
		/// 'Keywords'.<br />
        /// Type keywords to be used for searches in knowledge base articles. Separate keywords by using commas.
        /// </summary>
		[AttributeLogicalName("keywords"), MaxLength(4000)]
		public string Keywords
		{
			get
			{
				var value = GetAttributeValue<string>("keywords");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("keywords"))
				    value = (string) backupAttributeCollection["keywords"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Keywords");
					SetAttributeValue("keywords", value);
				OnPropertyChanged("Keywords");
			}
		}

        /// <summary>
        ///  
		/// 'knowledgearticleId'.<br />
        /// Unique identifier for entity instances
        /// </summary>
		[AttributeLogicalName("knowledgearticleid")]
		public Guid? knowledgearticleId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("knowledgearticleid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("knowledgearticleid"))
				    value = (Guid?) backupAttributeCollection["knowledgearticleid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("knowledgearticleId");
                if (value != null)
					SetAttributeValue("knowledgearticleid", value);
				if (value != null)
					base.Id = value.Value;
				else
					Id = System.Guid.Empty;
				OnPropertyChanged("knowledgearticleId");
			}
		}

        /// <summary>
        /// [Range(0, 2147483647)] 
		/// 'KnowledgeArticleViews'.<br />
        /// Shows the total number of article views.
        /// </summary>
		[AttributeLogicalName("knowledgearticleviews"), InRange("0", "2147483647", typeof(int))]
		public int? KnowledgeArticleViews
		{
			get
			{
				var value = GetAttributeValue<int?>("knowledgearticleviews");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("knowledgearticleviews"))
				    value = (int?) backupAttributeCollection["knowledgearticleviews"];
			    return value;
			}
			set
			{
				OnPropertyChanging("KnowledgeArticleViews");
					SetAttributeValue("knowledgearticleviews", value);
				OnPropertyChanged("KnowledgeArticleViews");
			}
		}

        /// <summary>
        ///  
		/// 'KnowledgeArticleViews_Date'.<br />
        /// The date time for Knowledge Article View.
        /// </summary>
		[AttributeLogicalName("knowledgearticleviews_date")]
		public DateTime? KnowledgeArticleViews_Date
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("knowledgearticleviews_date");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("knowledgearticleviews_date"))
				    value = (DateTime?) backupAttributeCollection["knowledgearticleviews_date"];
			    return value;
			}
			set
			{
				OnPropertyChanging("KnowledgeArticleViews_Date");
					SetAttributeValue("knowledgearticleviews_date", value);
				OnPropertyChanged("KnowledgeArticleViews_Date");
			}
		}

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'KnowledgeArticleViews_State'.<br />
        /// State of Knowledge Article View.
        /// </summary>
		[AttributeLogicalName("knowledgearticleviews_state"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? KnowledgeArticleViews_State
		{
			get
			{
				var value = GetAttributeValue<int?>("knowledgearticleviews_state");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("knowledgearticleviews_state"))
				    value = (int?) backupAttributeCollection["knowledgearticleviews_state"];
			    return value;
			}
			set
			{
				OnPropertyChanging("KnowledgeArticleViews_State");
					SetAttributeValue("knowledgearticleviews_state", value);
				OnPropertyChanged("KnowledgeArticleViews_State");
			}
		}

        /// <summary>
        ///  
		/// 'LanguageLocaleId'.<br />
        /// Select the language that the article's content is in.
        /// </summary>
		[AttributeLogicalName("languagelocaleid")]
		public Guid? LanguageLocaleId
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("languagelocaleid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("languagelocaleid"))
				    value = (EntityReference) backupAttributeCollection["languagelocaleid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("LanguageLocaleId");
                if (value != null)
				    SetAttributeValue("languagelocaleid", new EntityReference("languagelocale", value.Value));
                else
					SetAttributeValue("languagelocaleid", value);
				OnPropertyChanged("LanguageLocaleId");
			}
		}

        public string LanguageLocaleIdName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("languagelocaleid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("languagelocaleid"))
				    value = (EntityReference) backupAttributeCollection["languagelocaleid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_name", "languagelocale", "languagelocaleid", "languagelocaleid")]
        public IDictionary<int, string> LanguageLocaleIdLabels { get; set; }

        /// <summary>
        /// [Range(0, 2147483647)] 
		/// 'MajorVersionNumber'.<br />
        /// Shows the major version number of this article's content.
        /// </summary>
		[AttributeLogicalName("majorversionnumber"), InRange("0", "2147483647", typeof(int))]
		public int? MajorVersionNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("majorversionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("majorversionnumber"))
				    value = (int?) backupAttributeCollection["majorversionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("MajorVersionNumber");
					SetAttributeValue("majorversionnumber", value);
				OnPropertyChanged("MajorVersionNumber");
			}
		}

        /// <summary>
        /// [Range(0, 2147483647)] 
		/// 'MinorVersionNumber'.<br />
        /// Shows the minor version number of this article's content.
        /// </summary>
		[AttributeLogicalName("minorversionnumber"), InRange("0", "2147483647", typeof(int))]
		public int? MinorVersionNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("minorversionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("minorversionnumber"))
				    value = (int?) backupAttributeCollection["minorversionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("MinorVersionNumber");
					SetAttributeValue("minorversionnumber", value);
				OnPropertyChanged("MinorVersionNumber");
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedBy'.<br />
        /// Unique identifier of the user who modified the record.
        /// </summary>
		[AttributeLogicalName("modifiedby")]
		public Guid? ModifiedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedby"))
				    value = (EntityReference) backupAttributeCollection["modifiedby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ModifiedBy");
                if (value != null)
				    SetAttributeValue("modifiedby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("modifiedby", value);
				OnPropertyChanged("ModifiedBy");
			}
		}

        public string ModifiedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedby"))
				    value = (EntityReference) backupAttributeCollection["modifiedby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_fullname", "systemuser", "systemuserid", "modifiedby")]
        public IDictionary<int, string> ModifiedByLabels { get; set; }

        /// <summary>
        ///  
		/// 'ModifiedOn'.<br />
        /// Date and time when the record was modified.
        /// </summary>
		[AttributeLogicalName("modifiedon")]
		public DateTime? ModifiedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("modifiedon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedon"))
				    value = (DateTime?) backupAttributeCollection["modifiedon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ModifiedOn");
					SetAttributeValue("modifiedon", value);
				OnPropertyChanged("ModifiedOn");
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who modified the record.
        /// </summary>
		[AttributeLogicalName("modifiedonbehalfby")]
		public Guid? ModifiedOnBehalfBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["modifiedonbehalfby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ModifiedOnBehalfBy");
                if (value != null)
				    SetAttributeValue("modifiedonbehalfby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("modifiedonbehalfby", value);
				OnPropertyChanged("ModifiedOnBehalfBy");
			}
		}

        public string ModifiedOnBehalfByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["modifiedonbehalfby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_fullname", "systemuser", "systemuserid", "modifiedonbehalfby")]
        public IDictionary<int, string> ModifiedOnBehalfByLabels { get; set; }

        /// <summary>
        ///  
		/// 'OverriddenCreatedOn'.<br />
        /// Date and time that the record was migrated.
        /// </summary>
		[AttributeLogicalName("overriddencreatedon")]
		public DateTime? OverriddenCreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("overriddencreatedon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("overriddencreatedon"))
				    value = (DateTime?) backupAttributeCollection["overriddencreatedon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("OverriddenCreatedOn");
					SetAttributeValue("overriddencreatedon", value);
				OnPropertyChanged("OverriddenCreatedOn");
			}
		}

        /// <summary>
        ///  
		/// 'OwnerId'.<br />
        /// Unique identifier of the user or team who owns the record.
        /// </summary>
		[AttributeLogicalName("ownerid")]
		public EntityReference OwnerId
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ownerid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ownerid"))
				    value = (EntityReference) backupAttributeCollection["ownerid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("OwnerId");
					SetAttributeValue("ownerid", value);
				OnPropertyChanged("OwnerId");
			}
		}

        public string OwnerIdName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ownerid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ownerid"))
				    value = (EntityReference) backupAttributeCollection["ownerid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        public IDictionary<int, string> OwnerIdLabels { get; set; }

        /// <summary>
        ///  
		/// 'OwningBusinessUnit'.<br />
        /// Unique identifier for the business unit that owns the record
        /// </summary>
		[AttributeLogicalName("owningbusinessunit")]
		public Guid? OwningBusinessUnit
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owningbusinessunit");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningbusinessunit"))
				    value = (EntityReference) backupAttributeCollection["owningbusinessunit"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningBusinessUnit");
                if (value != null)
				    SetAttributeValue("owningbusinessunit", new EntityReference("businessunit", value.Value));
                else
					SetAttributeValue("owningbusinessunit", value);
				OnPropertyChanged("OwningBusinessUnit");
			}
		}

        public string OwningBusinessUnitName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owningbusinessunit");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningbusinessunit"))
				    value = (EntityReference) backupAttributeCollection["owningbusinessunit"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_name", "businessunit", "businessunitid", "owningbusinessunit")]
        public IDictionary<int, string> OwningBusinessUnitLabels { get; set; }

        /// <summary>
        ///  
		/// 'OwningTeam'.<br />
        /// Unique identifier for the team that owns the record.
        /// </summary>
		[AttributeLogicalName("owningteam")]
		public Guid? OwningTeam
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owningteam");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningteam"))
				    value = (EntityReference) backupAttributeCollection["owningteam"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningTeam");
                if (value != null)
				    SetAttributeValue("owningteam", new EntityReference("team", value.Value));
                else
					SetAttributeValue("owningteam", value);
				OnPropertyChanged("OwningTeam");
			}
		}

        public string OwningTeamName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owningteam");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningteam"))
				    value = (EntityReference) backupAttributeCollection["owningteam"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_name", "team", "teamid", "owningteam")]
        public IDictionary<int, string> OwningTeamLabels { get; set; }

        /// <summary>
        ///  
		/// 'OwningUser'.<br />
        /// Unique identifier for the user that owns the record.
        /// </summary>
		[AttributeLogicalName("owninguser")]
		public Guid? OwningUser
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owninguser");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owninguser"))
				    value = (EntityReference) backupAttributeCollection["owninguser"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningUser");
                if (value != null)
				    SetAttributeValue("owninguser", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("owninguser", value);
				OnPropertyChanged("OwningUser");
			}
		}

        public string OwningUserName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owninguser");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owninguser"))
				    value = (EntityReference) backupAttributeCollection["owninguser"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_fullname", "systemuser", "systemuserid", "owninguser")]
        public IDictionary<int, string> OwningUserLabels { get; set; }

        /// <summary>
        ///  
		/// 'ParentArticleContentId'.<br />
        /// Contains the id of the parent article content associated with the entity.
        /// </summary>
		[AttributeLogicalName("parentarticlecontentid")]
		public Guid? ParentArticleContentId
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("parentarticlecontentid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("parentarticlecontentid"))
				    value = (EntityReference) backupAttributeCollection["parentarticlecontentid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ParentArticleContentId");
                if (value != null)
				    SetAttributeValue("parentarticlecontentid", new EntityReference("knowledgearticle", value.Value));
                else
					SetAttributeValue("parentarticlecontentid", value);
				OnPropertyChanged("ParentArticleContentId");
			}
		}

        public string ParentArticleContentIdName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("parentarticlecontentid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("parentarticlecontentid"))
				    value = (EntityReference) backupAttributeCollection["parentarticlecontentid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_title", "knowledgearticle", "knowledgearticleid", "parentarticlecontentid")]
        public IDictionary<int, string> ParentArticleContentIdLabels { get; set; }

        /// <summary>
        ///  
		/// 'PreviousArticleContentId'.<br />
        /// Shows the version that the current article was restored from.
        /// </summary>
		[AttributeLogicalName("previousarticlecontentid")]
		public Guid? PreviousArticleContentId
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("previousarticlecontentid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("previousarticlecontentid"))
				    value = (EntityReference) backupAttributeCollection["previousarticlecontentid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("PreviousArticleContentId");
                if (value != null)
				    SetAttributeValue("previousarticlecontentid", new EntityReference("knowledgearticle", value.Value));
                else
					SetAttributeValue("previousarticlecontentid", value);
				OnPropertyChanged("PreviousArticleContentId");
			}
		}

        public string PreviousArticleContentIdName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("previousarticlecontentid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("previousarticlecontentid"))
				    value = (EntityReference) backupAttributeCollection["previousarticlecontentid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_title", "knowledgearticle", "knowledgearticleid", "previousarticlecontentid")]
        public IDictionary<int, string> PreviousArticleContentIdLabels { get; set; }

        /// <summary>
        ///  
		/// 'primaryauthorid'.<br />
        /// User who created the first version of any article (i.e. version 1.0).
        /// </summary>
		[AttributeLogicalName("primaryauthorid")]
		public Guid? primaryauthorid
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("primaryauthorid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("primaryauthorid"))
				    value = (EntityReference) backupAttributeCollection["primaryauthorid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("primaryauthorid");
                if (value != null)
				    SetAttributeValue("primaryauthorid", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("primaryauthorid", value);
				OnPropertyChanged("primaryauthorid");
			}
		}

        public string primaryauthoridName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("primaryauthorid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("primaryauthorid"))
				    value = (EntityReference) backupAttributeCollection["primaryauthorid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_fullname", "systemuser", "systemuserid", "primaryauthorid")]
        public IDictionary<int, string> primaryauthoridLabels { get; set; }

        /// <summary>
        ///  
		/// 'processid'.<br />
        /// Contains the id of the process associated with the entity.
        /// </summary>
		[AttributeLogicalName("processid")]
		public Guid? processid
		{
			get
			{
				var value = GetAttributeValue<Guid?>("processid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("processid"))
				    value = (Guid?) backupAttributeCollection["processid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("processid");
					SetAttributeValue("processid", value);
				OnPropertyChanged("processid");
			}
		}

        /// <summary>
        ///  
		/// 'PublishOn'.<br />
        /// Date and time when the record was published.
        /// </summary>
		[AttributeLogicalName("publishon")]
		public DateTime? PublishOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("publishon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("publishon"))
				    value = (DateTime?) backupAttributeCollection["publishon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("PublishOn");
					SetAttributeValue("publishon", value);
				OnPropertyChanged("PublishOn");
			}
		}

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'PublishStatusId'.<br />
        /// Publish Status of the Article.
        /// </summary>
		[AttributeLogicalName("publishstatusid"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? PublishStatusId
		{
			get
			{
				var value = GetAttributeValue<int?>("publishstatusid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("publishstatusid"))
				    value = (int?) backupAttributeCollection["publishstatusid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("PublishStatusId");
					SetAttributeValue("publishstatusid", value);
				OnPropertyChanged("PublishStatusId");
			}
		}

        /// <summary>
        /// [Range(-100000000000, 100000000000)] 
		/// 'Rating'.<br />
        /// Information which specifies how helpful the related record was.
        /// </summary>
		[AttributeLogicalName("rating"), InRange("-100000000000", "100000000000", typeof(decimal))]
		public decimal? Rating
		{
			get
			{
				var value = GetAttributeValue<decimal?>("rating");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("rating"))
				    value = (decimal?) backupAttributeCollection["rating"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Rating");
					SetAttributeValue("rating", value);
				OnPropertyChanged("Rating");
			}
		}

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'Rating_Count'.<br />
        /// Rating Count
        /// </summary>
		[AttributeLogicalName("rating_count"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? Rating_Count
		{
			get
			{
				var value = GetAttributeValue<int?>("rating_count");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("rating_count"))
				    value = (int?) backupAttributeCollection["rating_count"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Rating_Count");
					SetAttributeValue("rating_count", value);
				OnPropertyChanged("Rating_Count");
			}
		}

        /// <summary>
        ///  
		/// 'Rating_Date'.<br />
        /// The date time for Rating.
        /// </summary>
		[AttributeLogicalName("rating_date")]
		public DateTime? Rating_Date
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("rating_date");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("rating_date"))
				    value = (DateTime?) backupAttributeCollection["rating_date"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Rating_Date");
					SetAttributeValue("rating_date", value);
				OnPropertyChanged("Rating_Date");
			}
		}

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'Rating_State'.<br />
        /// State of Rating
        /// </summary>
		[AttributeLogicalName("rating_state"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? Rating_State
		{
			get
			{
				var value = GetAttributeValue<int?>("rating_state");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("rating_state"))
				    value = (int?) backupAttributeCollection["rating_state"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Rating_State");
					SetAttributeValue("rating_state", value);
				OnPropertyChanged("Rating_State");
			}
		}

        /// <summary>
        /// [Range(0, 1000000000)] 
		/// 'Rating_Sum'.<br />
        /// Total sum of Rating
        /// </summary>
		[AttributeLogicalName("rating_sum"), InRange("0", "1000000000", typeof(decimal))]
		public decimal? Rating_Sum
		{
			get
			{
				var value = GetAttributeValue<decimal?>("rating_sum");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("rating_sum"))
				    value = (decimal?) backupAttributeCollection["rating_sum"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Rating_Sum");
					SetAttributeValue("rating_sum", value);
				OnPropertyChanged("Rating_Sum");
			}
		}

        /// <summary>
        ///  
		/// 'ReadyForReview'.<br />
        /// Ready For Review
        /// </summary>
		[AttributeLogicalName("readyforreview")]
		public bool? ReadyForReview
		{
			get
			{
				var value = GetAttributeValue<bool?>("readyforreview");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("readyforreview"))
				    value = (bool?) backupAttributeCollection["readyforreview"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ReadyForReview");
					SetAttributeValue("readyforreview", value);
				OnPropertyChanged("ReadyForReview");
			}
		}

        public IDictionary<int, string> ReadyForReviewLabels
        {
		    get
		    {
                var value = GetAttributeValue<bool?>("readyforreview");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("readyforreview"))
				    value = (bool?) backupAttributeCollection["readyforreview"];
                if (value == null)
                    return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("readyforreview", (bool) value ? 1 : 0, 1033) },
                        };
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'Review'.<br />
        /// Review
        /// </summary>
		[AttributeLogicalName("review")]
		public ReviewEnum? Review
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("review");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("review"))
				    value = (OptionSetValue) backupAttributeCollection["review"];
                return value == null ? (ReviewEnum?) null : (ReviewEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("Review");
                if (value != null)
				    SetAttributeValue("review", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("review", value);
				OnPropertyChanged("Review");
			}
		}

        public IDictionary<int, string> ReviewLabels
        {
		    get
		    {
                var value = GetAttributeValue<OptionSetValue>("review");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("review"))
				    value = (OptionSetValue) backupAttributeCollection["review"];
                if (value == null)
                    return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("review", value.Value, 1033) },
                        };
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'RootArticleId'.<br />
        /// Contains the id of the root article.
        /// </summary>
		[AttributeLogicalName("rootarticleid")]
		public Guid? RootArticleId
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("rootarticleid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("rootarticleid"))
				    value = (EntityReference) backupAttributeCollection["rootarticleid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("RootArticleId");
                if (value != null)
				    SetAttributeValue("rootarticleid", new EntityReference("knowledgearticle", value.Value));
                else
					SetAttributeValue("rootarticleid", value);
				OnPropertyChanged("RootArticleId");
			}
		}

        public string RootArticleIdName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("rootarticleid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("rootarticleid"))
				    value = (EntityReference) backupAttributeCollection["rootarticleid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_title", "knowledgearticle", "knowledgearticleid", "rootarticleid")]
        public IDictionary<int, string> RootArticleIdLabels { get; set; }

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'ScheduledStatusId'.<br />
        /// Contains the id of the scheduled status of the entity.
        /// </summary>
		[AttributeLogicalName("scheduledstatusid"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? ScheduledStatusId
		{
			get
			{
				var value = GetAttributeValue<int?>("scheduledstatusid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("scheduledstatusid"))
				    value = (int?) backupAttributeCollection["scheduledstatusid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ScheduledStatusId");
					SetAttributeValue("scheduledstatusid", value);
				OnPropertyChanged("ScheduledStatusId");
			}
		}

        /// <summary>
        ///  
		/// 'SetCategoryAssociations'.<br />
        /// Shows whether category associations have been set
        /// </summary>
		[AttributeLogicalName("setcategoryassociations")]
		public bool? SetCategoryAssociations
		{
			get
			{
				var value = GetAttributeValue<bool?>("setcategoryassociations");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("setcategoryassociations"))
				    value = (bool?) backupAttributeCollection["setcategoryassociations"];
			    return value;
			}
			set
			{
				OnPropertyChanging("SetCategoryAssociations");
					SetAttributeValue("setcategoryassociations", value);
				OnPropertyChanged("SetCategoryAssociations");
			}
		}

        public IDictionary<int, string> SetCategoryAssociationsLabels
        {
		    get
		    {
                var value = GetAttributeValue<bool?>("setcategoryassociations");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("setcategoryassociations"))
				    value = (bool?) backupAttributeCollection["setcategoryassociations"];
                if (value == null)
                    return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("setcategoryassociations", (bool) value ? 1 : 0, 1033) },
                        };
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'SetProductAssociations'.<br />
        /// Set Product Associations
        /// </summary>
		[AttributeLogicalName("setproductassociations")]
		public bool? SetProductAssociations
		{
			get
			{
				var value = GetAttributeValue<bool?>("setproductassociations");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("setproductassociations"))
				    value = (bool?) backupAttributeCollection["setproductassociations"];
			    return value;
			}
			set
			{
				OnPropertyChanging("SetProductAssociations");
					SetAttributeValue("setproductassociations", value);
				OnPropertyChanged("SetProductAssociations");
			}
		}

        public IDictionary<int, string> SetProductAssociationsLabels
        {
		    get
		    {
                var value = GetAttributeValue<bool?>("setproductassociations");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("setproductassociations"))
				    value = (bool?) backupAttributeCollection["setproductassociations"];
                if (value == null)
                    return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("setproductassociations", (bool) value ? 1 : 0, 1033) },
                        };
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'stageid'.<br />
        /// Contains the id of the stage where the entity is located.
        /// </summary>
		[AttributeLogicalName("stageid")]
		public Guid? stageid
		{
			get
			{
				var value = GetAttributeValue<Guid?>("stageid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("stageid"))
				    value = (Guid?) backupAttributeCollection["stageid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("stageid");
					SetAttributeValue("stageid", value);
				OnPropertyChanged("stageid");
			}
		}

        /// <summary>
        ///  
		/// 'StateCode'.<br />
        /// Shows whether the article is a draft or is published, archived, or discarded. Draft articles aren't available externally and can be edited. Published articles are available externally, based on applicable permissions, but can't be edited. All metadata changes are reflected in the published version. Archived and discarded articles aren't available externally and can't be edited.
        /// </summary>
		[AttributeLogicalName("statecode")]
		public StateCodeEnum? StateCode
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("statecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("statecode"))
				    value = (OptionSetValue) backupAttributeCollection["statecode"];
                return value == null ? (StateCodeEnum?) null : (StateCodeEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("StateCode");
                if (value != null)
				    SetAttributeValue("statecode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("statecode", value);
				OnPropertyChanged("StateCode");
			}
		}

        public IDictionary<int, string> StateCodeLabels
        {
		    get
		    {
                var value = GetAttributeValue<OptionSetValue>("statecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("statecode"))
				    value = (OptionSetValue) backupAttributeCollection["statecode"];
                if (value == null)
                    return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("statecode", value.Value, 1033) },
                        };
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'StatusCode'.<br />
        /// Select the article's status.
        /// </summary>
		[AttributeLogicalName("statuscode")]
		public StatusCodeEnum? StatusCode
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("statuscode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("statuscode"))
				    value = (OptionSetValue) backupAttributeCollection["statuscode"];
                return value == null ? (StatusCodeEnum?) null : (StatusCodeEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("StatusCode");
                if (value != null)
				    SetAttributeValue("statuscode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("statuscode", value);
				OnPropertyChanged("StatusCode");
			}
		}

        public IDictionary<int, string> StatusCodeLabels
        {
		    get
		    {
                var value = GetAttributeValue<OptionSetValue>("statuscode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("statuscode"))
				    value = (OptionSetValue) backupAttributeCollection["statuscode"];
                if (value == null)
                    return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("statuscode", value.Value, 1033) },
                        };
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'SubjectId'.<br />
        /// Choose the subject of the article to assist with article searches. You can configure subjects under Business Management in the Settings area.
        /// </summary>
		[AttributeLogicalName("subjectid")]
		public Guid? SubjectId
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("subjectid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("subjectid"))
				    value = (EntityReference) backupAttributeCollection["subjectid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("SubjectId");
                if (value != null)
				    SetAttributeValue("subjectid", new EntityReference("subject", value.Value));
                else
					SetAttributeValue("subjectid", value);
				OnPropertyChanged("SubjectId");
			}
		}

        public string SubjectIdName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("subjectid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("subjectid"))
				    value = (EntityReference) backupAttributeCollection["subjectid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_title", "subject", "subjectid", "subjectid")]
        public IDictionary<int, string> SubjectIdLabels { get; set; }

        /// <summary>
        /// [Range(-1, 2147483647)] 
		/// 'TimeZoneRuleVersionNumber'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("timezoneruleversionnumber"), InRange("-1", "2147483647", typeof(int))]
		public int? TimeZoneRuleVersionNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("timezoneruleversionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("timezoneruleversionnumber"))
				    value = (int?) backupAttributeCollection["timezoneruleversionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("TimeZoneRuleVersionNumber");
					SetAttributeValue("timezoneruleversionnumber", value);
				OnPropertyChanged("TimeZoneRuleVersionNumber");
			}
		}

        /// <summary>
        /// [MaximumLength=4000] 
		/// 'Title'.<br />
        /// Type a title for the article.
        /// </summary>
		[AttributeLogicalName("title"), MaxLength(4000)]
		public string Title
		{
			get
			{
				var value = GetAttributeValue<string>("title");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("title"))
				    value = (string) backupAttributeCollection["title"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Title");
					SetAttributeValue("title", value);
				OnPropertyChanged("Title");
			}
		}

        /// <summary>
        ///  
		/// 'TransactionCurrencyId'.<br />
        /// Exchange rate for the currency associated with the KnowledgeArticle with respect to the base currency.
        /// </summary>
		[AttributeLogicalName("transactioncurrencyid")]
		public Guid? TransactionCurrencyId
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("transactioncurrencyid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("transactioncurrencyid"))
				    value = (EntityReference) backupAttributeCollection["transactioncurrencyid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("TransactionCurrencyId");
                if (value != null)
				    SetAttributeValue("transactioncurrencyid", new EntityReference("transactioncurrency", value.Value));
                else
					SetAttributeValue("transactioncurrencyid", value);
				OnPropertyChanged("TransactionCurrencyId");
			}
		}

        public string TransactionCurrencyIdName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("transactioncurrencyid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("transactioncurrencyid"))
				    value = (EntityReference) backupAttributeCollection["transactioncurrencyid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_currencyname", "transactioncurrency", "transactioncurrencyid", "transactioncurrencyid")]
        public IDictionary<int, string> TransactionCurrencyIdLabels { get; set; }

        /// <summary>
        /// [MaximumLength=1250] 
		/// 'traversedpath'.<br />
        /// A comma separated list of string values representing the unique identifiers of stages in a Business Process Flow Instance in the order that they occur.
        /// </summary>
		[AttributeLogicalName("traversedpath"), MaxLength(1250)]
		public string traversedpath
		{
			get
			{
				var value = GetAttributeValue<string>("traversedpath");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("traversedpath"))
				    value = (string) backupAttributeCollection["traversedpath"];
			    return value;
			}
			set
			{
				OnPropertyChanging("traversedpath");
					SetAttributeValue("traversedpath", value);
				OnPropertyChanged("traversedpath");
			}
		}

        /// <summary>
        ///  
		/// 'UpdateContent'.<br />
        /// Update Content
        /// </summary>
		[AttributeLogicalName("updatecontent")]
		public bool? UpdateContent
		{
			get
			{
				var value = GetAttributeValue<bool?>("updatecontent");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("updatecontent"))
				    value = (bool?) backupAttributeCollection["updatecontent"];
			    return value;
			}
			set
			{
				OnPropertyChanging("UpdateContent");
					SetAttributeValue("updatecontent", value);
				OnPropertyChanged("UpdateContent");
			}
		}

        public IDictionary<int, string> UpdateContentLabels
        {
		    get
		    {
                var value = GetAttributeValue<bool?>("updatecontent");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("updatecontent"))
				    value = (bool?) backupAttributeCollection["updatecontent"];
                if (value == null)
                    return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("updatecontent", (bool) value ? 1 : 0, 1033) },
                        };
            }
            set
            {}
        }

        /// <summary>
        /// [Range(-1, 2147483647)] 
		/// 'UTCConversionTimeZoneCode'.<br />
        /// Time zone code that was in use when the record was created.
        /// </summary>
		[AttributeLogicalName("utcconversiontimezonecode"), InRange("-1", "2147483647", typeof(int))]
		public int? UTCConversionTimeZoneCode
		{
			get
			{
				var value = GetAttributeValue<int?>("utcconversiontimezonecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("utcconversiontimezonecode"))
				    value = (int?) backupAttributeCollection["utcconversiontimezonecode"];
			    return value;
			}
			set
			{
				OnPropertyChanging("UTCConversionTimeZoneCode");
					SetAttributeValue("utcconversiontimezonecode", value);
				OnPropertyChanged("UTCConversionTimeZoneCode");
			}
		}

		[AttributeLogicalName("versionnumber")]
		public long? VersionNumber
		{
			get
			{
				var value = GetAttributeValue<long?>("versionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("versionnumber"))
				    value = (long?) backupAttributeCollection["versionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("VersionNumber");
					SetAttributeValue("versionnumber", value);
				OnPropertyChanged("VersionNumber");
			}
		}

		#endregion

		#region Relationships

		
		/// <summary>
		/// 1:N, 'knowledgearticle_activity_parties'
		/// </summary>
		[RelationshipSchemaName("knowledgearticle_activity_parties")]
		public ActivityParty[] ActivityPartysOfParty
		{
			get
			{
				var enumerable = GetRelatedEntities<ActivityParty>("knowledgearticle_activity_parties", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("ActivityPartysOfParty");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<ActivityParty>("knowledgearticle_activity_parties", null, value);
				OnPropertyChanged("ActivityPartysOfParty");
			}
		}
		
		/// <summary>
		/// 1:N, 'knowledgearticle_parentarticle_contentid'
		/// </summary>
		[RelationshipSchemaName("knowledgearticle_parentarticle_contentid", Microsoft.Xrm.Sdk.EntityRole.Referenced)]
		public KnowledgeArticle[] KnowledgeArticlesOfParentArticleContentId
		{
			get
			{
				var enumerable = GetRelatedEntities<KnowledgeArticle>("knowledgearticle_parentarticle_contentid", Microsoft.Xrm.Sdk.EntityRole.Referenced);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("KnowledgeArticlesOfParentArticleContentId");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<KnowledgeArticle>("knowledgearticle_parentarticle_contentid", Microsoft.Xrm.Sdk.EntityRole.Referenced, value);
				OnPropertyChanged("KnowledgeArticlesOfParentArticleContentId");
			}
		}
		
		/// <summary>
		/// 1:N, 'knowledgearticle_previousarticle_contentid'
		/// </summary>
		[RelationshipSchemaName("knowledgearticle_previousarticle_contentid", Microsoft.Xrm.Sdk.EntityRole.Referenced)]
		public KnowledgeArticle[] KnowledgeArticlesOfPreviousArticleContentID
		{
			get
			{
				var enumerable = GetRelatedEntities<KnowledgeArticle>("knowledgearticle_previousarticle_contentid", Microsoft.Xrm.Sdk.EntityRole.Referenced);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("KnowledgeArticlesOfPreviousArticleContentID");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<KnowledgeArticle>("knowledgearticle_previousarticle_contentid", Microsoft.Xrm.Sdk.EntityRole.Referenced, value);
				OnPropertyChanged("KnowledgeArticlesOfPreviousArticleContentID");
			}
		}
		
		/// <summary>
		/// 1:N, 'knowledgearticle_rootarticle_id'
		/// </summary>
		[RelationshipSchemaName("knowledgearticle_rootarticle_id", Microsoft.Xrm.Sdk.EntityRole.Referenced)]
		public KnowledgeArticle[] KnowledgeArticlesOfRootArticleId
		{
			get
			{
				var enumerable = GetRelatedEntities<KnowledgeArticle>("knowledgearticle_rootarticle_id", Microsoft.Xrm.Sdk.EntityRole.Referenced);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("KnowledgeArticlesOfRootArticleId");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<KnowledgeArticle>("knowledgearticle_rootarticle_id", Microsoft.Xrm.Sdk.EntityRole.Referenced, value);
				OnPropertyChanged("KnowledgeArticlesOfRootArticleId");
			}
		}
		
		/// <summary>
		/// N:1, 'knowledgearticle_parentarticle_contentid'
		/// </summary>
		[RelationshipSchemaName("knowledgearticle_parentarticle_contentid", Microsoft.Xrm.Sdk.EntityRole.Referencing), AttributeLogicalName("parentarticlecontentid")]
		public KnowledgeArticle KnowledgeArticleAsParentArticleContentId
		{
			get
			{
				return GetRelatedEntity<KnowledgeArticle>("knowledgearticle_parentarticle_contentid", Microsoft.Xrm.Sdk.EntityRole.Referencing);
			}
			set
			{
				OnPropertyChanging("KnowledgeArticleAsParentArticleContentId");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<KnowledgeArticle>("knowledgearticle_parentarticle_contentid", Microsoft.Xrm.Sdk.EntityRole.Referencing, value);
				OnPropertyChanged("KnowledgeArticleAsParentArticleContentId");
			}
		}
		
		/// <summary>
		/// N:1, 'knowledgearticle_previousarticle_contentid'
		/// </summary>
		[RelationshipSchemaName("knowledgearticle_previousarticle_contentid", Microsoft.Xrm.Sdk.EntityRole.Referencing), AttributeLogicalName("previousarticlecontentid")]
		public KnowledgeArticle KnowledgeArticleAsPreviousArticleContentID
		{
			get
			{
				return GetRelatedEntity<KnowledgeArticle>("knowledgearticle_previousarticle_contentid", Microsoft.Xrm.Sdk.EntityRole.Referencing);
			}
			set
			{
				OnPropertyChanging("KnowledgeArticleAsPreviousArticleContentID");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<KnowledgeArticle>("knowledgearticle_previousarticle_contentid", Microsoft.Xrm.Sdk.EntityRole.Referencing, value);
				OnPropertyChanged("KnowledgeArticleAsPreviousArticleContentID");
			}
		}
		
		/// <summary>
		/// N:1, 'knowledgearticle_rootarticle_id'
		/// </summary>
		[RelationshipSchemaName("knowledgearticle_rootarticle_id", Microsoft.Xrm.Sdk.EntityRole.Referencing), AttributeLogicalName("rootarticleid")]
		public KnowledgeArticle KnowledgeArticleAsRootArticleId
		{
			get
			{
				return GetRelatedEntity<KnowledgeArticle>("knowledgearticle_rootarticle_id", Microsoft.Xrm.Sdk.EntityRole.Referencing);
			}
			set
			{
				OnPropertyChanging("KnowledgeArticleAsRootArticleId");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<KnowledgeArticle>("knowledgearticle_rootarticle_id", Microsoft.Xrm.Sdk.EntityRole.Referencing, value);
				OnPropertyChanged("KnowledgeArticleAsRootArticleId");
			}
		}
		
		/// <summary>
		/// N:N, 'msdyn_knowledgearticle_knowledgearticle'
		/// </summary>
		[RelationshipSchemaName("msdyn_knowledgearticle_knowledgearticle", Microsoft.Xrm.Sdk.EntityRole.Referenced)]
		public KnowledgeArticle[] KnowledgeArticlesOfmsdyn_knowledgearticle_knowledgearticle_Referenced

		{
			get
			{
				var enumerable = GetRelatedEntities<KnowledgeArticle>("msdyn_knowledgearticle_knowledgearticle", Microsoft.Xrm.Sdk.EntityRole.Referenced);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("KnowledgeArticlesOfmsdyn_knowledgearticle_knowledgearticle_Referenced");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<KnowledgeArticle>("msdyn_knowledgearticle_knowledgearticle", Microsoft.Xrm.Sdk.EntityRole.Referenced, value);
				OnPropertyChanged("KnowledgeArticlesOfmsdyn_knowledgearticle_knowledgearticle_Referenced");
			}
		}
		
		/// <summary>
		/// N:N, 'msdyn_knowledgearticle_knowledgearticle'
		/// </summary>
		[RelationshipSchemaName("msdyn_knowledgearticle_knowledgearticle", Microsoft.Xrm.Sdk.EntityRole.Referencing)]
		public KnowledgeArticle[] KnowledgeArticlesOfmsdyn_knowledgearticle_knowledgearticle_msdyn_knowledgearticle_knowledgearticle_Referencing

		{
			get
			{
				var enumerable = GetRelatedEntities<KnowledgeArticle>("msdyn_knowledgearticle_knowledgearticle", Microsoft.Xrm.Sdk.EntityRole.Referencing);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("KnowledgeArticlesOfmsdyn_knowledgearticle_knowledgearticle_msdyn_knowledgearticle_knowledgearticle_Referencing");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<KnowledgeArticle>("msdyn_knowledgearticle_knowledgearticle", Microsoft.Xrm.Sdk.EntityRole.Referencing, value);
				OnPropertyChanged("KnowledgeArticlesOfmsdyn_knowledgearticle_knowledgearticle_msdyn_knowledgearticle_knowledgearticle_Referencing");
			}
		}
		
		public static class RelationNames {
			public static RelationName ActivityPartysOfParty = new RelationName("ActivityPartysOfParty");
			public static RelationName KnowledgeArticlesOfParentArticleContentId = new RelationName("KnowledgeArticlesOfParentArticleContentId");
			public static RelationName KnowledgeArticlesOfPreviousArticleContentID = new RelationName("KnowledgeArticlesOfPreviousArticleContentID");
			public static RelationName KnowledgeArticlesOfRootArticleId = new RelationName("KnowledgeArticlesOfRootArticleId");
			public static RelationName KnowledgeArticleAsParentArticleContentId = new RelationName("KnowledgeArticleAsParentArticleContentId");
			public static RelationName KnowledgeArticleAsPreviousArticleContentID = new RelationName("KnowledgeArticleAsPreviousArticleContentID");
			public static RelationName KnowledgeArticleAsRootArticleId = new RelationName("KnowledgeArticleAsRootArticleId");
		}


		protected override IDictionary<string, object[]> RelationProperties { get {
			if (relationProperties != null) return relationProperties;
			relationProperties = new Dictionary<string, object[]>();
			relationProperties["ActivityPartysOfParty"] = new object[] { "ActivityPartysOfParty", "activityparty", "knowledgearticle", "partyid", "knowledgearticleid", "knowledgearticleid", "knowledgearticleid", "knowledgearticle_activity_parties", typeof (ActivityParty[]) };
			relationProperties["KnowledgeArticlesOfParentArticleContentId"] = new object[] { "KnowledgeArticlesOfParentArticleContentId", "knowledgearticle", "knowledgearticle", "parentarticlecontentid", "knowledgearticleid", "knowledgearticleid", "knowledgearticleid", "knowledgearticle_parentarticle_contentid", typeof (KnowledgeArticle[]) };
			relationProperties["KnowledgeArticlesOfPreviousArticleContentID"] = new object[] { "KnowledgeArticlesOfPreviousArticleContentID", "knowledgearticle", "knowledgearticle", "previousarticlecontentid", "knowledgearticleid", "knowledgearticleid", "knowledgearticleid", "knowledgearticle_previousarticle_contentid", typeof (KnowledgeArticle[]) };
			relationProperties["KnowledgeArticlesOfRootArticleId"] = new object[] { "KnowledgeArticlesOfRootArticleId", "knowledgearticle", "knowledgearticle", "rootarticleid", "knowledgearticleid", "knowledgearticleid", "knowledgearticleid", "knowledgearticle_rootarticle_id", typeof (KnowledgeArticle[]) };
			relationProperties["KnowledgeArticleAsParentArticleContentId"] = new object[] { "KnowledgeArticleAsParentArticleContentId", "knowledgearticle", "knowledgearticle", "knowledgearticleid", "parentarticlecontentid", "knowledgearticleid", "knowledgearticleid", "knowledgearticle_parentarticle_contentid", typeof (KnowledgeArticle) };
			relationProperties["KnowledgeArticleAsPreviousArticleContentID"] = new object[] { "KnowledgeArticleAsPreviousArticleContentID", "knowledgearticle", "knowledgearticle", "knowledgearticleid", "previousarticlecontentid", "knowledgearticleid", "knowledgearticleid", "knowledgearticle_previousarticle_contentid", typeof (KnowledgeArticle) };
			relationProperties["KnowledgeArticleAsRootArticleId"] = new object[] { "KnowledgeArticleAsRootArticleId", "knowledgearticle", "knowledgearticle", "knowledgearticleid", "rootarticleid", "knowledgearticleid", "knowledgearticleid", "knowledgearticle_rootarticle_id", typeof (KnowledgeArticle) };
			return relationProperties; } }


		#endregion

		/// <summary>
		/// Constructor for populating via LINQ queries given a LINQ anonymous type
		/// <param name="anonymousType">LINQ anonymous type.</param>
		/// </summary>
		public KnowledgeArticle(object anonymousType) : 
				this()
		{
            foreach (var p in anonymousType.GetType().GetProperties())
            {
                var value = p.GetValue(anonymousType, null);
                if (p.PropertyType == typeof(System.Guid))
                {
                    // Type is Guid, must be Id
                    base.Id = (System.Guid)value;
                    Attributes["knowledgearticleid"] = base.Id;
               }
                else if (p.Name == "FormattedValues")
                {
                    // Add Support for FormattedValues
                    FormattedValues.AddRange((FormattedValueCollection)value);
                }
                else
                {
                    Attributes[p.Name.ToLower()] = value;
                }
            }
		}


		#region Label/value pairs

		#region bby_addcomments

		public enum bby_addcommentsEnum
		{
			[EnumMember]Complete = 1,
			[EnumMember]MarkComplete = 0,
		}

		#endregion
	
		#region bby_approvaltype

		public enum bby_approvaltypeEnum
		{
			[EnumMember]User = 864630000,
			[EnumMember]Team = 864630001,
		}

		#endregion
	
		#region bby_articleverified

		public enum bby_articleverifiedEnum
		{
			[EnumMember]Verified = 864630000,
			[EnumMember]Unverified = 864630001,
		}

		#endregion
	
		#region bby_contenttype

		public enum bby_contenttypeEnum
		{
			[EnumMember]Alert = 864630002,
			[EnumMember]Informational = 864630005,
			[EnumMember]Policy = 864630006,
			[EnumMember]Promotional = 864630003,
			[EnumMember]SOP = 864630000,
			[EnumMember]TechHelp = 864630001,
			[EnumMember]Recall = 864630004,
		}

		#endregion
	
		#region bby_displaytype

		public enum bby_displaytypeEnum
		{
			[EnumMember]Text = 0,
			[EnumMember]ExpandCollapse = 1,
		}

		#endregion
	
		#region bby_featured

		public enum bby_featuredEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region bby_hasattachments

		public enum bby_hasattachmentsEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region bby_isratingcumilative

		public enum bby_isratingcumilativeEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region bby_promotionaltype

		public enum bby_promotionaltypeEnum
		{
			[EnumMember]Mobile = 100000000,
			[EnumMember]MyBBY = 100000001,
			[EnumMember]Other = 100000002,
			[EnumMember]WeeklySales = 100000003,
			[EnumMember]MyBYY = 100000004,
		}

		#endregion
	
		#region bby_refreshportalcategories

		public enum bby_refreshportalcategoriesEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region bby_securecontent

		public enum bby_securecontentEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region bby_triggernotification

		public enum bby_triggernotificationEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region bby_versionflag

		public enum bby_versionflagEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region bby_versionnotesadded

		public enum bby_versionnotesaddedEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]NA = 0,
		}

		#endregion
	
		#region ExpiredReviewOptions

		public enum ExpiredReviewOptionsEnum
		{
			[EnumMember]NeedsUpdating = 0,
			[EnumMember]Republish = 1,
			[EnumMember]Archive = 2,
		}

		#endregion
	
		#region IsInternal

		public enum IsInternalEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region IsLatestVersion

		public enum IsLatestVersionEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region IsPrimary

		public enum IsPrimaryEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region IsRootArticle

		public enum IsRootArticleEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region ReadyForReview

		public enum ReadyForReviewEnum
		{
			[EnumMember]Completed = 1,
			[EnumMember]MarkComplete = 0,
		}

		#endregion
	
		#region Review

		public enum ReviewEnum
		{
			[EnumMember]Approved = 0,
			[EnumMember]Rejected = 1,
		}

		#endregion
	
		#region SetCategoryAssociations

		public enum SetCategoryAssociationsEnum
		{
			[EnumMember]Completed = 1,
			[EnumMember]MarkasComplete = 0,
		}

		#endregion
	
		#region SetProductAssociations

		public enum SetProductAssociationsEnum
		{
			[EnumMember]Completed = 1,
			[EnumMember]MarkAsComplete = 0,
		}

		#endregion
	
		#region StateCode

		public enum StateCodeEnum
		{
			[EnumMember]Draft = 0,
			[EnumMember]Approved = 1,
			[EnumMember]Scheduled = 2,
			[EnumMember]Published = 3,
			[EnumMember]Expired = 4,
			[EnumMember]Archived = 5,
			[EnumMember]Discarded = 6,
		}

		#endregion
	
		#region StatusCode

		public enum StatusCodeEnum
		{
			[EnumMember]Proposed = 1,
			[EnumMember]Draft = 2,
			[EnumMember]Needsreview = 3,
			[EnumMember]Inreview = 4,
			[EnumMember]Approved = 5,
			[EnumMember]Scheduled = 6,
			[EnumMember]Published = 7,
			[EnumMember]Needsreview_2 = 8,
			[EnumMember]Updating = 9,
			[EnumMember]Expired = 10,
			[EnumMember]Rejected = 11,
			[EnumMember]Archived = 12,
			[EnumMember]Discarded = 13,
			[EnumMember]Rejected_2 = 14,
		}

		#endregion
	
		#region UpdateContent

		public enum UpdateContentEnum
		{
			[EnumMember]ContentUpdated = 1,
			[EnumMember]MarkWhenCompleted = 0,
		}

		#endregion
	
		#endregion


		#region Metadata


		#region Enums

		public static class Enums
		{
			/// <summary>
			/// Gets the label corresponding to the option-set's value using its logical name,
			/// the value within, and the language code.
			/// </summary>
			/// <param name="logicalName">The logical name of the option-set in CRM</param>
			/// <param name="constant">The value from the option-set</param>
			/// <param name="languageCode">The language code from CRM</param>
			/// <returns></returns>
			public static string GetLabel(string logicalName, int constant, int languageCode = 1033)
			{
				return GeneratorHelpers.GetLabel(logicalName, constant, typeof(Enums), languageCode);
			}
			/// <summary>
			/// Gets the value corresponding to the option-set's label using its logical name,
			/// the value within, and the language code.
			/// </summary>
			/// <param name="logicalName">The logical name of the option-set in CRM</param>
			/// <param name="label">The label from the option-set</param>
			/// <param name="languageCode">The language code from CRM</param>
			/// <returns>The value corresponding to the label</returns>
			public static int GetValue(string logicalName, string label, int languageCode = 1033)
			{
				return GeneratorHelpers.GetValue(logicalName, label, typeof(Enums), languageCode);
			}

			#region Logical names

			public static class Names
			{
				public const string bby_addcomments = "bby_addcomments";
				public const string bby_approvaltype = "bby_approvaltype";
				public const string bby_articleverified = "bby_articleverified";
				public const string bby_contenttype = "bby_contenttype";
				public const string bby_displaytype = "bby_displaytype";
				public const string bby_featured = "bby_featured";
				public const string bby_hasattachments = "bby_hasattachments";
				public const string bby_isratingcumilative = "bby_isratingcumilative";
				public const string bby_promotionaltype = "bby_promotionaltype";
				public const string bby_refreshportalcategories = "bby_refreshportalcategories";
				public const string bby_securecontent = "bby_securecontent";
				public const string bby_triggernotification = "bby_triggernotification";
				public const string bby_versionflag = "bby_versionflag";
				public const string bby_versionnotesadded = "bby_versionnotesadded";
				public const string ExpiredReviewOptions = "expiredreviewoptions";
				public const string IsInternal = "isinternal";
				public const string IsLatestVersion = "islatestversion";
				public const string IsPrimary = "isprimary";
				public const string IsRootArticle = "isrootarticle";
				public const string ReadyForReview = "readyforreview";
				public const string Review = "review";
				public const string SetCategoryAssociations = "setcategoryassociations";
				public const string SetProductAssociations = "setproductassociations";
				public const string StateCode = "statecode";
				public const string StatusCode = "statuscode";
				public const string UpdateContent = "updatecontent";
			}

			#endregion

			#region Labels

			public static class Labels
			{
				public static class bby_addcomments 
				{
					public const string Complete_1033 = "Complete";
					public const string MarkComplete_1033 = "Mark Complete";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(bby_addcomments), label, languageCode);
					}
				}

				public static class bby_approvaltype 
				{
					public const string User_1033 = "User";
					public const string Team_1033 = "Team";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(bby_approvaltype), label, languageCode);
					}
				}

				public static class bby_articleverified 
				{
					public const string Verified_1033 = "Verified";
					public const string Unverified_1033 = "Unverified";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(bby_articleverified), label, languageCode);
					}
				}

				public static class bby_contenttype 
				{
					public const string Alert_1033 = "Alert";
					public const string Informational_1033 = "Informational";
					public const string Policy_1033 = "Policy";
					public const string Promotional_1033 = "Promotional";
					public const string SOP_1033 = "SOP";
					public const string TechHelp_1033 = "Tech Help";
					public const string Recall_1033 = "Recall";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(bby_contenttype), label, languageCode);
					}
				}

				public static class bby_displaytype 
				{
					public const string Text_1033 = "Text";
					public const string ExpandCollapse_1033 = "Expand & Collapse";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(bby_displaytype), label, languageCode);
					}
				}

				public static class bby_featured 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(bby_featured), label, languageCode);
					}
				}

				public static class bby_hasattachments 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(bby_hasattachments), label, languageCode);
					}
				}

				public static class bby_isratingcumilative 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(bby_isratingcumilative), label, languageCode);
					}
				}

				public static class bby_promotionaltype 
				{
					public const string Mobile_1033 = "Mobile";
					public const string MyBBY_1033 = "My BBY";
					public const string Other_1033 = "Other";
					public const string WeeklySales_1033 = "Weekly Sales";
					public const string MyBYY_1033 = "My BYY";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(bby_promotionaltype), label, languageCode);
					}
				}

				public static class bby_refreshportalcategories 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(bby_refreshportalcategories), label, languageCode);
					}
				}

				public static class bby_securecontent 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(bby_securecontent), label, languageCode);
					}
				}

				public static class bby_triggernotification 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(bby_triggernotification), label, languageCode);
					}
				}

				public static class bby_versionflag 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(bby_versionflag), label, languageCode);
					}
				}

				public static class bby_versionnotesadded 
				{
					public const string Yes_1033 = "Yes";
					public const string NA_1033 = "N/A";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(bby_versionnotesadded), label, languageCode);
					}
				}

				public static class ExpiredReviewOptions 
				{
					public const string NeedsUpdating_1033 = "Needs Updating";
					public const string Republish_1033 = "Republish";
					public const string Archive_1033 = "Archive";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(ExpiredReviewOptions), label, languageCode);
					}
				}

				public static class IsInternal 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(IsInternal), label, languageCode);
					}
				}

				public static class IsLatestVersion 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(IsLatestVersion), label, languageCode);
					}
				}

				public static class IsPrimary 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(IsPrimary), label, languageCode);
					}
				}

				public static class IsRootArticle 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(IsRootArticle), label, languageCode);
					}
				}

				public static class ReadyForReview 
				{
					public const string Completed_1033 = "Completed";
					public const string MarkComplete_1033 = "Mark Complete";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(ReadyForReview), label, languageCode);
					}
				}

				public static class Review 
				{
					public const string Approved_1033 = "Approved";
					public const string Rejected_1033 = "Rejected";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(Review), label, languageCode);
					}
				}

				public static class SetCategoryAssociations 
				{
					public const string Completed_1033 = "Completed";
					public const string MarkasComplete_1033 = "Mark as Complete";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(SetCategoryAssociations), label, languageCode);
					}
				}

				public static class SetProductAssociations 
				{
					public const string Completed_1033 = "Completed";
					public const string MarkAsComplete_1033 = "Mark As Complete";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(SetProductAssociations), label, languageCode);
					}
				}

				public static class StateCode 
				{
					public const string Draft_1033 = "Draft";
					public const string Approved_1033 = "Approved";
					public const string Scheduled_1033 = "Scheduled";
					public const string Published_1033 = "Published";
					public const string Expired_1033 = "Expired";
					public const string Archived_1033 = "Archived";
					public const string Discarded_1033 = "Discarded";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(StateCode), label, languageCode);
					}
				}

				public static class StatusCode 
				{
					public const string Proposed_1033 = "Proposed";
					public const string Draft_1033 = "Draft";
					public const string Needsreview_1033 = "Needs review";
					public const string Inreview_1033 = "In review";
					public const string Approved_1033 = "Approved";
					public const string Scheduled_1033 = "Scheduled";
					public const string Published_1033 = "Published";
					public const string Needsreview_2_1033 = "Needs review";
					public const string Updating_1033 = "Updating";
					public const string Expired_1033 = "Expired";
					public const string Rejected_1033 = "Rejected";
					public const string Archived_1033 = "Archived";
					public const string Discarded_1033 = "Discarded";
					public const string Rejected_2_1033 = "Rejected";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(StatusCode), label, languageCode);
					}
				}

				public static class UpdateContent 
				{
					public const string ContentUpdated_1033 = "Content Updated";
					public const string MarkWhenCompleted_1033 = "Mark When Completed";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(UpdateContent), label, languageCode);
					}
				}

			}

			#endregion
		}

		#endregion

		#region Fields

		public static class Fields
		{
			#region Logical names

			public const string ArticlePublicNumber = "articlepublicnumber";
			public const string bby_addcomments = "bby_addcomments";
			public const string bby_approvaltype = "bby_approvaltype";
			public const string bby_approver = "bby_approver";
			public const string bby_approvinggroup = "bby_approvinggroup";
			public const string bby_approvingteam = "bby_approvingteam";
			public const string bby_articlepublicnumbersearch = "bby_articlepublicnumbersearch";
			public const string bby_articleverified = "bby_articleverified";
			public const string bby_AssociatedCategoriesData = "bby_associatedcategoriesdata";
			public const string bby_attachmentdetails = "bby_attachmentdetails";
			public const string bby_attachments = "bby_attachments";
			public const string bby_blobcontainername = "bby_blobcontainername";
			public const string bby_categories = "bby_categories";
			public const string bby_categorydata = "bby_categorydata";
			public const string bby_categoryguids = "bby_categoryguids";
			public const string bby_contentowner = "bby_contentowner";
			public const string bby_contenttype = "bby_contenttype";
			public const string bby_displaytype = "bby_displaytype";
			public const string bby_featured = "bby_featured";
			public const string bby_feedback_avg = "bby_feedback_avg";
			public const string bby_feedback_no = "bby_feedback_no";
			public const string bby_feedback_yes = "bby_feedback_yes";
			public const string bby_hasattachments = "bby_hasattachments";
			public const string bby_hiddenfeedbackno = "bby_hiddenfeedbackno";
			public const string bby_hiddenfeedbackyes = "bby_hiddenfeedbackyes";
			public const string bby_isratingcumilative = "bby_isratingcumilative";
			public const string bby_kanaid = "bby_kanaid";
			public const string bby_kanamigratablereference = "bby_kanamigratablereference";
			public const string bby_keywordssearch = "bby_keywordssearch";
			public const string bby_knowledgearticlewebcals = "bby_knowledgearticlewebcals";
			public const string bby_lastnotificationdate = "bby_lastnotificationdate";
			public const string bby_notificationcount = "bby_notificationcount";
			public const string bby_portalcreatedby = "bby_portalcreatedby";
			public const string bby_portaleditor = "bby_portaleditor";
			public const string bby_portalmodifiedon = "bby_portalmodifiedon";
			public const string bby_productcategories = "bby_productcategories";
			public const string bby_productdata = "bby_productdata";
			public const string bby_productdatasearch = "bby_productdatasearch";
			public const string bby_productmodelnumbers = "bby_productmodelnumbers";
			public const string bby_productmodelnumberssearch = "bby_productmodelnumberssearch";
			public const string bby_productvendors = "bby_productvendors";
			public const string bby_productvendorssearch = "bby_productvendorssearch";
			public const string bby_promoend = "bby_promoend";
			public const string bby_promostart = "bby_promostart";
			public const string bby_promotionaltype = "bby_promotionaltype";
			public const string bby_publishedby = "bby_publishedby";
			public const string bby_refreshportalcategories = "bby_refreshportalcategories";
			public const string bby_RejectionReason = "bby_rejectionreason";
			public const string bby_remindermessagecounter = "bby_remindermessagecounter";
			public const string bby_securecontent = "bby_securecontent";
			public const string bby_securitymodifiedon = "bby_securitymodifiedon";
			public const string bby_totalfeedback = "bby_totalfeedback";
			public const string bby_triggernotification = "bby_triggernotification";
			public const string bby_versioncreatedby = "bby_versioncreatedby";
			public const string bby_versionflag = "bby_versionflag";
			public const string bby_versionfromarticleid = "bby_versionfromarticleid";
			public const string bby_versioningcomments = "bby_versioningcomments";
			public const string bby_versionnotesadded = "bby_versionnotesadded";
			public const string Content = "content";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string Description = "description";
			public const string ExchangeRate = "exchangerate";
			public const string ExpirationDate = "expirationdate";
			public const string ExpirationStateId = "expirationstateid";
			public const string ExpirationStatusId = "expirationstatusid";
			public const string ExpiredReviewOptions = "expiredreviewoptions";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string IsInternal = "isinternal";
			public const string IsLatestVersion = "islatestversion";
			public const string IsPrimary = "isprimary";
			public const string IsRootArticle = "isrootarticle";
			public const string Keywords = "keywords";
			public const string knowledgearticleId = "knowledgearticleid";
			public const string KnowledgeArticleViews = "knowledgearticleviews";
			public const string KnowledgeArticleViews_Date = "knowledgearticleviews_date";
			public const string KnowledgeArticleViews_State = "knowledgearticleviews_state";
			public const string LanguageLocaleId = "languagelocaleid";
			public const string MajorVersionNumber = "majorversionnumber";
			public const string MinorVersionNumber = "minorversionnumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string ParentArticleContentId = "parentarticlecontentid";
			public const string PreviousArticleContentId = "previousarticlecontentid";
			public const string primaryauthorid = "primaryauthorid";
			public const string processid = "processid";
			public const string PublishOn = "publishon";
			public const string PublishStatusId = "publishstatusid";
			public const string Rating = "rating";
			public const string Rating_Count = "rating_count";
			public const string Rating_Date = "rating_date";
			public const string Rating_State = "rating_state";
			public const string Rating_Sum = "rating_sum";
			public const string ReadyForReview = "readyforreview";
			public const string Review = "review";
			public const string RootArticleId = "rootarticleid";
			public const string ScheduledStatusId = "scheduledstatusid";
			public const string SetCategoryAssociations = "setcategoryassociations";
			public const string SetProductAssociations = "setproductassociations";
			public const string stageid = "stageid";
			public const string StateCode = "statecode";
			public const string StatusCode = "statuscode";
			public const string SubjectId = "subjectid";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string Title = "title";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string traversedpath = "traversedpath";
			public const string UpdateContent = "updatecontent";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";

			#endregion

			#region Schema names

			public static class Schema
			{
				public const string ArticlePublicNumber = "ArticlePublicNumber";
				public const string bby_addcomments = "bby_addcomments";
				public const string bby_approvaltype = "bby_approvaltype";
				public const string bby_approver = "bby_approver";
				public const string bby_approvinggroup = "bby_approvinggroup";
				public const string bby_approvingteam = "bby_approvingteam";
				public const string bby_articlepublicnumbersearch = "bby_articlepublicnumbersearch";
				public const string bby_articleverified = "bby_articleverified";
				public const string bby_AssociatedCategoriesData = "bby_AssociatedCategoriesData";
				public const string bby_attachmentdetails = "bby_attachmentdetails";
				public const string bby_attachments = "bby_attachments";
				public const string bby_blobcontainername = "bby_blobcontainername";
				public const string bby_categories = "bby_categories";
				public const string bby_categorydata = "bby_categorydata";
				public const string bby_categoryguids = "bby_categoryguids";
				public const string bby_contentowner = "bby_contentowner";
				public const string bby_contenttype = "bby_contenttype";
				public const string bby_displaytype = "bby_displaytype";
				public const string bby_featured = "bby_featured";
				public const string bby_feedback_avg = "bby_feedback_avg";
				public const string bby_feedback_no = "bby_feedback_no";
				public const string bby_feedback_yes = "bby_feedback_yes";
				public const string bby_hasattachments = "bby_hasattachments";
				public const string bby_hiddenfeedbackno = "bby_hiddenfeedbackno";
				public const string bby_hiddenfeedbackyes = "bby_hiddenfeedbackyes";
				public const string bby_isratingcumilative = "bby_isratingcumilative";
				public const string bby_kanaid = "bby_kanaid";
				public const string bby_kanamigratablereference = "bby_kanamigratablereference";
				public const string bby_keywordssearch = "bby_keywordssearch";
				public const string bby_knowledgearticlewebcals = "bby_knowledgearticlewebcals";
				public const string bby_lastnotificationdate = "bby_lastnotificationdate";
				public const string bby_notificationcount = "bby_notificationcount";
				public const string bby_portalcreatedby = "bby_portalcreatedby";
				public const string bby_portaleditor = "bby_portaleditor";
				public const string bby_portalmodifiedon = "bby_portalmodifiedon";
				public const string bby_productcategories = "bby_productcategories";
				public const string bby_productdata = "bby_productdata";
				public const string bby_productdatasearch = "bby_productdatasearch";
				public const string bby_productmodelnumbers = "bby_productmodelnumbers";
				public const string bby_productmodelnumberssearch = "bby_productmodelnumberssearch";
				public const string bby_productvendors = "bby_productvendors";
				public const string bby_productvendorssearch = "bby_productvendorssearch";
				public const string bby_promoend = "bby_promoend";
				public const string bby_promostart = "bby_promostart";
				public const string bby_promotionaltype = "bby_promotionaltype";
				public const string bby_publishedby = "bby_publishedby";
				public const string bby_refreshportalcategories = "bby_refreshportalcategories";
				public const string bby_RejectionReason = "bby_RejectionReason";
				public const string bby_remindermessagecounter = "bby_remindermessagecounter";
				public const string bby_securecontent = "bby_securecontent";
				public const string bby_securitymodifiedon = "bby_securitymodifiedon";
				public const string bby_totalfeedback = "bby_totalfeedback";
				public const string bby_triggernotification = "bby_triggernotification";
				public const string bby_versioncreatedby = "bby_versioncreatedby";
				public const string bby_versionflag = "bby_versionflag";
				public const string bby_versionfromarticleid = "bby_versionfromarticleid";
				public const string bby_versioningcomments = "bby_versioningcomments";
				public const string bby_versionnotesadded = "bby_versionnotesadded";
				public const string Content = "Content";
				public const string CreatedBy = "CreatedBy";
				public const string CreatedOn = "CreatedOn";
				public const string CreatedOnBehalfBy = "CreatedOnBehalfBy";
				public const string Description = "Description";
				public const string ExchangeRate = "ExchangeRate";
				public const string ExpirationDate = "ExpirationDate";
				public const string ExpirationStateId = "ExpirationStateId";
				public const string ExpirationStatusId = "ExpirationStatusId";
				public const string ExpiredReviewOptions = "ExpiredReviewOptions";
				public const string ImportSequenceNumber = "ImportSequenceNumber";
				public const string IsInternal = "IsInternal";
				public const string IsLatestVersion = "IsLatestVersion";
				public const string IsPrimary = "IsPrimary";
				public const string IsRootArticle = "IsRootArticle";
				public const string Keywords = "Keywords";
				public const string knowledgearticleId = "knowledgearticleId";
				public const string KnowledgeArticleViews = "KnowledgeArticleViews";
				public const string KnowledgeArticleViews_Date = "KnowledgeArticleViews_Date";
				public const string KnowledgeArticleViews_State = "KnowledgeArticleViews_State";
				public const string LanguageLocaleId = "LanguageLocaleId";
				public const string MajorVersionNumber = "MajorVersionNumber";
				public const string MinorVersionNumber = "MinorVersionNumber";
				public const string ModifiedBy = "ModifiedBy";
				public const string ModifiedOn = "ModifiedOn";
				public const string ModifiedOnBehalfBy = "ModifiedOnBehalfBy";
				public const string OverriddenCreatedOn = "OverriddenCreatedOn";
				public const string OwnerId = "OwnerId";
				public const string OwningBusinessUnit = "OwningBusinessUnit";
				public const string OwningTeam = "OwningTeam";
				public const string OwningUser = "OwningUser";
				public const string ParentArticleContentId = "ParentArticleContentId";
				public const string PreviousArticleContentId = "PreviousArticleContentId";
				public const string primaryauthorid = "primaryauthorid";
				public const string processid = "processid";
				public const string PublishOn = "PublishOn";
				public const string PublishStatusId = "PublishStatusId";
				public const string Rating = "Rating";
				public const string Rating_Count = "Rating_Count";
				public const string Rating_Date = "Rating_Date";
				public const string Rating_State = "Rating_State";
				public const string Rating_Sum = "Rating_Sum";
				public const string ReadyForReview = "ReadyForReview";
				public const string Review = "Review";
				public const string RootArticleId = "RootArticleId";
				public const string ScheduledStatusId = "ScheduledStatusId";
				public const string SetCategoryAssociations = "SetCategoryAssociations";
				public const string SetProductAssociations = "SetProductAssociations";
				public const string stageid = "stageid";
				public const string StateCode = "StateCode";
				public const string StatusCode = "StatusCode";
				public const string SubjectId = "SubjectId";
				public const string TimeZoneRuleVersionNumber = "TimeZoneRuleVersionNumber";
				public const string Title = "Title";
				public const string TransactionCurrencyId = "TransactionCurrencyId";
				public const string traversedpath = "traversedpath";
				public const string UpdateContent = "UpdateContent";
				public const string UTCConversionTimeZoneCode = "UTCConversionTimeZoneCode";
				public const string VersionNumber = "VersionNumber";
			}

			#endregion

			#region Labels

			public static class Labels
			{
				public static class ArticlePublicNumber
				{
					public const string _1033 = "edi Number";
				}

				public static class bby_addcomments
				{
					public const string _1033 = "Add Comments";
				}

				public static class bby_approvaltype
				{
					public const string _1033 = "Approval Type";
				}

				public static class bby_approver
				{
					public const string _1033 = "Approver";
				}

				public static class bby_approvinggroup
				{
					public const string _1033 = "Approving Group";
				}

				public static class bby_approvingteam
				{
					public const string _1033 = "Approving Team";
				}

				public static class bby_articlepublicnumbersearch
				{
					public const string _1033 = "Article Public Number Search";
				}

				public static class bby_articleverified
				{
					public const string _1033 = "Article Verified";
				}

				public static class bby_AssociatedCategoriesData
				{
					public const string _1033 = "Associated Categories Data";
				}

				public static class bby_attachmentdetails
				{
					public const string _1033 = "Attachment Details";
				}

				public static class bby_attachments
				{
					public const string _1033 = "Attachments";
				}

				public static class bby_blobcontainername
				{
					public const string _1033 = "Blob Container Name";
				}

				public static class bby_categories
				{
					public const string _1033 = "Categories";
				}

				public static class bby_categorydata
				{
					public const string _1033 = "Category Data";
				}

				public static class bby_categoryguids
				{
					public const string _1033 = "Category Guids";
				}

				public static class bby_contentowner
				{
					public const string _1033 = "Content Owner";
				}

				public static class bby_contenttype
				{
					public const string _1033 = "Content Type";
				}

				public static class bby_displaytype
				{
					public const string _1033 = "Display Type";
				}

				public static class bby_featured
				{
					public const string _1033 = "Featured";
				}

				public static class bby_feedback_avg
				{
					public const string _1033 = "Help Rating";
				}

				public static class bby_feedback_no
				{
					public const string _1033 = "Feedback - No";
				}

				public static class bby_feedback_yes
				{
					public const string _1033 = "Feedback - Yes";
				}

				public static class bby_hasattachments
				{
					public const string _1033 = "Has Attachments";
				}

				public static class bby_hiddenfeedbackno
				{
					public const string _1033 = "Hidden Feedback No";
				}

				public static class bby_hiddenfeedbackyes
				{
					public const string _1033 = "Hidden Feedback Yes";
				}

				public static class bby_isratingcumilative
				{
					public const string _1033 = "Is Rating Cumilative";
				}

				public static class bby_kanaid
				{
					public const string _1033 = "Kana ID";
				}

				public static class bby_kanamigratablereference
				{
					public const string _1033 = "Kana Migratable Reference";
				}

				public static class bby_keywordssearch
				{
					public const string _1033 = "Keywords Search";
				}

				public static class bby_knowledgearticlewebcals
				{
					public const string _1033 = "KnowledgeArticleWebCALs";
				}

				public static class bby_lastnotificationdate
				{
					public const string _1033 = "Last Notification Date";
				}

				public static class bby_notificationcount
				{
					public const string _1033 = "Notification Count";
				}

				public static class bby_portalcreatedby
				{
					public const string _1033 = "Portal Created By";
				}

				public static class bby_portaleditor
				{
					public const string _1033 = "Portal Editor";
				}

				public static class bby_portalmodifiedon
				{
					public const string _1033 = "Last Modified On";
				}

				public static class bby_productcategories
				{
					public const string _1033 = "Product Categories";
				}

				public static class bby_productdata
				{
					public const string _1033 = "Product Data";
				}

				public static class bby_productdatasearch
				{
					public const string _1033 = "Product Data Search";
				}

				public static class bby_productmodelnumbers
				{
					public const string _1033 = "Product Model Numbers";
				}

				public static class bby_productmodelnumberssearch
				{
					public const string _1033 = "Product Model Numbers Search";
				}

				public static class bby_productvendors
				{
					public const string _1033 = "Product Vendors";
				}

				public static class bby_productvendorssearch
				{
					public const string _1033 = "Product Vendors Search";
				}

				public static class bby_promoend
				{
					public const string _1033 = "Promotional End";
				}

				public static class bby_promostart
				{
					public const string _1033 = "Promotional Start";
				}

				public static class bby_promotionaltype
				{
					public const string _1033 = "Type of Promotion";
				}

				public static class bby_publishedby
				{
					public const string _1033 = "Published By";
				}

				public static class bby_refreshportalcategories
				{
					public const string _1033 = "Refresh Portal Categories";
				}

				public static class bby_RejectionReason
				{
					public const string _1033 = "Rejection Reason";
				}

				public static class bby_remindermessagecounter
				{
					public const string _1033 = "Reminder Message Counter";
				}

				public static class bby_securecontent
				{
					public const string _1033 = "Secure Content";
				}

				public static class bby_securitymodifiedon
				{
					public const string _1033 = "Security Modified On";
				}

				public static class bby_totalfeedback
				{
					public const string _1033 = "Total Feedback";
				}

				public static class bby_triggernotification
				{
					public const string _1033 = "Trigger Notification";
				}

				public static class bby_versioncreatedby
				{
					public const string _1033 = "Version Created By";
				}

				public static class bby_versionflag
				{
					public const string _1033 = "Version Flag";
				}

				public static class bby_versionfromarticleid
				{
					public const string _1033 = "Version From Article Id";
				}

				public static class bby_versioningcomments
				{
					public const string _1033 = "Versioning Comments";
				}

				public static class bby_versionnotesadded
				{
					public const string _1033 = "Version Notes";
				}

				public static class Content
				{
					public const string _1033 = "Content";
				}

				public static class CreatedBy
				{
					public const string _1033 = "Created By";
				}

				public static class CreatedOn
				{
					public const string _1033 = "Created On";
				}

				public static class CreatedOnBehalfBy
				{
					public const string _1033 = "Created By (Delegate)";
				}

				public static class Description
				{
					public const string _1033 = "Short Description";
				}

				public static class ExchangeRate
				{
					public const string _1033 = "ExchangeRate";
				}

				public static class ExpirationDate
				{
					public const string _1033 = "Expiration Date";
				}

				public static class ExpirationStateId
				{
					public const string _1033 = "Expiration State Id";
				}

				public static class ExpirationStatusId
				{
					public const string _1033 = "Expired Status";
				}

				public static class ExpiredReviewOptions
				{
					public const string _1033 = "Expired Review Options";
				}

				public static class ImportSequenceNumber
				{
					public const string _1033 = "Import Sequence Number";
				}

				public static class IsInternal
				{
					public const string _1033 = "Internal";
				}

				public static class IsLatestVersion
				{
					public const string _1033 = "Is Latest Version";
				}

				public static class IsPrimary
				{
					public const string _1033 = "Primary Article";
				}

				public static class IsRootArticle
				{
					public const string _1033 = "Root Article";
				}

				public static class Keywords
				{
					public const string _1033 = "Keywords";
				}

				public static class knowledgearticleId
				{
					public const string _1033 = "Knowledge Article";
				}

				public static class KnowledgeArticleViews
				{
					public const string _1033 = "Views";
				}

				public static class KnowledgeArticleViews_Date
				{
					public const string _1033 = "Knowledge Article View(Last Updated Time)";
				}

				public static class KnowledgeArticleViews_State
				{
					public const string _1033 = "Knowledge Article View(State)";
				}

				public static class LanguageLocaleId
				{
					public const string _1033 = "Language";
				}

				public static class MajorVersionNumber
				{
					public const string _1033 = "Major Version Number";
				}

				public static class MinorVersionNumber
				{
					public const string _1033 = "Minor Version Number";
				}

				public static class ModifiedBy
				{
					public const string _1033 = "Modified By";
				}

				public static class ModifiedOn
				{
					public const string _1033 = "Modified On";
				}

				public static class ModifiedOnBehalfBy
				{
					public const string _1033 = "Modified By (Delegate)";
				}

				public static class OverriddenCreatedOn
				{
					public const string _1033 = "Record Created On";
				}

				public static class OwnerId
				{
					public const string _1033 = "Owner";
				}

				public static class OwningBusinessUnit
				{
					public const string _1033 = "Owning Business Unit";
				}

				public static class OwningTeam
				{
					public const string _1033 = "Owning Team";
				}

				public static class OwningUser
				{
					public const string _1033 = "Owning User";
				}

				public static class ParentArticleContentId
				{
					public const string _1033 = "Parent Article Content Id";
				}

				public static class PreviousArticleContentId
				{
					public const string _1033 = "Previous Article Content ID";
				}

				public static class primaryauthorid
				{
					public const string _1033 = "Original Author";
				}

				public static class processid
				{
					public const string _1033 = "Process Id";
				}

				public static class PublishOn
				{
					public const string _1033 = "Publish On";
				}

				public static class PublishStatusId
				{
					public const string _1033 = "Published Status";
				}

				public static class Rating
				{
					public const string _1033 = "Rating";
				}

				public static class Rating_Count
				{
					public const string _1033 = "Rating(Count)";
				}

				public static class Rating_Date
				{
					public const string _1033 = "Rating(Last Updated Time)";
				}

				public static class Rating_State
				{
					public const string _1033 = "Rating(State)";
				}

				public static class Rating_Sum
				{
					public const string _1033 = "Rating(sum)";
				}

				public static class ReadyForReview
				{
					public const string _1033 = "Ready For Review";
				}

				public static class Review
				{
					public const string _1033 = "Review";
				}

				public static class RootArticleId
				{
					public const string _1033 = "Root Article Id";
				}

				public static class ScheduledStatusId
				{
					public const string _1033 = "Scheduled Status";
				}

				public static class SetCategoryAssociations
				{
					public const string _1033 = "Set Category Associations";
				}

				public static class SetProductAssociations
				{
					public const string _1033 = "Set Product Associations";
				}

				public static class stageid
				{
					public const string _1033 = "Stage Id";
				}

				public static class StateCode
				{
					public const string _1033 = "Status";
				}

				public static class StatusCode
				{
					public const string _1033 = "Status Reason";
				}

				public static class SubjectId
				{
					public const string _1033 = "Subject";
				}

				public static class TimeZoneRuleVersionNumber
				{
					public const string _1033 = "Time Zone Rule Version Number";
				}

				public static class Title
				{
					public const string _1033 = "Title";
				}

				public static class TransactionCurrencyId
				{
					public const string _1033 = "Currency";
				}

				public static class traversedpath
				{
					public const string _1033 = "(Deprecated) Traversed Path";
				}

				public static class UpdateContent
				{
					public const string _1033 = "Update Content";
				}

				public static class UTCConversionTimeZoneCode
				{
					public const string _1033 = "UTC Conversion Time Zone Code";
				}

				public static class VersionNumber
				{
				}

			}

			#endregion
		}

		#endregion

		#region Relations

		public static class Relations
		{
			public static class OneToN
			{
				public const string ActivityPartysOfParty = "knowledgearticle_activity_parties";
				public const string KnowledgeArticlesOfParentArticleContentId = "knowledgearticle_parentarticle_contentid";
				public const string KnowledgeArticlesOfPreviousArticleContentID = "knowledgearticle_previousarticle_contentid";
				public const string KnowledgeArticlesOfRootArticleId = "knowledgearticle_rootarticle_id";
			}
			
			public static class NToOne
			{
				public const string KnowledgeArticleAsParentArticleContentId = "knowledgearticle_parentarticle_contentid";
				public const string KnowledgeArticleAsPreviousArticleContentID = "knowledgearticle_previousarticle_contentid";
				public const string KnowledgeArticleAsRootArticleId = "knowledgearticle_rootarticle_id";

				public static class Lookups
				{
					public const string KnowledgeArticleAsParentArticleContentId = "parentarticlecontentid";
					public const string KnowledgeArticleAsPreviousArticleContentID = "previousarticlecontentid";
					public const string KnowledgeArticleAsRootArticleId = "rootarticleid";
				}
			}

			public static class NToN
			{

				public const string KnowledgeArticlesOfmsdyn_knowledgearticle_knowledgearticle = "msdyn_knowledgearticle_knowledgearticle";
			}
		}

		#endregion

		#endregion
	}

	#endregion

	#region msdyn_purchaseorderproduct

	/// <summary>
	/// 'msdyn_purchaseorderproduct'.<br />
	/// Record products to be ordered on purchase order
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract, EntityLogicalName("msdyn_purchaseorderproduct")]
	public partial class msdyn_purchaseorderproduct : GeneratedEntity<msdyn_purchaseorderproduct.RelationName>
	{
		
		public msdyn_purchaseorderproduct() : 
				base(EntityLogicalName)
		{
		}
		
		public const string DisplayName = "Purchase Order Product";
		public const string SchemaName = "msdyn_purchaseorderproduct";
		public const string EntityLogicalName = "msdyn_purchaseorderproduct";
		public const int EntityTypeCode = 10149;
		
		public class RelationName : RelationNameBase
		{
			public RelationName(string name) : base(name)
			{}
		}


		#region Attributes

		[AttributeLogicalName("msdyn_purchaseorderproductid"), DataMember]
		public override System.Guid Id
		{
			get
			{
				return (msdyn_purchaseorderproductId == null || msdyn_purchaseorderproductId == Guid.Empty) ? base.Id : msdyn_purchaseorderproductId.GetValueOrDefault();
			}
			
			set
			{
                if (value == Guid.Empty) {
                    Attributes.Remove("msdyn_purchaseorderproductid");
                    base.Id = value;
                } else {
				    msdyn_purchaseorderproductId = value;
                }
			}
		}

        /// <summary>
        ///  
		/// 'CreatedBy'.<br />
        /// Unique identifier of the user who created the record.
        /// </summary>
		[AttributeLogicalName("createdby")]
		public Guid? CreatedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdby"))
				    value = (EntityReference) backupAttributeCollection["createdby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("CreatedBy");
                if (value != null)
				    SetAttributeValue("createdby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("createdby", value);
				OnPropertyChanged("CreatedBy");
			}
		}

        public string CreatedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdby"))
				    value = (EntityReference) backupAttributeCollection["createdby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_fullname", "systemuser", "systemuserid", "createdby")]
        public IDictionary<int, string> CreatedByLabels { get; set; }

        /// <summary>
        ///  
		/// 'CreatedOn'.<br />
        /// Shows the date and time when the record was created. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.
        /// </summary>
		[AttributeLogicalName("createdon")]
		public DateTime? CreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("createdon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdon"))
				    value = (DateTime?) backupAttributeCollection["createdon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("CreatedOn");
					SetAttributeValue("createdon", value);
				OnPropertyChanged("CreatedOn");
			}
		}

        /// <summary>
        ///  
		/// 'CreatedOnBehalfBy'.<br />
        /// Shows who created the record on behalf of another user.
        /// </summary>
		[AttributeLogicalName("createdonbehalfby")]
		public Guid? CreatedOnBehalfBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["createdonbehalfby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("CreatedOnBehalfBy");
                if (value != null)
				    SetAttributeValue("createdonbehalfby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("createdonbehalfby", value);
				OnPropertyChanged("CreatedOnBehalfBy");
			}
		}

        public string CreatedOnBehalfByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["createdonbehalfby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_fullname", "systemuser", "systemuserid", "createdonbehalfby")]
        public IDictionary<int, string> CreatedOnBehalfByLabels { get; set; }

        /// <summary>
        /// [Range(0.0000000001, 100000000000)] 
		/// 'ExchangeRate'.<br />
        /// Shows the exchange rate for the currency associated with the entity with respect to the base currency.
        /// </summary>
		[AttributeLogicalName("exchangerate"), InRange("0.0000000001", "100000000000", typeof(decimal))]
		public decimal? ExchangeRate
		{
			get
			{
				var value = GetAttributeValue<decimal?>("exchangerate");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("exchangerate"))
				    value = (decimal?) backupAttributeCollection["exchangerate"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ExchangeRate");
					SetAttributeValue("exchangerate", value);
				OnPropertyChanged("ExchangeRate");
			}
		}

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'ImportSequenceNumber'.<br />
        /// Shows the sequence number of the import that created this record.
        /// </summary>
		[AttributeLogicalName("importsequencenumber"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? ImportSequenceNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("importsequencenumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("importsequencenumber"))
				    value = (int?) backupAttributeCollection["importsequencenumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ImportSequenceNumber");
					SetAttributeValue("importsequencenumber", value);
				OnPropertyChanged("ImportSequenceNumber");
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedBy'.<br />
        /// Unique identifier of the user who modified the record.
        /// </summary>
		[AttributeLogicalName("modifiedby")]
		public Guid? ModifiedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedby"))
				    value = (EntityReference) backupAttributeCollection["modifiedby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ModifiedBy");
                if (value != null)
				    SetAttributeValue("modifiedby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("modifiedby", value);
				OnPropertyChanged("ModifiedBy");
			}
		}

        public string ModifiedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedby"))
				    value = (EntityReference) backupAttributeCollection["modifiedby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_fullname", "systemuser", "systemuserid", "modifiedby")]
        public IDictionary<int, string> ModifiedByLabels { get; set; }

        /// <summary>
        ///  
		/// 'ModifiedOn'.<br />
        /// Shows the date and time when the record was last updated. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.
        /// </summary>
		[AttributeLogicalName("modifiedon")]
		public DateTime? ModifiedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("modifiedon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedon"))
				    value = (DateTime?) backupAttributeCollection["modifiedon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ModifiedOn");
					SetAttributeValue("modifiedon", value);
				OnPropertyChanged("ModifiedOn");
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedOnBehalfBy'.<br />
        /// Shows who last updated the record on behalf of another user.
        /// </summary>
		[AttributeLogicalName("modifiedonbehalfby")]
		public Guid? ModifiedOnBehalfBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["modifiedonbehalfby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ModifiedOnBehalfBy");
                if (value != null)
				    SetAttributeValue("modifiedonbehalfby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("modifiedonbehalfby", value);
				OnPropertyChanged("ModifiedOnBehalfBy");
			}
		}

        public string ModifiedOnBehalfByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["modifiedonbehalfby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_fullname", "systemuser", "systemuserid", "modifiedonbehalfby")]
        public IDictionary<int, string> ModifiedOnBehalfByLabels { get; set; }

        /// <summary>
        ///  
		/// 'msdyn_AssociateToBooking'.<br />
        /// Link this product to Booking. If specified and warehouse is not set then product will be added to Resource Booking
        /// </summary>
		[AttributeLogicalName("msdyn_associatetobooking")]
		public Guid? msdyn_AssociateToBooking
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("msdyn_associatetobooking");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("msdyn_associatetobooking"))
				    value = (EntityReference) backupAttributeCollection["msdyn_associatetobooking"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("msdyn_AssociateToBooking");
                if (value != null)
				    SetAttributeValue("msdyn_associatetobooking", new EntityReference("bookableresourcebooking", value.Value));
                else
					SetAttributeValue("msdyn_associatetobooking", value);
				OnPropertyChanged("msdyn_AssociateToBooking");
			}
		}

        public string msdyn_AssociateToBookingName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("msdyn_associatetobooking");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("msdyn_associatetobooking"))
				    value = (EntityReference) backupAttributeCollection["msdyn_associatetobooking"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_name", "bookableresourcebooking", "bookableresourcebookingid", "msdyn_associatetobooking")]
        public IDictionary<int, string> msdyn_AssociateToBookingLabels { get; set; }

        /// <summary>
        ///  
		/// 'msdyn_AssociateToWarehouse'.<br />
        /// Warehouse to which this product should be received to
        /// </summary>
		[AttributeLogicalName("msdyn_associatetowarehouse")]
		public Guid? msdyn_AssociateToWarehouse
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("msdyn_associatetowarehouse");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("msdyn_associatetowarehouse"))
				    value = (EntityReference) backupAttributeCollection["msdyn_associatetowarehouse"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("msdyn_AssociateToWarehouse");
                if (value != null)
				    SetAttributeValue("msdyn_associatetowarehouse", new EntityReference("msdyn_warehouse", value.Value));
                else
					SetAttributeValue("msdyn_associatetowarehouse", value);
				OnPropertyChanged("msdyn_AssociateToWarehouse");
			}
		}

        public string msdyn_AssociateToWarehouseName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("msdyn_associatetowarehouse");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("msdyn_associatetowarehouse"))
				    value = (EntityReference) backupAttributeCollection["msdyn_associatetowarehouse"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_msdyn_name", "msdyn_warehouse", "msdyn_warehouseid", "msdyn_associatetowarehouse")]
        public IDictionary<int, string> msdyn_AssociateToWarehouseLabels { get; set; }

        /// <summary>
        ///  
		/// 'msdyn_AssociateToWorkOrder'.<br />
        /// Link this product to Work Order. If specified and warehouse is not set then product will be added to work order
        /// </summary>
		[AttributeLogicalName("msdyn_associatetoworkorder")]
		public Guid? msdyn_AssociateToWorkOrder
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("msdyn_associatetoworkorder");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("msdyn_associatetoworkorder"))
				    value = (EntityReference) backupAttributeCollection["msdyn_associatetoworkorder"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("msdyn_AssociateToWorkOrder");
                if (value != null)
				    SetAttributeValue("msdyn_associatetoworkorder", new EntityReference("msdyn_workorder", value.Value));
                else
					SetAttributeValue("msdyn_associatetoworkorder", value);
				OnPropertyChanged("msdyn_AssociateToWorkOrder");
			}
		}

        public string msdyn_AssociateToWorkOrderName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("msdyn_associatetoworkorder");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("msdyn_associatetoworkorder"))
				    value = (EntityReference) backupAttributeCollection["msdyn_associatetoworkorder"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_msdyn_name", "msdyn_workorder", "msdyn_workorderid", "msdyn_associatetoworkorder")]
        public IDictionary<int, string> msdyn_AssociateToWorkOrderLabels { get; set; }

        /// <summary>
        ///  
		/// 'msdyn_DateExpected'.<br />
        /// Enter the date you expect this product to arrive to the shipping address. This value defaults to the date set on the PO.
        /// </summary>
		[AttributeLogicalName("msdyn_dateexpected")]
		public DateTime? msdyn_DateExpected
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("msdyn_dateexpected");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("msdyn_dateexpected"))
				    value = (DateTime?) backupAttributeCollection["msdyn_dateexpected"];
			    return value;
			}
			set
			{
				OnPropertyChanging("msdyn_DateExpected");
					SetAttributeValue("msdyn_dateexpected", value);
				OnPropertyChanged("msdyn_DateExpected");
			}
		}

        /// <summary>
        /// [MaximumLength=2000] 
		/// 'msdyn_Description'.<br />
        /// Enter the product description to display for the vendor.
        /// </summary>
		[AttributeLogicalName("msdyn_description"), MaxLength(2000)]
		public string msdyn_Description
		{
			get
			{
				var value = GetAttributeValue<string>("msdyn_description");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("msdyn_description"))
				    value = (string) backupAttributeCollection["msdyn_description"];
			    return value;
			}
			set
			{
				OnPropertyChanging("msdyn_Description");
					SetAttributeValue("msdyn_description", value);
				OnPropertyChanged("msdyn_Description");
			}
		}

		[AttributeLogicalName("msdyn_internalflags"), MaxLength(1048576)]
		public string msdyn_InternalFlags
		{
			get
			{
				var value = GetAttributeValue<string>("msdyn_internalflags");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("msdyn_internalflags"))
				    value = (string) backupAttributeCollection["msdyn_internalflags"];
			    return value;
			}
			set
			{
				OnPropertyChanging("msdyn_InternalFlags");
					SetAttributeValue("msdyn_internalflags", value);
				OnPropertyChanged("msdyn_InternalFlags");
			}
		}

		[AttributeLogicalName("msdyn_isordered")]
		public bool? msdyn_IsOrdered
		{
			get
			{
				var value = GetAttributeValue<bool?>("msdyn_isordered");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("msdyn_isordered"))
				    value = (bool?) backupAttributeCollection["msdyn_isordered"];
			    return value;
			}
			set
			{
				OnPropertyChanging("msdyn_IsOrdered");
					SetAttributeValue("msdyn_isordered", value);
				OnPropertyChanged("msdyn_IsOrdered");
			}
		}

        public IDictionary<int, string> msdyn_IsOrderedLabels
        {
		    get
		    {
                var value = GetAttributeValue<bool?>("msdyn_isordered");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("msdyn_isordered"))
				    value = (bool?) backupAttributeCollection["msdyn_isordered"];
                if (value == null)
                    return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("msdyn_isordered", (bool) value ? 1 : 0, 1033) },
                        };
            }
            set
            {}
        }

        /// <summary>
        /// [Required] 
		/// 'msdyn_ItemStatus'.<br />
        /// Enter the current status of this product.
        /// </summary>
		[AttributeLogicalName("msdyn_itemstatus"), Required]
		public msdyn_ItemStatusEnum? msdyn_ItemStatus
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("msdyn_itemstatus");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("msdyn_itemstatus"))
				    value = (OptionSetValue) backupAttributeCollection["msdyn_itemstatus"];
                return value == null ? (msdyn_ItemStatusEnum?) null : (msdyn_ItemStatusEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("msdyn_ItemStatus");
                if (value != null)
				    SetAttributeValue("msdyn_itemstatus", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("msdyn_itemstatus", value);
				OnPropertyChanged("msdyn_ItemStatus");
			}
		}

        public IDictionary<int, string> msdyn_ItemStatusLabels
        {
		    get
		    {
                var value = GetAttributeValue<OptionSetValue>("msdyn_itemstatus");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("msdyn_itemstatus"))
				    value = (OptionSetValue) backupAttributeCollection["msdyn_itemstatus"];
                if (value == null)
                    return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("msdyn_itemstatus", value.Value, 1033) },
                        };
            }
            set
            {}
        }

        /// <summary>
        /// [Required][Range(-2147483648, 2147483647)] 
		/// 'msdyn_LineOrder'.<br />
        /// Shows the order of this product within the purchase order.
        /// </summary>
		[AttributeLogicalName("msdyn_lineorder"), Required, InRange("-2147483648", "2147483647", typeof(int))]
		public int? msdyn_LineOrder
		{
			get
			{
				var value = GetAttributeValue<int?>("msdyn_lineorder");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("msdyn_lineorder"))
				    value = (int?) backupAttributeCollection["msdyn_lineorder"];
			    return value;
			}
			set
			{
				OnPropertyChanging("msdyn_LineOrder");
					SetAttributeValue("msdyn_lineorder", value);
				OnPropertyChanged("msdyn_LineOrder");
			}
		}

        /// <summary>
        /// [MaximumLength=100] 
		/// 'msdyn_name'.<br />
        /// Enter the name of the custom entity.
        /// </summary>
		[AttributeLogicalName("msdyn_name"), MaxLength(100)]
		public string msdyn_name
		{
			get
			{
				var value = GetAttributeValue<string>("msdyn_name");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("msdyn_name"))
				    value = (string) backupAttributeCollection["msdyn_name"];
			    return value;
			}
			set
			{
				OnPropertyChanging("msdyn_name");
					SetAttributeValue("msdyn_name", value);
				OnPropertyChanged("msdyn_name");
			}
		}

        /// <summary>
        /// [Required] 
		/// 'msdyn_Product'.<br />
        /// Product to order
        /// </summary>
		[AttributeLogicalName("msdyn_product"), Required]
		public Guid? msdyn_Product
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("msdyn_product");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("msdyn_product"))
				    value = (EntityReference) backupAttributeCollection["msdyn_product"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("msdyn_Product");
                if (value != null)
				    SetAttributeValue("msdyn_product", new EntityReference("product", value.Value));
                else
					SetAttributeValue("msdyn_product", value);
				OnPropertyChanged("msdyn_Product");
			}
		}

        public string msdyn_ProductName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("msdyn_product");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("msdyn_product"))
				    value = (EntityReference) backupAttributeCollection["msdyn_product"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_name", "product", "productid", "msdyn_product")]
        public IDictionary<int, string> msdyn_ProductLabels { get; set; }

        /// <summary>
        /// [Required] 
		/// 'msdyn_PurchaseOrder'.<br />
        /// Purchase order this line item relates to
        /// </summary>
		[AttributeLogicalName("msdyn_purchaseorder"), Required]
		public Guid? msdyn_PurchaseOrder
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("msdyn_purchaseorder");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("msdyn_purchaseorder"))
				    value = (EntityReference) backupAttributeCollection["msdyn_purchaseorder"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("msdyn_PurchaseOrder");
                if (value != null)
				    SetAttributeValue("msdyn_purchaseorder", new EntityReference("msdyn_purchaseorder", value.Value));
                else
					SetAttributeValue("msdyn_purchaseorder", value);
				OnPropertyChanged("msdyn_PurchaseOrder");
			}
		}

        public string msdyn_PurchaseOrderName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("msdyn_purchaseorder");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("msdyn_purchaseorder"))
				    value = (EntityReference) backupAttributeCollection["msdyn_purchaseorder"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_msdyn_name", "msdyn_purchaseorder", "msdyn_purchaseorderid", "msdyn_purchaseorder")]
        public IDictionary<int, string> msdyn_PurchaseOrderLabels { get; set; }

        /// <summary>
        ///  
		/// 'msdyn_purchaseorderproductId'.<br />
        /// Shows the entity instances.
        /// </summary>
		[AttributeLogicalName("msdyn_purchaseorderproductid")]
		public Guid? msdyn_purchaseorderproductId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("msdyn_purchaseorderproductid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("msdyn_purchaseorderproductid"))
				    value = (Guid?) backupAttributeCollection["msdyn_purchaseorderproductid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("msdyn_purchaseorderproductId");
                if (value != null)
					SetAttributeValue("msdyn_purchaseorderproductid", value);
				if (value != null)
					base.Id = value.Value;
				else
					Id = System.Guid.Empty;
				OnPropertyChanged("msdyn_purchaseorderproductId");
			}
		}

        /// <summary>
        /// [Range(0, 1000000000)] 
		/// 'msdyn_QtyBilled'.<br />
        /// Enter the quantity currently billed.
        /// </summary>
		[AttributeLogicalName("msdyn_qtybilled"), InRange("0", "1000000000", typeof(double))]
		public double? msdyn_QtyBilled
		{
			get
			{
				var value = GetAttributeValue<double?>("msdyn_qtybilled");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("msdyn_qtybilled"))
				    value = (double?) backupAttributeCollection["msdyn_qtybilled"];
			    return value;
			}
			set
			{
				OnPropertyChanging("msdyn_QtyBilled");
					SetAttributeValue("msdyn_qtybilled", value);
				OnPropertyChanged("msdyn_QtyBilled");
			}
		}

        /// <summary>
        /// [Range(0, 1000000000)] 
		/// 'msdyn_QtyReceived'.<br />
        /// Enter the quantity currently received.
        /// </summary>
		[AttributeLogicalName("msdyn_qtyreceived"), InRange("0", "1000000000", typeof(double))]
		public double? msdyn_QtyReceived
		{
			get
			{
				var value = GetAttributeValue<double?>("msdyn_qtyreceived");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("msdyn_qtyreceived"))
				    value = (double?) backupAttributeCollection["msdyn_qtyreceived"];
			    return value;
			}
			set
			{
				OnPropertyChanging("msdyn_QtyReceived");
					SetAttributeValue("msdyn_qtyreceived", value);
				OnPropertyChanged("msdyn_QtyReceived");
			}
		}

        /// <summary>
        /// [Required][Range(0, 1000000000)] 
		/// 'msdyn_Quantity'.<br />
        /// Enter the quantity ordered.
        /// </summary>
		[AttributeLogicalName("msdyn_quantity"), Required, InRange("0", "1000000000", typeof(double))]
		public double? msdyn_Quantity
		{
			get
			{
				var value = GetAttributeValue<double?>("msdyn_quantity");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("msdyn_quantity"))
				    value = (double?) backupAttributeCollection["msdyn_quantity"];
			    return value;
			}
			set
			{
				OnPropertyChanging("msdyn_Quantity");
					SetAttributeValue("msdyn_quantity", value);
				OnPropertyChanged("msdyn_Quantity");
			}
		}

        /// <summary>
        /// [Range(0, 922337203685477)] 
		/// 'msdyn_TotalCost'.<br />
        /// Shows the total cost of this product. This is calculated by (Unit Cost * Units) + Additional Cost + Commission Costs
        /// </summary>
		[AttributeLogicalName("msdyn_totalcost"), InRange("0", "922337203685477", typeof(decimal))]
		public decimal? msdyn_TotalCost
		{
			get
			{
				var value = GetAttributeValue<Money>("msdyn_totalcost");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("msdyn_totalcost"))
				    value = (Money) backupAttributeCollection["msdyn_totalcost"];
                return value == null ? (decimal?) null : value.Value;
			}
			set
			{
				OnPropertyChanging("msdyn_TotalCost");
                if (value != null)
				    SetAttributeValue("msdyn_totalcost", new Money(value.Value));
                else
					SetAttributeValue("msdyn_totalcost", value);
				OnPropertyChanged("msdyn_TotalCost");
			}
		}

        /// <summary>
        /// [Range(-922337203685477, 922337203685477)] 
		/// 'msdyn_totalcost_Base'.<br />
        /// Shows the value of the total cost in the base currency.
        /// </summary>
		[AttributeLogicalName("msdyn_totalcost_base"), InRange("-922337203685477", "922337203685477", typeof(decimal))]
		public decimal? msdyn_totalcost_Base
		{
			get
			{
				var value = GetAttributeValue<Money>("msdyn_totalcost_base");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("msdyn_totalcost_base"))
				    value = (Money) backupAttributeCollection["msdyn_totalcost_base"];
                return value == null ? (decimal?) null : value.Value;
			}
			set
			{
				OnPropertyChanging("msdyn_totalcost_Base");
                if (value != null)
				    SetAttributeValue("msdyn_totalcost_base", new Money(value.Value));
                else
					SetAttributeValue("msdyn_totalcost_base", value);
				OnPropertyChanged("msdyn_totalcost_Base");
			}
		}

        /// <summary>
        /// [Required] 
		/// 'msdyn_Unit'.<br />
        /// Unit for this product
        /// </summary>
		[AttributeLogicalName("msdyn_unit"), Required]
		public Guid? msdyn_Unit
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("msdyn_unit");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("msdyn_unit"))
				    value = (EntityReference) backupAttributeCollection["msdyn_unit"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("msdyn_Unit");
                if (value != null)
				    SetAttributeValue("msdyn_unit", new EntityReference("uom", value.Value));
                else
					SetAttributeValue("msdyn_unit", value);
				OnPropertyChanged("msdyn_Unit");
			}
		}

        public string msdyn_UnitName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("msdyn_unit");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("msdyn_unit"))
				    value = (EntityReference) backupAttributeCollection["msdyn_unit"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_name", "uom", "uomid", "msdyn_unit")]
        public IDictionary<int, string> msdyn_UnitLabels { get; set; }

        /// <summary>
        /// [Range(0, 1000000000)] 
		/// 'msdyn_UnitCost'.<br />
        /// Enter the cost of this product per unit.
        /// </summary>
		[AttributeLogicalName("msdyn_unitcost"), InRange("0", "1000000000", typeof(decimal))]
		public decimal? msdyn_UnitCost
		{
			get
			{
				var value = GetAttributeValue<Money>("msdyn_unitcost");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("msdyn_unitcost"))
				    value = (Money) backupAttributeCollection["msdyn_unitcost"];
                return value == null ? (decimal?) null : value.Value;
			}
			set
			{
				OnPropertyChanging("msdyn_UnitCost");
                if (value != null)
				    SetAttributeValue("msdyn_unitcost", new Money(value.Value));
                else
					SetAttributeValue("msdyn_unitcost", value);
				OnPropertyChanged("msdyn_UnitCost");
			}
		}

        /// <summary>
        /// [Range(-922337203685477, 922337203685477)] 
		/// 'msdyn_unitcost_Base'.<br />
        /// Shows the value of the unit cost in the base currency.
        /// </summary>
		[AttributeLogicalName("msdyn_unitcost_base"), InRange("-922337203685477", "922337203685477", typeof(decimal))]
		public decimal? msdyn_unitcost_Base
		{
			get
			{
				var value = GetAttributeValue<Money>("msdyn_unitcost_base");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("msdyn_unitcost_base"))
				    value = (Money) backupAttributeCollection["msdyn_unitcost_base"];
                return value == null ? (decimal?) null : value.Value;
			}
			set
			{
				OnPropertyChanging("msdyn_unitcost_Base");
                if (value != null)
				    SetAttributeValue("msdyn_unitcost_base", new Money(value.Value));
                else
					SetAttributeValue("msdyn_unitcost_base", value);
				OnPropertyChanged("msdyn_unitcost_Base");
			}
		}

        /// <summary>
        ///  
		/// 'OverriddenCreatedOn'.<br />
        /// Shows the date and time that the record was migrated.
        /// </summary>
		[AttributeLogicalName("overriddencreatedon")]
		public DateTime? OverriddenCreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("overriddencreatedon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("overriddencreatedon"))
				    value = (DateTime?) backupAttributeCollection["overriddencreatedon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("OverriddenCreatedOn");
					SetAttributeValue("overriddencreatedon", value);
				OnPropertyChanged("OverriddenCreatedOn");
			}
		}

        /// <summary>
        ///  
		/// 'OwnerId'.<br />
        /// Owner Id
        /// </summary>
		[AttributeLogicalName("ownerid")]
		public EntityReference OwnerId
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ownerid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ownerid"))
				    value = (EntityReference) backupAttributeCollection["ownerid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("OwnerId");
					SetAttributeValue("ownerid", value);
				OnPropertyChanged("OwnerId");
			}
		}

        public string OwnerIdName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ownerid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ownerid"))
				    value = (EntityReference) backupAttributeCollection["ownerid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        public IDictionary<int, string> OwnerIdLabels { get; set; }

        /// <summary>
        ///  
		/// 'OwningBusinessUnit'.<br />
        /// Unique identifier for the business unit that owns the record
        /// </summary>
		[AttributeLogicalName("owningbusinessunit")]
		public Guid? OwningBusinessUnit
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owningbusinessunit");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningbusinessunit"))
				    value = (EntityReference) backupAttributeCollection["owningbusinessunit"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningBusinessUnit");
                if (value != null)
				    SetAttributeValue("owningbusinessunit", new EntityReference("businessunit", value.Value));
                else
					SetAttributeValue("owningbusinessunit", value);
				OnPropertyChanged("OwningBusinessUnit");
			}
		}

        public string OwningBusinessUnitName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owningbusinessunit");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningbusinessunit"))
				    value = (EntityReference) backupAttributeCollection["owningbusinessunit"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_name", "businessunit", "businessunitid", "owningbusinessunit")]
        public IDictionary<int, string> OwningBusinessUnitLabels { get; set; }

        /// <summary>
        ///  
		/// 'OwningTeam'.<br />
        /// Unique identifier for the team that owns the record.
        /// </summary>
		[AttributeLogicalName("owningteam")]
		public Guid? OwningTeam
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owningteam");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningteam"))
				    value = (EntityReference) backupAttributeCollection["owningteam"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningTeam");
                if (value != null)
				    SetAttributeValue("owningteam", new EntityReference("team", value.Value));
                else
					SetAttributeValue("owningteam", value);
				OnPropertyChanged("OwningTeam");
			}
		}

        public string OwningTeamName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owningteam");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningteam"))
				    value = (EntityReference) backupAttributeCollection["owningteam"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_name", "team", "teamid", "owningteam")]
        public IDictionary<int, string> OwningTeamLabels { get; set; }

        /// <summary>
        ///  
		/// 'OwningUser'.<br />
        /// Unique identifier for the user that owns the record.
        /// </summary>
		[AttributeLogicalName("owninguser")]
		public Guid? OwningUser
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owninguser");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owninguser"))
				    value = (EntityReference) backupAttributeCollection["owninguser"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningUser");
                if (value != null)
				    SetAttributeValue("owninguser", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("owninguser", value);
				OnPropertyChanged("OwningUser");
			}
		}

        public string OwningUserName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owninguser");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owninguser"))
				    value = (EntityReference) backupAttributeCollection["owninguser"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_fullname", "systemuser", "systemuserid", "owninguser")]
        public IDictionary<int, string> OwningUserLabels { get; set; }

        /// <summary>
        ///  
		/// 'statecode'.<br />
        /// Status of the Purchase Order Product
        /// </summary>
		[AttributeLogicalName("statecode")]
		public statecodeEnum? statecode
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("statecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("statecode"))
				    value = (OptionSetValue) backupAttributeCollection["statecode"];
                return value == null ? (statecodeEnum?) null : (statecodeEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("statecode");
                if (value != null)
				    SetAttributeValue("statecode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("statecode", value);
				OnPropertyChanged("statecode");
			}
		}

        public IDictionary<int, string> statecodeLabels
        {
		    get
		    {
                var value = GetAttributeValue<OptionSetValue>("statecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("statecode"))
				    value = (OptionSetValue) backupAttributeCollection["statecode"];
                if (value == null)
                    return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("statecode", value.Value, 1033) },
                        };
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'statuscode'.<br />
        /// Reason for the status of the Purchase Order Product
        /// </summary>
		[AttributeLogicalName("statuscode")]
		public statuscodeEnum? statuscode
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("statuscode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("statuscode"))
				    value = (OptionSetValue) backupAttributeCollection["statuscode"];
                return value == null ? (statuscodeEnum?) null : (statuscodeEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("statuscode");
                if (value != null)
				    SetAttributeValue("statuscode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("statuscode", value);
				OnPropertyChanged("statuscode");
			}
		}

        public IDictionary<int, string> statuscodeLabels
        {
		    get
		    {
                var value = GetAttributeValue<OptionSetValue>("statuscode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("statuscode"))
				    value = (OptionSetValue) backupAttributeCollection["statuscode"];
                if (value == null)
                    return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("statuscode", value.Value, 1033) },
                        };
            }
            set
            {}
        }

        /// <summary>
        /// [Range(-1, 2147483647)] 
		/// 'TimeZoneRuleVersionNumber'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("timezoneruleversionnumber"), InRange("-1", "2147483647", typeof(int))]
		public int? TimeZoneRuleVersionNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("timezoneruleversionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("timezoneruleversionnumber"))
				    value = (int?) backupAttributeCollection["timezoneruleversionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("TimeZoneRuleVersionNumber");
					SetAttributeValue("timezoneruleversionnumber", value);
				OnPropertyChanged("TimeZoneRuleVersionNumber");
			}
		}

        /// <summary>
        /// [Required] 
		/// 'TransactionCurrencyId'.<br />
        /// Unique identifier of the currency associated with the entity.
        /// </summary>
		[AttributeLogicalName("transactioncurrencyid"), Required]
		public Guid? TransactionCurrencyId
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("transactioncurrencyid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("transactioncurrencyid"))
				    value = (EntityReference) backupAttributeCollection["transactioncurrencyid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("TransactionCurrencyId");
                if (value != null)
				    SetAttributeValue("transactioncurrencyid", new EntityReference("transactioncurrency", value.Value));
                else
					SetAttributeValue("transactioncurrencyid", value);
				OnPropertyChanged("TransactionCurrencyId");
			}
		}

        public string TransactionCurrencyIdName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("transactioncurrencyid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("transactioncurrencyid"))
				    value = (EntityReference) backupAttributeCollection["transactioncurrencyid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_currencyname", "transactioncurrency", "transactioncurrencyid", "transactioncurrencyid")]
        public IDictionary<int, string> TransactionCurrencyIdLabels { get; set; }

        /// <summary>
        /// [Range(-1, 2147483647)] 
		/// 'UTCConversionTimeZoneCode'.<br />
        /// Shows the time zone code that was in use when the record was created.
        /// </summary>
		[AttributeLogicalName("utcconversiontimezonecode"), InRange("-1", "2147483647", typeof(int))]
		public int? UTCConversionTimeZoneCode
		{
			get
			{
				var value = GetAttributeValue<int?>("utcconversiontimezonecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("utcconversiontimezonecode"))
				    value = (int?) backupAttributeCollection["utcconversiontimezonecode"];
			    return value;
			}
			set
			{
				OnPropertyChanging("UTCConversionTimeZoneCode");
					SetAttributeValue("utcconversiontimezonecode", value);
				OnPropertyChanged("UTCConversionTimeZoneCode");
			}
		}

        /// <summary>
        ///  
		/// 'VersionNumber'.<br />
        /// Version Number
        /// </summary>
		[AttributeLogicalName("versionnumber")]
		public long? VersionNumber
		{
			get
			{
				var value = GetAttributeValue<long?>("versionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("versionnumber"))
				    value = (long?) backupAttributeCollection["versionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("VersionNumber");
					SetAttributeValue("versionnumber", value);
				OnPropertyChanged("VersionNumber");
			}
		}

		#endregion

		#region Relationships

		
		public static class RelationNames {
		}


		protected override IDictionary<string, object[]> RelationProperties { get {
			if (relationProperties != null) return relationProperties;
			relationProperties = new Dictionary<string, object[]>();
			return relationProperties; } }


		#endregion

		/// <summary>
		/// Constructor for populating via LINQ queries given a LINQ anonymous type
		/// <param name="anonymousType">LINQ anonymous type.</param>
		/// </summary>
		public msdyn_purchaseorderproduct(object anonymousType) : 
				this()
		{
            foreach (var p in anonymousType.GetType().GetProperties())
            {
                var value = p.GetValue(anonymousType, null);
                if (p.PropertyType == typeof(System.Guid))
                {
                    // Type is Guid, must be Id
                    base.Id = (System.Guid)value;
                    Attributes["msdyn_purchaseorderproductid"] = base.Id;
               }
                else if (p.Name == "FormattedValues")
                {
                    // Add Support for FormattedValues
                    FormattedValues.AddRange((FormattedValueCollection)value);
                }
                else
                {
                    Attributes[p.Name.ToLower()] = value;
                }
            }
		}


		#region Label/value pairs

		#region msdyn_IsOrdered

		public enum msdyn_IsOrderedEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region msdyn_ItemStatus

		public enum msdyn_ItemStatusEnum
		{
			[EnumMember]Pending = 690970000,
			[EnumMember]Received = 690970001,
			[EnumMember]Canceled = 690970002,
		}

		#endregion
	
		#region statecode

		public enum statecodeEnum
		{
			[EnumMember]Active = 0,
			[EnumMember]Inactive = 1,
		}

		#endregion
	
		#region statuscode

		public enum statuscodeEnum
		{
			[EnumMember]Active = 1,
			[EnumMember]Inactive = 2,
		}

		#endregion
	
		#endregion


		#region Metadata


		#region Enums

		public static class Enums
		{
			/// <summary>
			/// Gets the label corresponding to the option-set's value using its logical name,
			/// the value within, and the language code.
			/// </summary>
			/// <param name="logicalName">The logical name of the option-set in CRM</param>
			/// <param name="constant">The value from the option-set</param>
			/// <param name="languageCode">The language code from CRM</param>
			/// <returns></returns>
			public static string GetLabel(string logicalName, int constant, int languageCode = 1033)
			{
				return GeneratorHelpers.GetLabel(logicalName, constant, typeof(Enums), languageCode);
			}
			/// <summary>
			/// Gets the value corresponding to the option-set's label using its logical name,
			/// the value within, and the language code.
			/// </summary>
			/// <param name="logicalName">The logical name of the option-set in CRM</param>
			/// <param name="label">The label from the option-set</param>
			/// <param name="languageCode">The language code from CRM</param>
			/// <returns>The value corresponding to the label</returns>
			public static int GetValue(string logicalName, string label, int languageCode = 1033)
			{
				return GeneratorHelpers.GetValue(logicalName, label, typeof(Enums), languageCode);
			}

			#region Logical names

			public static class Names
			{
				public const string msdyn_IsOrdered = "msdyn_isordered";
				public const string msdyn_ItemStatus = "msdyn_itemstatus";
				public const string statecode = "statecode";
				public const string statuscode = "statuscode";
			}

			#endregion

			#region Labels

			public static class Labels
			{
				public static class msdyn_IsOrdered 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(msdyn_IsOrdered), label, languageCode);
					}
				}

				public static class msdyn_ItemStatus 
				{
					public const string Pending_1033 = "Pending";
					public const string Received_1033 = "Received";
					public const string Canceled_1033 = "Canceled";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(msdyn_ItemStatus), label, languageCode);
					}
				}

				public static class statecode 
				{
					public const string Active_1033 = "Active";
					public const string Inactive_1033 = "Inactive";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(statecode), label, languageCode);
					}
				}

				public static class statuscode 
				{
					public const string Active_1033 = "Active";
					public const string Inactive_1033 = "Inactive";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(statuscode), label, languageCode);
					}
				}

			}

			#endregion
		}

		#endregion

		#region Fields

		public static class Fields
		{
			#region Logical names

			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ExchangeRate = "exchangerate";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_AssociateToBooking = "msdyn_associatetobooking";
			public const string msdyn_AssociateToWarehouse = "msdyn_associatetowarehouse";
			public const string msdyn_AssociateToWorkOrder = "msdyn_associatetoworkorder";
			public const string msdyn_DateExpected = "msdyn_dateexpected";
			public const string msdyn_Description = "msdyn_description";
			public const string msdyn_InternalFlags = "msdyn_internalflags";
			public const string msdyn_IsOrdered = "msdyn_isordered";
			public const string msdyn_ItemStatus = "msdyn_itemstatus";
			public const string msdyn_LineOrder = "msdyn_lineorder";
			public const string msdyn_name = "msdyn_name";
			public const string msdyn_Product = "msdyn_product";
			public const string msdyn_PurchaseOrder = "msdyn_purchaseorder";
			public const string msdyn_purchaseorderproductId = "msdyn_purchaseorderproductid";
			public const string msdyn_QtyBilled = "msdyn_qtybilled";
			public const string msdyn_QtyReceived = "msdyn_qtyreceived";
			public const string msdyn_Quantity = "msdyn_quantity";
			public const string msdyn_TotalCost = "msdyn_totalcost";
			public const string msdyn_totalcost_Base = "msdyn_totalcost_base";
			public const string msdyn_Unit = "msdyn_unit";
			public const string msdyn_UnitCost = "msdyn_unitcost";
			public const string msdyn_unitcost_Base = "msdyn_unitcost_base";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";

			#endregion

			#region Schema names

			public static class Schema
			{
				public const string CreatedBy = "CreatedBy";
				public const string CreatedOn = "CreatedOn";
				public const string CreatedOnBehalfBy = "CreatedOnBehalfBy";
				public const string ExchangeRate = "ExchangeRate";
				public const string ImportSequenceNumber = "ImportSequenceNumber";
				public const string ModifiedBy = "ModifiedBy";
				public const string ModifiedOn = "ModifiedOn";
				public const string ModifiedOnBehalfBy = "ModifiedOnBehalfBy";
				public const string msdyn_AssociateToBooking = "msdyn_AssociateToBooking";
				public const string msdyn_AssociateToWarehouse = "msdyn_AssociateToWarehouse";
				public const string msdyn_AssociateToWorkOrder = "msdyn_AssociateToWorkOrder";
				public const string msdyn_DateExpected = "msdyn_DateExpected";
				public const string msdyn_Description = "msdyn_Description";
				public const string msdyn_InternalFlags = "msdyn_InternalFlags";
				public const string msdyn_IsOrdered = "msdyn_IsOrdered";
				public const string msdyn_ItemStatus = "msdyn_ItemStatus";
				public const string msdyn_LineOrder = "msdyn_LineOrder";
				public const string msdyn_name = "msdyn_name";
				public const string msdyn_Product = "msdyn_Product";
				public const string msdyn_PurchaseOrder = "msdyn_PurchaseOrder";
				public const string msdyn_purchaseorderproductId = "msdyn_purchaseorderproductId";
				public const string msdyn_QtyBilled = "msdyn_QtyBilled";
				public const string msdyn_QtyReceived = "msdyn_QtyReceived";
				public const string msdyn_Quantity = "msdyn_Quantity";
				public const string msdyn_TotalCost = "msdyn_TotalCost";
				public const string msdyn_totalcost_Base = "msdyn_totalcost_Base";
				public const string msdyn_Unit = "msdyn_Unit";
				public const string msdyn_UnitCost = "msdyn_UnitCost";
				public const string msdyn_unitcost_Base = "msdyn_unitcost_Base";
				public const string OverriddenCreatedOn = "OverriddenCreatedOn";
				public const string OwnerId = "OwnerId";
				public const string OwningBusinessUnit = "OwningBusinessUnit";
				public const string OwningTeam = "OwningTeam";
				public const string OwningUser = "OwningUser";
				public const string statecode = "statecode";
				public const string statuscode = "statuscode";
				public const string TimeZoneRuleVersionNumber = "TimeZoneRuleVersionNumber";
				public const string TransactionCurrencyId = "TransactionCurrencyId";
				public const string UTCConversionTimeZoneCode = "UTCConversionTimeZoneCode";
				public const string VersionNumber = "VersionNumber";
			}

			#endregion

			#region Labels

			public static class Labels
			{
				public static class CreatedBy
				{
					public const string _1033 = "Created By";
				}

				public static class CreatedOn
				{
					public const string _1033 = "Created On";
				}

				public static class CreatedOnBehalfBy
				{
					public const string _1033 = "Created By (Delegate)";
				}

				public static class ExchangeRate
				{
					public const string _1033 = "Exchange Rate";
				}

				public static class ImportSequenceNumber
				{
					public const string _1033 = "Import Sequence Number";
				}

				public static class ModifiedBy
				{
					public const string _1033 = "Modified By";
				}

				public static class ModifiedOn
				{
					public const string _1033 = "Modified On";
				}

				public static class ModifiedOnBehalfBy
				{
					public const string _1033 = "Modified By (Delegate)";
				}

				public static class msdyn_AssociateToBooking
				{
					public const string _1033 = "Associate To Booking";
				}

				public static class msdyn_AssociateToWarehouse
				{
					public const string _1033 = "Associate To Warehouse";
				}

				public static class msdyn_AssociateToWorkOrder
				{
					public const string _1033 = "Associate To Work Order";
				}

				public static class msdyn_DateExpected
				{
					public const string _1033 = "Date Expected";
				}

				public static class msdyn_Description
				{
					public const string _1033 = "Description";
				}

				public static class msdyn_InternalFlags
				{
					public const string _1033 = "Internal Flags";
				}

				public static class msdyn_IsOrdered
				{
					public const string _1033 = "Is Ordered";
				}

				public static class msdyn_ItemStatus
				{
					public const string _1033 = "Item Status";
				}

				public static class msdyn_LineOrder
				{
					public const string _1033 = "Line Order";
				}

				public static class msdyn_name
				{
					public const string _1033 = "Name";
				}

				public static class msdyn_Product
				{
					public const string _1033 = "Product";
				}

				public static class msdyn_PurchaseOrder
				{
					public const string _1033 = "Purchase Order";
				}

				public static class msdyn_purchaseorderproductId
				{
					public const string _1033 = "Purchase Order Product";
				}

				public static class msdyn_QtyBilled
				{
					public const string _1033 = "Quantity Billed";
				}

				public static class msdyn_QtyReceived
				{
					public const string _1033 = "Quantity Received";
				}

				public static class msdyn_Quantity
				{
					public const string _1033 = "Quantity";
				}

				public static class msdyn_TotalCost
				{
					public const string _1033 = "Total Cost";
				}

				public static class msdyn_totalcost_Base
				{
					public const string _1033 = "Total Cost (Base)";
				}

				public static class msdyn_Unit
				{
					public const string _1033 = "Unit";
				}

				public static class msdyn_UnitCost
				{
					public const string _1033 = "Unit Cost";
				}

				public static class msdyn_unitcost_Base
				{
					public const string _1033 = "Unit Cost (Base)";
				}

				public static class OverriddenCreatedOn
				{
					public const string _1033 = "Record Created On";
				}

				public static class OwnerId
				{
					public const string _1033 = "Owner";
				}

				public static class OwningBusinessUnit
				{
					public const string _1033 = "Owning Business Unit";
				}

				public static class OwningTeam
				{
					public const string _1033 = "Owning Team";
				}

				public static class OwningUser
				{
					public const string _1033 = "Owning User";
				}

				public static class statecode
				{
					public const string _1033 = "Status";
				}

				public static class statuscode
				{
					public const string _1033 = "Status Reason";
				}

				public static class TimeZoneRuleVersionNumber
				{
					public const string _1033 = "Time Zone Rule Version Number";
				}

				public static class TransactionCurrencyId
				{
					public const string _1033 = "Currency";
				}

				public static class UTCConversionTimeZoneCode
				{
					public const string _1033 = "UTC Conversion Time Zone Code";
				}

				public static class VersionNumber
				{
					public const string _1033 = "Version Number";
				}

			}

			#endregion
		}

		#endregion

		#region Relations

		public static class Relations
		{
			public static class OneToN
			{
			}
			
			public static class NToOne
			{

				public static class Lookups
				{
				}
			}

			public static class NToN
			{

			}
		}

		#endregion

		#endregion
	}

	#endregion

	#region msdyn_resourcerequirementdetail

	/// <summary>
	/// 'msdyn_resourcerequirementdetail'.<br />
	/// Entity used to track the detailed information about resource requirements.
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract, EntityLogicalName("msdyn_resourcerequirementdetail")]
	public partial class msdyn_resourcerequirementdetail : GeneratedEntity<msdyn_resourcerequirementdetail.RelationName>
	{
		
		public msdyn_resourcerequirementdetail() : 
				base(EntityLogicalName)
		{
		}
		
		public const string DisplayName = "Resource Requirement Detail";
		public const string SchemaName = "msdyn_resourcerequirementdetail";
		public const string EntityLogicalName = "msdyn_resourcerequirementdetail";
		public const int EntityTypeCode = 10022;
		
		public class RelationName : RelationNameBase
		{
			public RelationName(string name) : base(name)
			{}
		}


		#region Attributes

		[AttributeLogicalName("msdyn_resourcerequirementdetailid"), DataMember]
		public override System.Guid Id
		{
			get
			{
				return (msdyn_resourcerequirementdetailId == null || msdyn_resourcerequirementdetailId == Guid.Empty) ? base.Id : msdyn_resourcerequirementdetailId.GetValueOrDefault();
			}
			
			set
			{
                if (value == Guid.Empty) {
                    Attributes.Remove("msdyn_resourcerequirementdetailid");
                    base.Id = value;
                } else {
				    msdyn_resourcerequirementdetailId = value;
                }
			}
		}

        /// <summary>
        ///  
		/// 'CreatedBy'.<br />
        /// Unique identifier of the user who created the record.
        /// </summary>
		[AttributeLogicalName("createdby")]
		public Guid? CreatedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdby"))
				    value = (EntityReference) backupAttributeCollection["createdby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("CreatedBy");
                if (value != null)
				    SetAttributeValue("createdby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("createdby", value);
				OnPropertyChanged("CreatedBy");
			}
		}

        public string CreatedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdby"))
				    value = (EntityReference) backupAttributeCollection["createdby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_fullname", "systemuser", "systemuserid", "createdby")]
        public IDictionary<int, string> CreatedByLabels { get; set; }

        /// <summary>
        ///  
		/// 'CreatedOn'.<br />
        /// Date and time when the record was created.
        /// </summary>
		[AttributeLogicalName("createdon")]
		public DateTime? CreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("createdon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdon"))
				    value = (DateTime?) backupAttributeCollection["createdon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("CreatedOn");
					SetAttributeValue("createdon", value);
				OnPropertyChanged("CreatedOn");
			}
		}

        /// <summary>
        ///  
		/// 'CreatedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who created the record.
        /// </summary>
		[AttributeLogicalName("createdonbehalfby")]
		public Guid? CreatedOnBehalfBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["createdonbehalfby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("CreatedOnBehalfBy");
                if (value != null)
				    SetAttributeValue("createdonbehalfby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("createdonbehalfby", value);
				OnPropertyChanged("CreatedOnBehalfBy");
			}
		}

        public string CreatedOnBehalfByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["createdonbehalfby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_fullname", "systemuser", "systemuserid", "createdonbehalfby")]
        public IDictionary<int, string> CreatedOnBehalfByLabels { get; set; }

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'ImportSequenceNumber'.<br />
        /// Sequence number of the import that created this record.
        /// </summary>
		[AttributeLogicalName("importsequencenumber"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? ImportSequenceNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("importsequencenumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("importsequencenumber"))
				    value = (int?) backupAttributeCollection["importsequencenumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ImportSequenceNumber");
					SetAttributeValue("importsequencenumber", value);
				OnPropertyChanged("ImportSequenceNumber");
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedBy'.<br />
        /// Unique identifier of the user who modified the record.
        /// </summary>
		[AttributeLogicalName("modifiedby")]
		public Guid? ModifiedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedby"))
				    value = (EntityReference) backupAttributeCollection["modifiedby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ModifiedBy");
                if (value != null)
				    SetAttributeValue("modifiedby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("modifiedby", value);
				OnPropertyChanged("ModifiedBy");
			}
		}

        public string ModifiedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedby"))
				    value = (EntityReference) backupAttributeCollection["modifiedby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_fullname", "systemuser", "systemuserid", "modifiedby")]
        public IDictionary<int, string> ModifiedByLabels { get; set; }

        /// <summary>
        ///  
		/// 'ModifiedOn'.<br />
        /// Date and time when the record was modified.
        /// </summary>
		[AttributeLogicalName("modifiedon")]
		public DateTime? ModifiedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("modifiedon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedon"))
				    value = (DateTime?) backupAttributeCollection["modifiedon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ModifiedOn");
					SetAttributeValue("modifiedon", value);
				OnPropertyChanged("ModifiedOn");
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who modified the record.
        /// </summary>
		[AttributeLogicalName("modifiedonbehalfby")]
		public Guid? ModifiedOnBehalfBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["modifiedonbehalfby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ModifiedOnBehalfBy");
                if (value != null)
				    SetAttributeValue("modifiedonbehalfby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("modifiedonbehalfby", value);
				OnPropertyChanged("ModifiedOnBehalfBy");
			}
		}

        public string ModifiedOnBehalfByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["modifiedonbehalfby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_fullname", "systemuser", "systemuserid", "modifiedonbehalfby")]
        public IDictionary<int, string> ModifiedOnBehalfByLabels { get; set; }

        /// <summary>
        /// [Range(0, 2147483647)] 
		/// 'msdyn_duration'.<br />
        /// Shows the time duration for which the resource is required to persist in minutes.
        /// </summary>
		[AttributeLogicalName("msdyn_duration"), InRange("0", "2147483647", typeof(int))]
		public int? msdyn_duration
		{
			get
			{
				var value = GetAttributeValue<int?>("msdyn_duration");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("msdyn_duration"))
				    value = (int?) backupAttributeCollection["msdyn_duration"];
			    return value;
			}
			set
			{
				OnPropertyChanging("msdyn_duration");
					SetAttributeValue("msdyn_duration", value);
				OnPropertyChanged("msdyn_duration");
			}
		}

        /// <summary>
        /// [Required] 
		/// 'msdyn_from'.<br />
        /// Enter the date and time from which a contiguous piece of time duration is required
        /// </summary>
		[AttributeLogicalName("msdyn_from"), Required]
		public DateTime? msdyn_from
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("msdyn_from");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("msdyn_from"))
				    value = (DateTime?) backupAttributeCollection["msdyn_from"];
			    return value;
			}
			set
			{
				OnPropertyChanging("msdyn_from");
					SetAttributeValue("msdyn_from", value);
				OnPropertyChanged("msdyn_from");
			}
		}

        /// <summary>
        /// [Range(-100000000000, 100000000000)] 
		/// 'msdyn_hours'.<br />
        /// Enter the number of hours for which a resource is required.
        /// </summary>
		[AttributeLogicalName("msdyn_hours"), InRange("-100000000000", "100000000000", typeof(decimal))]
		public decimal? msdyn_hours
		{
			get
			{
				var value = GetAttributeValue<decimal?>("msdyn_hours");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("msdyn_hours"))
				    value = (decimal?) backupAttributeCollection["msdyn_hours"];
			    return value;
			}
			set
			{
				OnPropertyChanging("msdyn_hours");
					SetAttributeValue("msdyn_hours", value);
				OnPropertyChanged("msdyn_hours");
			}
		}

        /// <summary>
        /// [Required][MaximumLength=100] 
		/// 'msdyn_name'.<br />
        /// The name of the custom entity.
        /// </summary>
		[AttributeLogicalName("msdyn_name"), Required, MaxLength(100)]
		public string msdyn_name
		{
			get
			{
				var value = GetAttributeValue<string>("msdyn_name");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("msdyn_name"))
				    value = (string) backupAttributeCollection["msdyn_name"];
			    return value;
			}
			set
			{
				OnPropertyChanging("msdyn_name");
					SetAttributeValue("msdyn_name", value);
				OnPropertyChanged("msdyn_name");
			}
		}

        /// <summary>
        ///  
		/// 'msdyn_resourcerequirementdetailId'.<br />
        /// Unique identifier for entity instances
        /// </summary>
		[AttributeLogicalName("msdyn_resourcerequirementdetailid")]
		public Guid? msdyn_resourcerequirementdetailId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("msdyn_resourcerequirementdetailid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("msdyn_resourcerequirementdetailid"))
				    value = (Guid?) backupAttributeCollection["msdyn_resourcerequirementdetailid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("msdyn_resourcerequirementdetailId");
                if (value != null)
					SetAttributeValue("msdyn_resourcerequirementdetailid", value);
				if (value != null)
					base.Id = value.Value;
				else
					Id = System.Guid.Empty;
				OnPropertyChanged("msdyn_resourcerequirementdetailId");
			}
		}

        /// <summary>
        /// [Required] 
		/// 'msdyn_resourcerequirementid'.<br />
        /// Unique identifier of the resource requirement for the resource requirement detail.
        /// </summary>
		[AttributeLogicalName("msdyn_resourcerequirementid"), Required]
		public Guid? msdyn_resourcerequirementid
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("msdyn_resourcerequirementid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("msdyn_resourcerequirementid"))
				    value = (EntityReference) backupAttributeCollection["msdyn_resourcerequirementid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("msdyn_resourcerequirementid");
                if (value != null)
				    SetAttributeValue("msdyn_resourcerequirementid", new EntityReference("msdyn_resourcerequirement", value.Value));
                else
					SetAttributeValue("msdyn_resourcerequirementid", value);
				OnPropertyChanged("msdyn_resourcerequirementid");
			}
		}

        public string msdyn_resourcerequirementidName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("msdyn_resourcerequirementid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("msdyn_resourcerequirementid"))
				    value = (EntityReference) backupAttributeCollection["msdyn_resourcerequirementid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_msdyn_name", "msdyn_resourcerequirement", "msdyn_resourcerequirementid", "msdyn_resourcerequirementid")]
        public IDictionary<int, string> msdyn_resourcerequirementidLabels { get; set; }

        /// <summary>
        /// [Required] 
		/// 'msdyn_to'.<br />
        /// The end of requirement detail
        /// </summary>
		[AttributeLogicalName("msdyn_to"), Required]
		public DateTime? msdyn_to
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("msdyn_to");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("msdyn_to"))
				    value = (DateTime?) backupAttributeCollection["msdyn_to"];
			    return value;
			}
			set
			{
				OnPropertyChanging("msdyn_to");
					SetAttributeValue("msdyn_to", value);
				OnPropertyChanged("msdyn_to");
			}
		}

        /// <summary>
        ///  
		/// 'OverriddenCreatedOn'.<br />
        /// Date and time that the record was migrated.
        /// </summary>
		[AttributeLogicalName("overriddencreatedon")]
		public DateTime? OverriddenCreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("overriddencreatedon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("overriddencreatedon"))
				    value = (DateTime?) backupAttributeCollection["overriddencreatedon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("OverriddenCreatedOn");
					SetAttributeValue("overriddencreatedon", value);
				OnPropertyChanged("OverriddenCreatedOn");
			}
		}

        /// <summary>
        ///  
		/// 'OwnerId'.<br />
        /// Owner Id
        /// </summary>
		[AttributeLogicalName("ownerid")]
		public EntityReference OwnerId
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ownerid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ownerid"))
				    value = (EntityReference) backupAttributeCollection["ownerid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("OwnerId");
					SetAttributeValue("ownerid", value);
				OnPropertyChanged("OwnerId");
			}
		}

        public string OwnerIdName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ownerid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ownerid"))
				    value = (EntityReference) backupAttributeCollection["ownerid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        public IDictionary<int, string> OwnerIdLabels { get; set; }

        /// <summary>
        ///  
		/// 'OwningBusinessUnit'.<br />
        /// Unique identifier for the business unit that owns the record
        /// </summary>
		[AttributeLogicalName("owningbusinessunit")]
		public Guid? OwningBusinessUnit
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owningbusinessunit");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningbusinessunit"))
				    value = (EntityReference) backupAttributeCollection["owningbusinessunit"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningBusinessUnit");
                if (value != null)
				    SetAttributeValue("owningbusinessunit", new EntityReference("businessunit", value.Value));
                else
					SetAttributeValue("owningbusinessunit", value);
				OnPropertyChanged("OwningBusinessUnit");
			}
		}

        public string OwningBusinessUnitName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owningbusinessunit");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningbusinessunit"))
				    value = (EntityReference) backupAttributeCollection["owningbusinessunit"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_name", "businessunit", "businessunitid", "owningbusinessunit")]
        public IDictionary<int, string> OwningBusinessUnitLabels { get; set; }

        /// <summary>
        ///  
		/// 'OwningTeam'.<br />
        /// Unique identifier for the team that owns the record.
        /// </summary>
		[AttributeLogicalName("owningteam")]
		public Guid? OwningTeam
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owningteam");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningteam"))
				    value = (EntityReference) backupAttributeCollection["owningteam"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningTeam");
                if (value != null)
				    SetAttributeValue("owningteam", new EntityReference("team", value.Value));
                else
					SetAttributeValue("owningteam", value);
				OnPropertyChanged("OwningTeam");
			}
		}

        public string OwningTeamName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owningteam");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningteam"))
				    value = (EntityReference) backupAttributeCollection["owningteam"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_name", "team", "teamid", "owningteam")]
        public IDictionary<int, string> OwningTeamLabels { get; set; }

        /// <summary>
        ///  
		/// 'OwningUser'.<br />
        /// Unique identifier for the user that owns the record.
        /// </summary>
		[AttributeLogicalName("owninguser")]
		public Guid? OwningUser
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owninguser");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owninguser"))
				    value = (EntityReference) backupAttributeCollection["owninguser"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningUser");
                if (value != null)
				    SetAttributeValue("owninguser", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("owninguser", value);
				OnPropertyChanged("OwningUser");
			}
		}

        public string OwningUserName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owninguser");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owninguser"))
				    value = (EntityReference) backupAttributeCollection["owninguser"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_fullname", "systemuser", "systemuserid", "owninguser")]
        public IDictionary<int, string> OwningUserLabels { get; set; }

        /// <summary>
        ///  
		/// 'statecode'.<br />
        /// Status of the Resource Requirement Detail
        /// </summary>
		[AttributeLogicalName("statecode")]
		public statecodeEnum? statecode
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("statecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("statecode"))
				    value = (OptionSetValue) backupAttributeCollection["statecode"];
                return value == null ? (statecodeEnum?) null : (statecodeEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("statecode");
                if (value != null)
				    SetAttributeValue("statecode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("statecode", value);
				OnPropertyChanged("statecode");
			}
		}

        public IDictionary<int, string> statecodeLabels
        {
		    get
		    {
                var value = GetAttributeValue<OptionSetValue>("statecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("statecode"))
				    value = (OptionSetValue) backupAttributeCollection["statecode"];
                if (value == null)
                    return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("statecode", value.Value, 1033) },
                        };
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'statuscode'.<br />
        /// Reason for the status of the Resource Requirement Detail
        /// </summary>
		[AttributeLogicalName("statuscode")]
		public statuscodeEnum? statuscode
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("statuscode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("statuscode"))
				    value = (OptionSetValue) backupAttributeCollection["statuscode"];
                return value == null ? (statuscodeEnum?) null : (statuscodeEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("statuscode");
                if (value != null)
				    SetAttributeValue("statuscode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("statuscode", value);
				OnPropertyChanged("statuscode");
			}
		}

        public IDictionary<int, string> statuscodeLabels
        {
		    get
		    {
                var value = GetAttributeValue<OptionSetValue>("statuscode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("statuscode"))
				    value = (OptionSetValue) backupAttributeCollection["statuscode"];
                if (value == null)
                    return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("statuscode", value.Value, 1033) },
                        };
            }
            set
            {}
        }

        /// <summary>
        /// [Range(-1, 2147483647)] 
		/// 'TimeZoneRuleVersionNumber'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("timezoneruleversionnumber"), InRange("-1", "2147483647", typeof(int))]
		public int? TimeZoneRuleVersionNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("timezoneruleversionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("timezoneruleversionnumber"))
				    value = (int?) backupAttributeCollection["timezoneruleversionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("TimeZoneRuleVersionNumber");
					SetAttributeValue("timezoneruleversionnumber", value);
				OnPropertyChanged("TimeZoneRuleVersionNumber");
			}
		}

        /// <summary>
        /// [Range(-1, 2147483647)] 
		/// 'UTCConversionTimeZoneCode'.<br />
        /// Time zone code that was in use when the record was created.
        /// </summary>
		[AttributeLogicalName("utcconversiontimezonecode"), InRange("-1", "2147483647", typeof(int))]
		public int? UTCConversionTimeZoneCode
		{
			get
			{
				var value = GetAttributeValue<int?>("utcconversiontimezonecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("utcconversiontimezonecode"))
				    value = (int?) backupAttributeCollection["utcconversiontimezonecode"];
			    return value;
			}
			set
			{
				OnPropertyChanging("UTCConversionTimeZoneCode");
					SetAttributeValue("utcconversiontimezonecode", value);
				OnPropertyChanged("UTCConversionTimeZoneCode");
			}
		}

        /// <summary>
        ///  
		/// 'VersionNumber'.<br />
        /// Version Number
        /// </summary>
		[AttributeLogicalName("versionnumber")]
		public long? VersionNumber
		{
			get
			{
				var value = GetAttributeValue<long?>("versionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("versionnumber"))
				    value = (long?) backupAttributeCollection["versionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("VersionNumber");
					SetAttributeValue("versionnumber", value);
				OnPropertyChanged("VersionNumber");
			}
		}

		#endregion

		#region Relationships

		
		public static class RelationNames {
		}


		protected override IDictionary<string, object[]> RelationProperties { get {
			if (relationProperties != null) return relationProperties;
			relationProperties = new Dictionary<string, object[]>();
			return relationProperties; } }


		#endregion

		/// <summary>
		/// Constructor for populating via LINQ queries given a LINQ anonymous type
		/// <param name="anonymousType">LINQ anonymous type.</param>
		/// </summary>
		public msdyn_resourcerequirementdetail(object anonymousType) : 
				this()
		{
            foreach (var p in anonymousType.GetType().GetProperties())
            {
                var value = p.GetValue(anonymousType, null);
                if (p.PropertyType == typeof(System.Guid))
                {
                    // Type is Guid, must be Id
                    base.Id = (System.Guid)value;
                    Attributes["msdyn_resourcerequirementdetailid"] = base.Id;
               }
                else if (p.Name == "FormattedValues")
                {
                    // Add Support for FormattedValues
                    FormattedValues.AddRange((FormattedValueCollection)value);
                }
                else
                {
                    Attributes[p.Name.ToLower()] = value;
                }
            }
		}


		#region Label/value pairs

		#region statecode

		public enum statecodeEnum
		{
			[EnumMember]Active = 0,
			[EnumMember]Inactive = 1,
		}

		#endregion
	
		#region statuscode

		public enum statuscodeEnum
		{
			[EnumMember]Active = 1,
			[EnumMember]Inactive = 2,
		}

		#endregion
	
		#endregion


		#region Metadata


		#region Enums

		public static class Enums
		{
			/// <summary>
			/// Gets the label corresponding to the option-set's value using its logical name,
			/// the value within, and the language code.
			/// </summary>
			/// <param name="logicalName">The logical name of the option-set in CRM</param>
			/// <param name="constant">The value from the option-set</param>
			/// <param name="languageCode">The language code from CRM</param>
			/// <returns></returns>
			public static string GetLabel(string logicalName, int constant, int languageCode = 1033)
			{
				return GeneratorHelpers.GetLabel(logicalName, constant, typeof(Enums), languageCode);
			}
			/// <summary>
			/// Gets the value corresponding to the option-set's label using its logical name,
			/// the value within, and the language code.
			/// </summary>
			/// <param name="logicalName">The logical name of the option-set in CRM</param>
			/// <param name="label">The label from the option-set</param>
			/// <param name="languageCode">The language code from CRM</param>
			/// <returns>The value corresponding to the label</returns>
			public static int GetValue(string logicalName, string label, int languageCode = 1033)
			{
				return GeneratorHelpers.GetValue(logicalName, label, typeof(Enums), languageCode);
			}

			#region Logical names

			public static class Names
			{
				public const string statecode = "statecode";
				public const string statuscode = "statuscode";
			}

			#endregion

			#region Labels

			public static class Labels
			{
				public static class statecode 
				{
					public const string Active_1033 = "Active";
					public const string Inactive_1033 = "Inactive";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(statecode), label, languageCode);
					}
				}

				public static class statuscode 
				{
					public const string Active_1033 = "Active";
					public const string Inactive_1033 = "Inactive";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(statuscode), label, languageCode);
					}
				}

			}

			#endregion
		}

		#endregion

		#region Fields

		public static class Fields
		{
			#region Logical names

			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_duration = "msdyn_duration";
			public const string msdyn_from = "msdyn_from";
			public const string msdyn_hours = "msdyn_hours";
			public const string msdyn_name = "msdyn_name";
			public const string msdyn_resourcerequirementdetailId = "msdyn_resourcerequirementdetailid";
			public const string msdyn_resourcerequirementid = "msdyn_resourcerequirementid";
			public const string msdyn_to = "msdyn_to";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";

			#endregion

			#region Schema names

			public static class Schema
			{
				public const string CreatedBy = "CreatedBy";
				public const string CreatedOn = "CreatedOn";
				public const string CreatedOnBehalfBy = "CreatedOnBehalfBy";
				public const string ImportSequenceNumber = "ImportSequenceNumber";
				public const string ModifiedBy = "ModifiedBy";
				public const string ModifiedOn = "ModifiedOn";
				public const string ModifiedOnBehalfBy = "ModifiedOnBehalfBy";
				public const string msdyn_duration = "msdyn_duration";
				public const string msdyn_from = "msdyn_from";
				public const string msdyn_hours = "msdyn_hours";
				public const string msdyn_name = "msdyn_name";
				public const string msdyn_resourcerequirementdetailId = "msdyn_resourcerequirementdetailId";
				public const string msdyn_resourcerequirementid = "msdyn_resourcerequirementid";
				public const string msdyn_to = "msdyn_to";
				public const string OverriddenCreatedOn = "OverriddenCreatedOn";
				public const string OwnerId = "OwnerId";
				public const string OwningBusinessUnit = "OwningBusinessUnit";
				public const string OwningTeam = "OwningTeam";
				public const string OwningUser = "OwningUser";
				public const string statecode = "statecode";
				public const string statuscode = "statuscode";
				public const string TimeZoneRuleVersionNumber = "TimeZoneRuleVersionNumber";
				public const string UTCConversionTimeZoneCode = "UTCConversionTimeZoneCode";
				public const string VersionNumber = "VersionNumber";
			}

			#endregion

			#region Labels

			public static class Labels
			{
				public static class CreatedBy
				{
					public const string _1033 = "Created By";
				}

				public static class CreatedOn
				{
					public const string _1033 = "Created On";
				}

				public static class CreatedOnBehalfBy
				{
					public const string _1033 = "Created By (Delegate)";
				}

				public static class ImportSequenceNumber
				{
					public const string _1033 = "Import Sequence Number";
				}

				public static class ModifiedBy
				{
					public const string _1033 = "Modified By";
				}

				public static class ModifiedOn
				{
					public const string _1033 = "Modified On";
				}

				public static class ModifiedOnBehalfBy
				{
					public const string _1033 = "Modified By (Delegate)";
				}

				public static class msdyn_duration
				{
					public const string _1033 = "Duration";
				}

				public static class msdyn_from
				{
					public const string _1033 = "From";
				}

				public static class msdyn_hours
				{
					public const string _1033 = "Hours";
				}

				public static class msdyn_name
				{
					public const string _1033 = "Name";
				}

				public static class msdyn_resourcerequirementdetailId
				{
					public const string _1033 = "Resource Requirement Detail";
				}

				public static class msdyn_resourcerequirementid
				{
					public const string _1033 = "Resource Requirement";
				}

				public static class msdyn_to
				{
					public const string _1033 = "To";
				}

				public static class OverriddenCreatedOn
				{
					public const string _1033 = "Record Created On";
				}

				public static class OwnerId
				{
					public const string _1033 = "Owner";
				}

				public static class OwningBusinessUnit
				{
					public const string _1033 = "Owning Business Unit";
				}

				public static class OwningTeam
				{
					public const string _1033 = "Owning Team";
				}

				public static class OwningUser
				{
					public const string _1033 = "Owning User";
				}

				public static class statecode
				{
					public const string _1033 = "Status";
				}

				public static class statuscode
				{
					public const string _1033 = "Status Reason";
				}

				public static class TimeZoneRuleVersionNumber
				{
					public const string _1033 = "Time Zone Rule Version Number";
				}

				public static class UTCConversionTimeZoneCode
				{
					public const string _1033 = "UTC Conversion Time Zone Code";
				}

				public static class VersionNumber
				{
					public const string _1033 = "Version Number";
				}

			}

			#endregion
		}

		#endregion

		#region Relations

		public static class Relations
		{
			public static class OneToN
			{
			}
			
			public static class NToOne
			{

				public static class Lookups
				{
				}
			}

			public static class NToN
			{

			}
		}

		#endregion

		#endregion
	}

	#endregion

	#region Theme

	/// <summary>
	/// 'Theme'.<br />
	/// Information that's used to set custom visual theme options for client applications.
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract, EntityLogicalName("theme")]
	public partial class Theme : GeneratedEntity<Theme.RelationName>
	{
		
		public Theme() : 
				base(EntityLogicalName)
		{
		}
		
		public const string DisplayName = "Theme";
		public const string SchemaName = "Theme";
		public const string EntityLogicalName = "theme";
		public const int EntityTypeCode = 2015;
		
		public class RelationName : RelationNameBase
		{
			public RelationName(string name) : base(name)
			{}
		}


		#region Attributes

		[AttributeLogicalName("themeid"), DataMember]
		public override System.Guid Id
		{
			get
			{
				return (ThemeId == null || ThemeId == Guid.Empty) ? base.Id : ThemeId.GetValueOrDefault();
			}
			
			set
			{
                if (value == Guid.Empty) {
                    Attributes.Remove("themeid");
                    base.Id = value;
                } else {
				    ThemeId = value;
                }
			}
		}

        /// <summary>
        /// [MaximumLength=7] 
		/// 'AccentColor'.<br />
        /// Choose the Unified Interface secondary theme color to be used on the process control
        /// </summary>
		[AttributeLogicalName("accentcolor"), MaxLength(7)]
		public string AccentColor
		{
			get
			{
				var value = GetAttributeValue<string>("accentcolor");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("accentcolor"))
				    value = (string) backupAttributeCollection["accentcolor"];
			    return value;
			}
			set
			{
				OnPropertyChanging("AccentColor");
					SetAttributeValue("accentcolor", value);
				OnPropertyChanged("AccentColor");
			}
		}

        /// <summary>
        /// [MaximumLength=7] 
		/// 'BackgroundColor'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("backgroundcolor"), MaxLength(7)]
		public string BackgroundColor
		{
			get
			{
				var value = GetAttributeValue<string>("backgroundcolor");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("backgroundcolor"))
				    value = (string) backupAttributeCollection["backgroundcolor"];
			    return value;
			}
			set
			{
				OnPropertyChanging("BackgroundColor");
					SetAttributeValue("backgroundcolor", value);
				OnPropertyChanged("BackgroundColor");
			}
		}

        /// <summary>
        /// [MaximumLength=7] 
		/// 'ControlBorder'.<br />
        /// Choose the color that controls will use for borders
        /// </summary>
		[AttributeLogicalName("controlborder"), MaxLength(7)]
		public string ControlBorder
		{
			get
			{
				var value = GetAttributeValue<string>("controlborder");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("controlborder"))
				    value = (string) backupAttributeCollection["controlborder"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ControlBorder");
					SetAttributeValue("controlborder", value);
				OnPropertyChanged("ControlBorder");
			}
		}

        /// <summary>
        /// [MaximumLength=7] 
		/// 'ControlShade'.<br />
        /// Choose the background color for controls to use to indicate when you hover over items
        /// </summary>
		[AttributeLogicalName("controlshade"), MaxLength(7)]
		public string ControlShade
		{
			get
			{
				var value = GetAttributeValue<string>("controlshade");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("controlshade"))
				    value = (string) backupAttributeCollection["controlshade"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ControlShade");
					SetAttributeValue("controlshade", value);
				OnPropertyChanged("ControlShade");
			}
		}

        /// <summary>
        ///  
		/// 'CreatedBy'.<br />
        /// Unique identifier of the user who created the record.
        /// </summary>
		[AttributeLogicalName("createdby")]
		public Guid? CreatedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdby"))
				    value = (EntityReference) backupAttributeCollection["createdby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("CreatedBy");
                if (value != null)
				    SetAttributeValue("createdby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("createdby", value);
				OnPropertyChanged("CreatedBy");
			}
		}

        public string CreatedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdby"))
				    value = (EntityReference) backupAttributeCollection["createdby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_fullname", "systemuser", "systemuserid", "createdby")]
        public IDictionary<int, string> CreatedByLabels { get; set; }

        /// <summary>
        ///  
		/// 'CreatedOn'.<br />
        /// Date and time when the record was created.
        /// </summary>
		[AttributeLogicalName("createdon")]
		public DateTime? CreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("createdon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdon"))
				    value = (DateTime?) backupAttributeCollection["createdon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("CreatedOn");
					SetAttributeValue("createdon", value);
				OnPropertyChanged("CreatedOn");
			}
		}

        /// <summary>
        ///  
		/// 'CreatedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who created the record.
        /// </summary>
		[AttributeLogicalName("createdonbehalfby")]
		public Guid? CreatedOnBehalfBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["createdonbehalfby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("CreatedOnBehalfBy");
                if (value != null)
				    SetAttributeValue("createdonbehalfby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("createdonbehalfby", value);
				OnPropertyChanged("CreatedOnBehalfBy");
			}
		}

        public string CreatedOnBehalfByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["createdonbehalfby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_fullname", "systemuser", "systemuserid", "createdonbehalfby")]
        public IDictionary<int, string> CreatedOnBehalfByLabels { get; set; }

        /// <summary>
        /// [MaximumLength=7] 
		/// 'DefaultCustomEntityColor'.<br />
        /// Choose the default custom entity color if no color is assigned
        /// </summary>
		[AttributeLogicalName("defaultcustomentitycolor"), MaxLength(7)]
		public string DefaultCustomEntityColor
		{
			get
			{
				var value = GetAttributeValue<string>("defaultcustomentitycolor");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("defaultcustomentitycolor"))
				    value = (string) backupAttributeCollection["defaultcustomentitycolor"];
			    return value;
			}
			set
			{
				OnPropertyChanging("DefaultCustomEntityColor");
					SetAttributeValue("defaultcustomentitycolor", value);
				OnPropertyChanged("DefaultCustomEntityColor");
			}
		}

        /// <summary>
        /// [MaximumLength=7] 
		/// 'DefaultEntityColor'.<br />
        /// Choose the default color for system entities if no color is assigned
        /// </summary>
		[AttributeLogicalName("defaultentitycolor"), MaxLength(7)]
		public string DefaultEntityColor
		{
			get
			{
				var value = GetAttributeValue<string>("defaultentitycolor");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("defaultentitycolor"))
				    value = (string) backupAttributeCollection["defaultentitycolor"];
			    return value;
			}
			set
			{
				OnPropertyChanging("DefaultEntityColor");
					SetAttributeValue("defaultentitycolor", value);
				OnPropertyChanged("DefaultEntityColor");
			}
		}

        /// <summary>
        /// [Range(0.0000000001, 100000000000)] 
		/// 'ExchangeRate'.<br />
        /// Exchange rate for the currency associated with the Theme with respect to the base currency.
        /// </summary>
		[AttributeLogicalName("exchangerate"), InRange("0.0000000001", "100000000000", typeof(decimal))]
		public decimal? ExchangeRate
		{
			get
			{
				var value = GetAttributeValue<decimal?>("exchangerate");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("exchangerate"))
				    value = (decimal?) backupAttributeCollection["exchangerate"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ExchangeRate");
					SetAttributeValue("exchangerate", value);
				OnPropertyChanged("ExchangeRate");
			}
		}

        /// <summary>
        /// [MaximumLength=7] 
		/// 'GlobalLinkColor'.<br />
        /// Choose the color for all links, such as e-mail address and lookup links, and for all buttons that are in focus
        /// </summary>
		[AttributeLogicalName("globallinkcolor"), MaxLength(7)]
		public string GlobalLinkColor
		{
			get
			{
				var value = GetAttributeValue<string>("globallinkcolor");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("globallinkcolor"))
				    value = (string) backupAttributeCollection["globallinkcolor"];
			    return value;
			}
			set
			{
				OnPropertyChanging("GlobalLinkColor");
					SetAttributeValue("globallinkcolor", value);
				OnPropertyChanged("GlobalLinkColor");
			}
		}

        /// <summary>
        /// [MaximumLength=7] 
		/// 'HeaderColor'.<br />
        /// Choose the color for title text, such as form tab labels
        /// </summary>
		[AttributeLogicalName("headercolor"), MaxLength(7)]
		public string HeaderColor
		{
			get
			{
				var value = GetAttributeValue<string>("headercolor");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("headercolor"))
				    value = (string) backupAttributeCollection["headercolor"];
			    return value;
			}
			set
			{
				OnPropertyChanging("HeaderColor");
					SetAttributeValue("headercolor", value);
				OnPropertyChanged("HeaderColor");
			}
		}

        /// <summary>
        /// [MaximumLength=7] 
		/// 'HoverLinkEffect'.<br />
        /// Choose the color that commands or lists will use to indicate hovered over items
        /// </summary>
		[AttributeLogicalName("hoverlinkeffect"), MaxLength(7)]
		public string HoverLinkEffect
		{
			get
			{
				var value = GetAttributeValue<string>("hoverlinkeffect");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("hoverlinkeffect"))
				    value = (string) backupAttributeCollection["hoverlinkeffect"];
			    return value;
			}
			set
			{
				OnPropertyChanging("HoverLinkEffect");
					SetAttributeValue("hoverlinkeffect", value);
				OnPropertyChanged("HoverLinkEffect");
			}
		}

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'ImportSequenceNumber'.<br />
        /// Sequence number of the import that created this record.
        /// </summary>
		[AttributeLogicalName("importsequencenumber"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? ImportSequenceNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("importsequencenumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("importsequencenumber"))
				    value = (int?) backupAttributeCollection["importsequencenumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ImportSequenceNumber");
					SetAttributeValue("importsequencenumber", value);
				OnPropertyChanged("ImportSequenceNumber");
			}
		}

        /// <summary>
        ///  
		/// 'IsDefaultTheme'.<br />
        /// Default status of theme.
        /// </summary>
		[AttributeLogicalName("isdefaulttheme")]
		public bool? IsDefaultTheme
		{
			get
			{
				var value = GetAttributeValue<bool?>("isdefaulttheme");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("isdefaulttheme"))
				    value = (bool?) backupAttributeCollection["isdefaulttheme"];
			    return value;
			}
			set
			{
				OnPropertyChanging("IsDefaultTheme");
					SetAttributeValue("isdefaulttheme", value);
				OnPropertyChanged("IsDefaultTheme");
			}
		}

        public IDictionary<int, string> IsDefaultThemeLabels
        {
		    get
		    {
                var value = GetAttributeValue<bool?>("isdefaulttheme");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("isdefaulttheme"))
				    value = (bool?) backupAttributeCollection["isdefaulttheme"];
                if (value == null)
                    return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("isdefaulttheme", (bool) value ? 1 : 0, 1033) },
                        };
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'LogoId'.<br />
        /// Upload a web resource to use as a logo. Recommended dimensions are a height of 50 pixels and a maximum width of 400 pixels.
        /// </summary>
		[AttributeLogicalName("logoid")]
		public Guid? LogoId
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("logoid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("logoid"))
				    value = (EntityReference) backupAttributeCollection["logoid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("LogoId");
                if (value != null)
				    SetAttributeValue("logoid", new EntityReference("webresource", value.Value));
                else
					SetAttributeValue("logoid", value);
				OnPropertyChanged("LogoId");
			}
		}

        public string LogoIdName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("logoid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("logoid"))
				    value = (EntityReference) backupAttributeCollection["logoid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_name", "webresource", "webresourceid", "logoid")]
        public IDictionary<int, string> LogoIdLabels { get; set; }

        /// <summary>
        /// [MaximumLength=80] 
		/// 'LogoToolTip'.<br />
        /// Enter text that will be used as the tooltip and alt text for the logo.
        /// </summary>
		[AttributeLogicalName("logotooltip"), MaxLength(80)]
		public string LogoToolTip
		{
			get
			{
				var value = GetAttributeValue<string>("logotooltip");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("logotooltip"))
				    value = (string) backupAttributeCollection["logotooltip"];
			    return value;
			}
			set
			{
				OnPropertyChanging("LogoToolTip");
					SetAttributeValue("logotooltip", value);
				OnPropertyChanged("LogoToolTip");
			}
		}

        /// <summary>
        /// [MaximumLength=7] 
		/// 'MainColor'.<br />
        /// Choose the Unified Interface primary theme color to be used on main command bar, buttons and tabs
        /// </summary>
		[AttributeLogicalName("maincolor"), MaxLength(7)]
		public string MainColor
		{
			get
			{
				var value = GetAttributeValue<string>("maincolor");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("maincolor"))
				    value = (string) backupAttributeCollection["maincolor"];
			    return value;
			}
			set
			{
				OnPropertyChanging("MainColor");
					SetAttributeValue("maincolor", value);
				OnPropertyChanged("MainColor");
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedBy'.<br />
        /// Unique identifier of the user who modified the record.
        /// </summary>
		[AttributeLogicalName("modifiedby")]
		public Guid? ModifiedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedby"))
				    value = (EntityReference) backupAttributeCollection["modifiedby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ModifiedBy");
                if (value != null)
				    SetAttributeValue("modifiedby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("modifiedby", value);
				OnPropertyChanged("ModifiedBy");
			}
		}

        public string ModifiedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedby"))
				    value = (EntityReference) backupAttributeCollection["modifiedby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_fullname", "systemuser", "systemuserid", "modifiedby")]
        public IDictionary<int, string> ModifiedByLabels { get; set; }

        /// <summary>
        ///  
		/// 'ModifiedOn'.<br />
        /// Date and time when the record was modified.
        /// </summary>
		[AttributeLogicalName("modifiedon")]
		public DateTime? ModifiedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("modifiedon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedon"))
				    value = (DateTime?) backupAttributeCollection["modifiedon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ModifiedOn");
					SetAttributeValue("modifiedon", value);
				OnPropertyChanged("ModifiedOn");
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who modified the record.
        /// </summary>
		[AttributeLogicalName("modifiedonbehalfby")]
		public Guid? ModifiedOnBehalfBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["modifiedonbehalfby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ModifiedOnBehalfBy");
                if (value != null)
				    SetAttributeValue("modifiedonbehalfby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("modifiedonbehalfby", value);
				OnPropertyChanged("ModifiedOnBehalfBy");
			}
		}

        public string ModifiedOnBehalfByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["modifiedonbehalfby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_fullname", "systemuser", "systemuserid", "modifiedonbehalfby")]
        public IDictionary<int, string> ModifiedOnBehalfByLabels { get; set; }

        /// <summary>
        /// [MaximumLength=100] 
		/// 'Name'.<br />
        /// The name of the Theme Entity.
        /// </summary>
		[AttributeLogicalName("name"), MaxLength(100)]
		public string Name
		{
			get
			{
				var value = GetAttributeValue<string>("name");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("name"))
				    value = (string) backupAttributeCollection["name"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Name");
					SetAttributeValue("name", value);
				OnPropertyChanged("Name");
			}
		}

        /// <summary>
        /// [MaximumLength=7] 
		/// 'NavBarBackgroundColor'.<br />
        /// Choose the primary Navigation Bar background color
        /// </summary>
		[AttributeLogicalName("navbarbackgroundcolor"), MaxLength(7)]
		public string NavBarBackgroundColor
		{
			get
			{
				var value = GetAttributeValue<string>("navbarbackgroundcolor");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("navbarbackgroundcolor"))
				    value = (string) backupAttributeCollection["navbarbackgroundcolor"];
			    return value;
			}
			set
			{
				OnPropertyChanging("NavBarBackgroundColor");
					SetAttributeValue("navbarbackgroundcolor", value);
				OnPropertyChanged("NavBarBackgroundColor");
			}
		}

        /// <summary>
        /// [MaximumLength=7] 
		/// 'NavBarShelfColor'.<br />
        /// Choose the secondary Navigation Bar background color
        /// </summary>
		[AttributeLogicalName("navbarshelfcolor"), MaxLength(7)]
		public string NavBarShelfColor
		{
			get
			{
				var value = GetAttributeValue<string>("navbarshelfcolor");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("navbarshelfcolor"))
				    value = (string) backupAttributeCollection["navbarshelfcolor"];
			    return value;
			}
			set
			{
				OnPropertyChanging("NavBarShelfColor");
					SetAttributeValue("navbarshelfcolor", value);
				OnPropertyChanged("NavBarShelfColor");
			}
		}

        /// <summary>
        ///  
		/// 'OrganizationId'.<br />
        /// Unique identifier for the organization
        /// </summary>
		[AttributeLogicalName("organizationid")]
		public Guid? OrganizationId
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("organizationid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("organizationid"))
				    value = (EntityReference) backupAttributeCollection["organizationid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OrganizationId");
                if (value != null)
				    SetAttributeValue("organizationid", new EntityReference("organization", value.Value));
                else
					SetAttributeValue("organizationid", value);
				OnPropertyChanged("OrganizationId");
			}
		}

        public string OrganizationIdName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("organizationid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("organizationid"))
				    value = (EntityReference) backupAttributeCollection["organizationid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_name", "organization", "organizationid", "organizationid")]
        public IDictionary<int, string> OrganizationIdLabels { get; set; }

        /// <summary>
        ///  
		/// 'OverriddenCreatedOn'.<br />
        /// Date and time that the record was migrated.
        /// </summary>
		[AttributeLogicalName("overriddencreatedon")]
		public DateTime? OverriddenCreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("overriddencreatedon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("overriddencreatedon"))
				    value = (DateTime?) backupAttributeCollection["overriddencreatedon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("OverriddenCreatedOn");
					SetAttributeValue("overriddencreatedon", value);
				OnPropertyChanged("OverriddenCreatedOn");
			}
		}

        /// <summary>
        /// [MaximumLength=7] 
		/// 'PageHeaderBackgroundColor'.<br />
        /// Choose the page header background color
        /// </summary>
		[AttributeLogicalName("pageheaderbackgroundcolor"), MaxLength(7)]
		public string PageHeaderBackgroundColor
		{
			get
			{
				var value = GetAttributeValue<string>("pageheaderbackgroundcolor");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("pageheaderbackgroundcolor"))
				    value = (string) backupAttributeCollection["pageheaderbackgroundcolor"];
			    return value;
			}
			set
			{
				OnPropertyChanging("PageHeaderBackgroundColor");
					SetAttributeValue("pageheaderbackgroundcolor", value);
				OnPropertyChanged("PageHeaderBackgroundColor");
			}
		}

        /// <summary>
        /// [MaximumLength=7] 
		/// 'PanelHeaderBackgroundColor'.<br />
        /// Choose the panel header background color
        /// </summary>
		[AttributeLogicalName("panelheaderbackgroundcolor"), MaxLength(7)]
		public string PanelHeaderBackgroundColor
		{
			get
			{
				var value = GetAttributeValue<string>("panelheaderbackgroundcolor");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("panelheaderbackgroundcolor"))
				    value = (string) backupAttributeCollection["panelheaderbackgroundcolor"];
			    return value;
			}
			set
			{
				OnPropertyChanging("PanelHeaderBackgroundColor");
					SetAttributeValue("panelheaderbackgroundcolor", value);
				OnPropertyChanged("PanelHeaderBackgroundColor");
			}
		}

        /// <summary>
        /// [MaximumLength=7] 
		/// 'ProcessControlColor'.<br />
        /// Choose the primary background color for process controls
        /// </summary>
		[AttributeLogicalName("processcontrolcolor"), MaxLength(7)]
		public string ProcessControlColor
		{
			get
			{
				var value = GetAttributeValue<string>("processcontrolcolor");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("processcontrolcolor"))
				    value = (string) backupAttributeCollection["processcontrolcolor"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ProcessControlColor");
					SetAttributeValue("processcontrolcolor", value);
				OnPropertyChanged("ProcessControlColor");
			}
		}

        /// <summary>
        /// [MaximumLength=7] 
		/// 'SelectedLinkEffect'.<br />
        /// Choose the color that commands or lists will use to indicate selected items
        /// </summary>
		[AttributeLogicalName("selectedlinkeffect"), MaxLength(7)]
		public string SelectedLinkEffect
		{
			get
			{
				var value = GetAttributeValue<string>("selectedlinkeffect");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("selectedlinkeffect"))
				    value = (string) backupAttributeCollection["selectedlinkeffect"];
			    return value;
			}
			set
			{
				OnPropertyChanging("SelectedLinkEffect");
					SetAttributeValue("selectedlinkeffect", value);
				OnPropertyChanged("SelectedLinkEffect");
			}
		}

        /// <summary>
        ///  
		/// 'statecode'.<br />
        /// Status of the Theme
        /// </summary>
		[AttributeLogicalName("statecode")]
		public statecodeEnum? statecode
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("statecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("statecode"))
				    value = (OptionSetValue) backupAttributeCollection["statecode"];
                return value == null ? (statecodeEnum?) null : (statecodeEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("statecode");
                if (value != null)
				    SetAttributeValue("statecode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("statecode", value);
				OnPropertyChanged("statecode");
			}
		}

        public IDictionary<int, string> statecodeLabels
        {
		    get
		    {
                var value = GetAttributeValue<OptionSetValue>("statecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("statecode"))
				    value = (OptionSetValue) backupAttributeCollection["statecode"];
                if (value == null)
                    return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("statecode", value.Value, 1033) },
                        };
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'statuscode'.<br />
        /// Reason for the status of the Theme
        /// </summary>
		[AttributeLogicalName("statuscode")]
		public statuscodeEnum? statuscode
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("statuscode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("statuscode"))
				    value = (OptionSetValue) backupAttributeCollection["statuscode"];
                return value == null ? (statuscodeEnum?) null : (statuscodeEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("statuscode");
                if (value != null)
				    SetAttributeValue("statuscode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("statuscode", value);
				OnPropertyChanged("statuscode");
			}
		}

        public IDictionary<int, string> statuscodeLabels
        {
		    get
		    {
                var value = GetAttributeValue<OptionSetValue>("statuscode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("statuscode"))
				    value = (OptionSetValue) backupAttributeCollection["statuscode"];
                if (value == null)
                    return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("statuscode", value.Value, 1033) },
                        };
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'ThemeId'.<br />
        /// Unique identifier for entity instances
        /// </summary>
		[AttributeLogicalName("themeid")]
		public Guid? ThemeId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("themeid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("themeid"))
				    value = (Guid?) backupAttributeCollection["themeid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ThemeId");
                if (value != null)
					SetAttributeValue("themeid", value);
				if (value != null)
					base.Id = value.Value;
				else
					Id = System.Guid.Empty;
				OnPropertyChanged("ThemeId");
			}
		}

        /// <summary>
        /// [Range(-1, 2147483647)] 
		/// 'TimeZoneRuleVersionNumber'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("timezoneruleversionnumber"), InRange("-1", "2147483647", typeof(int))]
		public int? TimeZoneRuleVersionNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("timezoneruleversionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("timezoneruleversionnumber"))
				    value = (int?) backupAttributeCollection["timezoneruleversionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("TimeZoneRuleVersionNumber");
					SetAttributeValue("timezoneruleversionnumber", value);
				OnPropertyChanged("TimeZoneRuleVersionNumber");
			}
		}

        /// <summary>
        ///  
		/// 'TransactionCurrencyId'.<br />
        /// Exchange rate for the currency associated with the Theme with respect to the base currency.
        /// </summary>
		[AttributeLogicalName("transactioncurrencyid")]
		public Guid? TransactionCurrencyId
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("transactioncurrencyid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("transactioncurrencyid"))
				    value = (EntityReference) backupAttributeCollection["transactioncurrencyid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("TransactionCurrencyId");
                if (value != null)
				    SetAttributeValue("transactioncurrencyid", new EntityReference("transactioncurrency", value.Value));
                else
					SetAttributeValue("transactioncurrencyid", value);
				OnPropertyChanged("TransactionCurrencyId");
			}
		}

        public string TransactionCurrencyIdName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("transactioncurrencyid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("transactioncurrencyid"))
				    value = (EntityReference) backupAttributeCollection["transactioncurrencyid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_currencyname", "transactioncurrency", "transactioncurrencyid", "transactioncurrencyid")]
        public IDictionary<int, string> TransactionCurrencyIdLabels { get; set; }

        /// <summary>
        ///  
		/// 'Type'.<br />
        /// Define type of theme.
        /// </summary>
		[AttributeLogicalName("type")]
		public bool? Type
		{
			get
			{
				var value = GetAttributeValue<bool?>("type");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("type"))
				    value = (bool?) backupAttributeCollection["type"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Type");
					SetAttributeValue("type", value);
				OnPropertyChanged("Type");
			}
		}

        public IDictionary<int, string> TypeLabels
        {
		    get
		    {
                var value = GetAttributeValue<bool?>("type");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("type"))
				    value = (bool?) backupAttributeCollection["type"];
                if (value == null)
                    return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("type", (bool) value ? 1 : 0, 1033) },
                        };
            }
            set
            {}
        }

        /// <summary>
        /// [Range(-1, 2147483647)] 
		/// 'UTCConversionTimeZoneCode'.<br />
        /// Time zone code that was in use when the record was created.
        /// </summary>
		[AttributeLogicalName("utcconversiontimezonecode"), InRange("-1", "2147483647", typeof(int))]
		public int? UTCConversionTimeZoneCode
		{
			get
			{
				var value = GetAttributeValue<int?>("utcconversiontimezonecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("utcconversiontimezonecode"))
				    value = (int?) backupAttributeCollection["utcconversiontimezonecode"];
			    return value;
			}
			set
			{
				OnPropertyChanging("UTCConversionTimeZoneCode");
					SetAttributeValue("utcconversiontimezonecode", value);
				OnPropertyChanged("UTCConversionTimeZoneCode");
			}
		}

		[AttributeLogicalName("versionnumber")]
		public long? VersionNumber
		{
			get
			{
				var value = GetAttributeValue<long?>("versionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("versionnumber"))
				    value = (long?) backupAttributeCollection["versionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("VersionNumber");
					SetAttributeValue("versionnumber", value);
				OnPropertyChanged("VersionNumber");
			}
		}

		#endregion

		#region Relationships

		
		public static class RelationNames {
		}


		protected override IDictionary<string, object[]> RelationProperties { get {
			if (relationProperties != null) return relationProperties;
			relationProperties = new Dictionary<string, object[]>();
			return relationProperties; } }


		#endregion

		/// <summary>
		/// Constructor for populating via LINQ queries given a LINQ anonymous type
		/// <param name="anonymousType">LINQ anonymous type.</param>
		/// </summary>
		public Theme(object anonymousType) : 
				this()
		{
            foreach (var p in anonymousType.GetType().GetProperties())
            {
                var value = p.GetValue(anonymousType, null);
                if (p.PropertyType == typeof(System.Guid))
                {
                    // Type is Guid, must be Id
                    base.Id = (System.Guid)value;
                    Attributes["themeid"] = base.Id;
               }
                else if (p.Name == "FormattedValues")
                {
                    // Add Support for FormattedValues
                    FormattedValues.AddRange((FormattedValueCollection)value);
                }
                else
                {
                    Attributes[p.Name.ToLower()] = value;
                }
            }
		}


		#region Label/value pairs

		#region IsDefaultTheme

		public enum IsDefaultThemeEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region statecode

		public enum statecodeEnum
		{
			[EnumMember]Custom = 0,
			[EnumMember]System = 1,
		}

		#endregion
	
		#region statuscode

		public enum statuscodeEnum
		{
			[EnumMember]Custom = 1,
			[EnumMember]System = 2,
		}

		#endregion
	
		#region Type

		public enum TypeEnum
		{
			[EnumMember]Custom = 1,
			[EnumMember]System = 0,
		}

		#endregion
	
		#endregion


		#region Metadata


		#region Enums

		public static class Enums
		{
			/// <summary>
			/// Gets the label corresponding to the option-set's value using its logical name,
			/// the value within, and the language code.
			/// </summary>
			/// <param name="logicalName">The logical name of the option-set in CRM</param>
			/// <param name="constant">The value from the option-set</param>
			/// <param name="languageCode">The language code from CRM</param>
			/// <returns></returns>
			public static string GetLabel(string logicalName, int constant, int languageCode = 1033)
			{
				return GeneratorHelpers.GetLabel(logicalName, constant, typeof(Enums), languageCode);
			}
			/// <summary>
			/// Gets the value corresponding to the option-set's label using its logical name,
			/// the value within, and the language code.
			/// </summary>
			/// <param name="logicalName">The logical name of the option-set in CRM</param>
			/// <param name="label">The label from the option-set</param>
			/// <param name="languageCode">The language code from CRM</param>
			/// <returns>The value corresponding to the label</returns>
			public static int GetValue(string logicalName, string label, int languageCode = 1033)
			{
				return GeneratorHelpers.GetValue(logicalName, label, typeof(Enums), languageCode);
			}

			#region Logical names

			public static class Names
			{
				public const string IsDefaultTheme = "isdefaulttheme";
				public const string statecode = "statecode";
				public const string statuscode = "statuscode";
				public const string Type = "type";
			}

			#endregion

			#region Labels

			public static class Labels
			{
				public static class IsDefaultTheme 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(IsDefaultTheme), label, languageCode);
					}
				}

				public static class statecode 
				{
					public const string Custom_1033 = "Custom";
					public const string System_1033 = "System";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(statecode), label, languageCode);
					}
				}

				public static class statuscode 
				{
					public const string Custom_1033 = "Custom";
					public const string System_1033 = "System";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(statuscode), label, languageCode);
					}
				}

				public static class Type 
				{
					public const string Custom_1033 = "Custom";
					public const string System_1033 = "System";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(Type), label, languageCode);
					}
				}

			}

			#endregion
		}

		#endregion

		#region Fields

		public static class Fields
		{
			#region Logical names

			public const string AccentColor = "accentcolor";
			public const string BackgroundColor = "backgroundcolor";
			public const string ControlBorder = "controlborder";
			public const string ControlShade = "controlshade";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string DefaultCustomEntityColor = "defaultcustomentitycolor";
			public const string DefaultEntityColor = "defaultentitycolor";
			public const string ExchangeRate = "exchangerate";
			public const string GlobalLinkColor = "globallinkcolor";
			public const string HeaderColor = "headercolor";
			public const string HoverLinkEffect = "hoverlinkeffect";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string IsDefaultTheme = "isdefaulttheme";
			public const string LogoId = "logoid";
			public const string LogoToolTip = "logotooltip";
			public const string MainColor = "maincolor";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string Name = "name";
			public const string NavBarBackgroundColor = "navbarbackgroundcolor";
			public const string NavBarShelfColor = "navbarshelfcolor";
			public const string OrganizationId = "organizationid";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string PageHeaderBackgroundColor = "pageheaderbackgroundcolor";
			public const string PanelHeaderBackgroundColor = "panelheaderbackgroundcolor";
			public const string ProcessControlColor = "processcontrolcolor";
			public const string SelectedLinkEffect = "selectedlinkeffect";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string ThemeId = "themeid";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string Type = "type";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";

			#endregion

			#region Schema names

			public static class Schema
			{
				public const string AccentColor = "AccentColor";
				public const string BackgroundColor = "BackgroundColor";
				public const string ControlBorder = "ControlBorder";
				public const string ControlShade = "ControlShade";
				public const string CreatedBy = "CreatedBy";
				public const string CreatedOn = "CreatedOn";
				public const string CreatedOnBehalfBy = "CreatedOnBehalfBy";
				public const string DefaultCustomEntityColor = "DefaultCustomEntityColor";
				public const string DefaultEntityColor = "DefaultEntityColor";
				public const string ExchangeRate = "ExchangeRate";
				public const string GlobalLinkColor = "GlobalLinkColor";
				public const string HeaderColor = "HeaderColor";
				public const string HoverLinkEffect = "HoverLinkEffect";
				public const string ImportSequenceNumber = "ImportSequenceNumber";
				public const string IsDefaultTheme = "IsDefaultTheme";
				public const string LogoId = "LogoId";
				public const string LogoToolTip = "LogoToolTip";
				public const string MainColor = "MainColor";
				public const string ModifiedBy = "ModifiedBy";
				public const string ModifiedOn = "ModifiedOn";
				public const string ModifiedOnBehalfBy = "ModifiedOnBehalfBy";
				public const string Name = "Name";
				public const string NavBarBackgroundColor = "NavBarBackgroundColor";
				public const string NavBarShelfColor = "NavBarShelfColor";
				public const string OrganizationId = "OrganizationId";
				public const string OverriddenCreatedOn = "OverriddenCreatedOn";
				public const string PageHeaderBackgroundColor = "PageHeaderBackgroundColor";
				public const string PanelHeaderBackgroundColor = "PanelHeaderBackgroundColor";
				public const string ProcessControlColor = "ProcessControlColor";
				public const string SelectedLinkEffect = "SelectedLinkEffect";
				public const string statecode = "statecode";
				public const string statuscode = "statuscode";
				public const string ThemeId = "ThemeId";
				public const string TimeZoneRuleVersionNumber = "TimeZoneRuleVersionNumber";
				public const string TransactionCurrencyId = "TransactionCurrencyId";
				public const string Type = "Type";
				public const string UTCConversionTimeZoneCode = "UTCConversionTimeZoneCode";
				public const string VersionNumber = "VersionNumber";
			}

			#endregion

			#region Labels

			public static class Labels
			{
				public static class AccentColor
				{
					public const string _1033 = "Accent Color";
				}

				public static class BackgroundColor
				{
					public const string _1033 = "Background Color";
				}

				public static class ControlBorder
				{
					public const string _1033 = "Control Hover Border Color";
				}

				public static class ControlShade
				{
					public const string _1033 = "Control Hover Fill Color";
				}

				public static class CreatedBy
				{
					public const string _1033 = "Created By";
				}

				public static class CreatedOn
				{
					public const string _1033 = "Created On";
				}

				public static class CreatedOnBehalfBy
				{
					public const string _1033 = "Created By (Delegate)";
				}

				public static class DefaultCustomEntityColor
				{
					public const string _1033 = "Default Custom Entity Color";
				}

				public static class DefaultEntityColor
				{
					public const string _1033 = "Default Entity Color";
				}

				public static class ExchangeRate
				{
					public const string _1033 = "ExchangeRate";
				}

				public static class GlobalLinkColor
				{
					public const string _1033 = "Link and Button Text Color";
				}

				public static class HeaderColor
				{
					public const string _1033 = "Title Text Color";
				}

				public static class HoverLinkEffect
				{
					public const string _1033 = "Hover Link Color";
				}

				public static class ImportSequenceNumber
				{
					public const string _1033 = "Import Sequence Number";
				}

				public static class IsDefaultTheme
				{
					public const string _1033 = "Default Theme";
				}

				public static class LogoId
				{
					public const string _1033 = "Logo";
				}

				public static class LogoToolTip
				{
					public const string _1033 = "Logo Tooltip";
				}

				public static class MainColor
				{
					public const string _1033 = "Main Color";
				}

				public static class ModifiedBy
				{
					public const string _1033 = "Modified By";
				}

				public static class ModifiedOn
				{
					public const string _1033 = "Modified On";
				}

				public static class ModifiedOnBehalfBy
				{
					public const string _1033 = "Modified By (Delegate)";
				}

				public static class Name
				{
					public const string _1033 = "Theme Name";
				}

				public static class NavBarBackgroundColor
				{
					public const string _1033 = "Navigation Bar Fill Color";
				}

				public static class NavBarShelfColor
				{
					public const string _1033 = "Navigation Bar Shelf Fill Color";
				}

				public static class OrganizationId
				{
					public const string _1033 = "Organization Id";
				}

				public static class OverriddenCreatedOn
				{
					public const string _1033 = "Record Created On";
				}

				public static class PageHeaderBackgroundColor
				{
					public const string _1033 = "Page Header Fill Color";
				}

				public static class PanelHeaderBackgroundColor
				{
					public const string _1033 = "Panel Header Fill Color";
				}

				public static class ProcessControlColor
				{
					public const string _1033 = "Legacy Accent Color";
				}

				public static class SelectedLinkEffect
				{
					public const string _1033 = "Selected Link Color";
				}

				public static class statecode
				{
					public const string _1033 = "Status";
				}

				public static class statuscode
				{
					public const string _1033 = "Status Reason";
				}

				public static class ThemeId
				{
					public const string _1033 = "Theme";
				}

				public static class TimeZoneRuleVersionNumber
				{
					public const string _1033 = "Time Zone Rule Version Number";
				}

				public static class TransactionCurrencyId
				{
					public const string _1033 = "Currency";
				}

				public static class Type
				{
					public const string _1033 = "Type";
				}

				public static class UTCConversionTimeZoneCode
				{
					public const string _1033 = "UTC Conversion Time Zone Code";
				}

				public static class VersionNumber
				{
				}

			}

			#endregion
		}

		#endregion

		#region Relations

		public static class Relations
		{
			public static class OneToN
			{
			}
			
			public static class NToOne
			{

				public static class Lookups
				{
				}
			}

			public static class NToN
			{

			}
		}

		#endregion

		#endregion
	}

	#endregion

	#endregion

}

